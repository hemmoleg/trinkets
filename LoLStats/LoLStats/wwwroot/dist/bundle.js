!function(t){var e={};function n(o){if(e[o])return e[o].exports;var r=e[o]={i:o,l:!1,exports:{}};return t[o].call(r.exports,r,r.exports,n),r.l=!0,r.exports}n.m=t,n.c=e,n.d=function(t,e,o){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:o})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var o=Object.create(null);if(n.r(o),Object.defineProperty(o,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var r in t)n.d(o,r,function(e){return t[e]}.bind(null,r));return o},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="/wwwwroot/dist/",n(n.s=0)}({0:function(t,e,n){"use strict";n.r(e);n(5);
/*! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */var o=function(t,e){return(o=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(t,e)};function r(t,e){function n(){this.constructor=t}o(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)}var s=function(){return(s=Object.assign||function(t){for(var e,n=1,o=arguments.length;n<o;n++)for(var r in e=arguments[n])Object.prototype.hasOwnProperty.call(e,r)&&(t[r]=e[r]);return t}).apply(this,arguments)};function i(t,e,n,o){return new(n||(n=Promise))(function(r,s){function i(t){try{c(o.next(t))}catch(t){s(t)}}function a(t){try{c(o.throw(t))}catch(t){s(t)}}function c(t){t.done?r(t.value):new n(function(e){e(t.value)}).then(i,a)}c((o=o.apply(t,e||[])).next())})}function a(t,e){var n,o,r,s,i={label:0,sent:function(){if(1&r[0])throw r[1];return r[1]},trys:[],ops:[]};return s={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(s[Symbol.iterator]=function(){return this}),s;function a(s){return function(a){return function(s){if(n)throw new TypeError("Generator is already executing.");for(;i;)try{if(n=1,o&&(r=2&s[0]?o.return:s[0]?o.throw||((r=o.return)&&r.call(o),0):o.next)&&!(r=r.call(o,s[1])).done)return r;switch(o=0,r&&(s=[2&s[0],r.value]),s[0]){case 0:case 1:r=s;break;case 4:return i.label++,{value:s[1],done:!1};case 5:i.label++,o=s[1],s=[0];continue;case 7:s=i.ops.pop(),i.trys.pop();continue;default:if(!(r=(r=i.trys).length>0&&r[r.length-1])&&(6===s[0]||2===s[0])){i=0;continue}if(3===s[0]&&(!r||s[1]>r[0]&&s[1]<r[3])){i.label=s[1];break}if(6===s[0]&&i.label<r[1]){i.label=r[1],r=s;break}if(r&&i.label<r[2]){i.label=r[2],i.ops.push(s);break}r[2]&&i.ops.pop(),i.trys.pop();continue}s=e.call(t,i)}catch(t){s=[6,t],o=0}finally{n=r=0}if(5&s[0])throw s[1];return{value:s[0]?s[1]:void 0,done:!0}}([s,a])}}}var c,l=function(t){function e(e,n){var o=this,r=this.constructor.prototype;return(o=t.call(this,e)||this).statusCode=n,o.__proto__=r,o}return r(e,t),e}(Error),u=function(t){function e(e){var n=this.constructor;void 0===e&&(e="A timeout occurred.");var o=this,r=n.prototype;return(o=t.call(this,e)||this).__proto__=r,o}return r(e,t),e}(Error);!function(t){t[t.Trace=0]="Trace",t[t.Debug=1]="Debug",t[t.Information=2]="Information",t[t.Warning=3]="Warning",t[t.Error=4]="Error",t[t.Critical=5]="Critical",t[t.None=6]="None"}(c||(c={}));var h,p=function(){return function(t,e,n){this.statusCode=t,this.statusText=e,this.content=n}}(),g=function(t){function e(e){var n=t.call(this)||this;return n.logger=e,n}return r(e,t),e.prototype.send=function(t){var e=this;return new Promise(function(n,o){var r=new XMLHttpRequest;r.open(t.method,t.url,!0),r.withCredentials=!0,r.setRequestHeader("X-Requested-With","XMLHttpRequest"),t.headers&&Object.keys(t.headers).forEach(function(e){return r.setRequestHeader(e,t.headers[e])}),t.responseType&&(r.responseType=t.responseType),t.abortSignal&&(t.abortSignal.onabort=function(){r.abort()}),t.timeout&&(r.timeout=t.timeout),r.onload=function(){t.abortSignal&&(t.abortSignal.onabort=null),r.status>=200&&r.status<300?n(new p(r.status,r.statusText,r.response||r.responseText)):o(new l(r.statusText,r.status))},r.onerror=function(){e.logger.log(c.Warning,"Error from HTTP request. "+r.status+": "+r.statusText),o(new l(r.statusText,r.status))},r.ontimeout=function(){e.logger.log(c.Warning,"Timeout from HTTP request."),o(new u)},r.send(t.content||"")})},e}(function(){function t(){}return t.prototype.get=function(t,e){return this.send(s({},e,{method:"GET",url:t}))},t.prototype.post=function(t,e){return this.send(s({},e,{method:"POST",url:t}))},t.prototype.delete=function(t,e){return this.send(s({},e,{method:"DELETE",url:t}))},t}()),d=function(){function t(){}return t.write=function(e){return""+e+t.RecordSeparator},t.parse=function(e){if(e[e.length-1]!==t.RecordSeparator)throw new Error("Message is incomplete.");var n=e.split(t.RecordSeparator);return n.pop(),n},t.RecordSeparatorCode=30,t.RecordSeparator=String.fromCharCode(t.RecordSeparatorCode),t}(),f=function(){function t(){}return t.prototype.writeHandshakeRequest=function(t){return d.write(JSON.stringify(t))},t.prototype.parseHandshakeResponse=function(t){var e,n;if(t instanceof ArrayBuffer){var o=new Uint8Array(t);if(-1===(s=o.indexOf(d.RecordSeparatorCode)))throw new Error("Message is incomplete.");var r=s+1;e=String.fromCharCode.apply(null,o.slice(0,r)),n=o.byteLength>r?o.slice(r).buffer:null}else{var s,i=t;if(-1===(s=i.indexOf(d.RecordSeparator)))throw new Error("Message is incomplete.");r=s+1;e=i.substring(0,r),n=i.length>r?i.substring(r):null}var a=d.parse(e);return[n,JSON.parse(a[0])]},t}();!function(t){t[t.Invocation=1]="Invocation",t[t.StreamItem=2]="StreamItem",t[t.Completion=3]="Completion",t[t.StreamInvocation=4]="StreamInvocation",t[t.CancelInvocation=5]="CancelInvocation",t[t.Ping=6]="Ping",t[t.Close=7]="Close"}(h||(h={}));var v=function(){function t(){}return t.prototype.log=function(t,e){},t.instance=new t,t}(),m=function(){function t(){}return t.isRequired=function(t,e){if(null===t||void 0===t)throw new Error("The '"+e+"' argument is required.")},t.isIn=function(t,e,n){if(!(t in e))throw new Error("Unknown "+n+" value: "+t+".")},t}();function y(t,e){var n=null;return t instanceof ArrayBuffer?(n="Binary data of length "+t.byteLength,e&&(n+=". Content: '"+function(t){var e="";return new Uint8Array(t).forEach(function(t){e+="0x"+(t<16?"0":"")+t.toString(16)+" "}),e.substr(0,e.length-1)}(t)+"'")):"string"==typeof t&&(n="String data of length "+t.length,e&&(n+=". Content: '"+t+"'.")),n}function b(t,e,n,o,r,s,l){return i(this,void 0,void 0,function(){var i,u,h,p;return a(this,function(a){switch(a.label){case 0:return[4,r()];case 1:return(u=a.sent())&&((p={}).Authorization="Bearer "+u,i=p),t.log(c.Trace,"("+e+" transport) sending data. "+y(s,l)+"."),[4,n.post(o,{content:s,headers:i})];case 2:return h=a.sent(),t.log(c.Trace,"("+e+" transport) request complete. Response status: "+h.statusCode+"."),[2]}})})}var w,S,C=function(){function t(t){this.observers=[],this.cancelCallback=t}return t.prototype.next=function(t){for(var e=0,n=this.observers;e<n.length;e++){n[e].next(t)}},t.prototype.error=function(t){for(var e=0,n=this.observers;e<n.length;e++){var o=n[e];o.error&&o.error(t)}},t.prototype.complete=function(){for(var t=0,e=this.observers;t<e.length;t++){var n=e[t];n.complete&&n.complete()}},t.prototype.subscribe=function(t){return this.observers.push(t),new T(this,t)},t}(),T=function(){function t(t,e){this.subject=t,this.observer=e}return t.prototype.dispose=function(){var t=this.subject.observers.indexOf(this.observer);t>-1&&this.subject.observers.splice(t,1),0===this.subject.observers.length&&this.subject.cancelCallback().catch(function(t){})},t}(),k=function(){function t(t){this.minimumLogLevel=t}return t.prototype.log=function(t,e){if(t>=this.minimumLogLevel)switch(t){case c.Critical:case c.Error:console.error(c[t]+": "+e);break;case c.Warning:console.warn(c[t]+": "+e);break;case c.Information:console.info(c[t]+": "+e);break;default:console.log(c[t]+": "+e)}},t}(),E=3e4,I=function(){function t(t,e,n){var o=this;m.isRequired(t,"connection"),m.isRequired(e,"logger"),m.isRequired(n,"protocol"),this.serverTimeoutInMilliseconds=E,this.logger=e,this.protocol=n,this.connection=t,this.handshakeProtocol=new f,this.connection.onreceive=function(t){return o.processIncomingData(t)},this.connection.onclose=function(t){return o.connectionClosed(t)},this.callbacks={},this.methods={},this.closedCallbacks=[],this.id=0}return t.create=function(e,n,o){return new t(e,n,o)},t.prototype.start=function(){return i(this,void 0,void 0,function(){var t;return a(this,function(e){switch(e.label){case 0:return t={protocol:this.protocol.name,version:this.protocol.version},this.logger.log(c.Debug,"Starting HubConnection."),this.receivedHandshakeResponse=!1,[4,this.connection.start(this.protocol.transferFormat)];case 1:return e.sent(),this.logger.log(c.Debug,"Sending handshake request."),[4,this.connection.send(this.handshakeProtocol.writeHandshakeRequest(t))];case 2:return e.sent(),this.logger.log(c.Information,"Using HubProtocol '"+this.protocol.name+"'."),this.cleanupTimeout(),this.configureTimeout(),[2]}})})},t.prototype.stop=function(){return this.logger.log(c.Debug,"Stopping HubConnection."),this.cleanupTimeout(),this.connection.stop()},t.prototype.stream=function(t){for(var e=this,n=[],o=1;o<arguments.length;o++)n[o-1]=arguments[o];var r=this.createStreamInvocation(t,n),s=new C(function(){var t=e.createCancelInvocation(r.invocationId),n=e.protocol.writeMessage(t);return delete e.callbacks[r.invocationId],e.connection.send(n)});this.callbacks[r.invocationId]=function(t,e){e?s.error(e):t.type===h.Completion?t.error?s.error(new Error(t.error)):s.complete():s.next(t.item)};var i=this.protocol.writeMessage(r);return this.connection.send(i).catch(function(t){s.error(t),delete e.callbacks[r.invocationId]}),s},t.prototype.send=function(t){for(var e=[],n=1;n<arguments.length;n++)e[n-1]=arguments[n];var o=this.createInvocation(t,e,!0),r=this.protocol.writeMessage(o);return this.connection.send(r)},t.prototype.invoke=function(t){for(var e=this,n=[],o=1;o<arguments.length;o++)n[o-1]=arguments[o];var r=this.createInvocation(t,n,!1);return new Promise(function(t,n){e.callbacks[r.invocationId]=function(e,o){if(o)n(o);else if(e.type===h.Completion){var r=e;r.error?n(new Error(r.error)):t(r.result)}else n(new Error("Unexpected message type: "+e.type))};var o=e.protocol.writeMessage(r);e.connection.send(o).catch(function(t){n(t),delete e.callbacks[r.invocationId]})})},t.prototype.on=function(t,e){t&&e&&(t=t.toLowerCase(),this.methods[t]||(this.methods[t]=[]),-1===this.methods[t].indexOf(e)&&this.methods[t].push(e))},t.prototype.off=function(t,e){if(t){t=t.toLowerCase();var n=this.methods[t];if(n)if(e){var o=n.indexOf(e);-1!==o&&(n.splice(o,1),0===n.length&&delete this.methods[t])}else delete this.methods[t]}},t.prototype.onclose=function(t){t&&this.closedCallbacks.push(t)},t.prototype.processIncomingData=function(t){if(this.cleanupTimeout(),this.receivedHandshakeResponse||(t=this.processHandshakeResponse(t),this.receivedHandshakeResponse=!0),t)for(var e=0,n=this.protocol.parseMessages(t,this.logger);e<n.length;e++){var o=n[e];switch(o.type){case h.Invocation:this.invokeClientMethod(o);break;case h.StreamItem:case h.Completion:var r=this.callbacks[o.invocationId];null!=r&&(o.type===h.Completion&&delete this.callbacks[o.invocationId],r(o));break;case h.Ping:break;case h.Close:this.logger.log(c.Information,"Close message received from server."),this.connection.stop(o.error?new Error("Server returned an error on close: "+o.error):null);break;default:this.logger.log(c.Warning,"Invalid message type: "+o.type)}}this.configureTimeout()},t.prototype.processHandshakeResponse=function(t){var e,n,o;try{n=(o=this.handshakeProtocol.parseHandshakeResponse(t))[0],e=o[1]}catch(t){var r="Error parsing handshake response: "+t;this.logger.log(c.Error,r);var s=new Error(r);throw this.connection.stop(s),s}if(e.error){r="Server returned handshake error: "+e.error;this.logger.log(c.Error,r),this.connection.stop(new Error(r))}else this.logger.log(c.Debug,"Server handshake complete.");return n},t.prototype.configureTimeout=function(){var t=this;this.connection.features&&this.connection.features.inherentKeepAlive||(this.timeoutHandle=setTimeout(function(){return t.serverTimeout()},this.serverTimeoutInMilliseconds))},t.prototype.serverTimeout=function(){this.connection.stop(new Error("Server timeout elapsed without receiving a message from the server."))},t.prototype.invokeClientMethod=function(t){var e=this,n=this.methods[t.target.toLowerCase()];if(n){if(n.forEach(function(n){return n.apply(e,t.arguments)}),t.invocationId){var o="Server requested a response, which is not supported in this version of the client.";this.logger.log(c.Error,o),this.connection.stop(new Error(o))}}else this.logger.log(c.Warning,"No client method with the name '"+t.target+"' found.")},t.prototype.connectionClosed=function(t){var e=this,n=this.callbacks;this.callbacks={},Object.keys(n).forEach(function(e){(0,n[e])(void 0,t||new Error("Invocation canceled due to connection being closed."))}),this.cleanupTimeout(),this.closedCallbacks.forEach(function(n){return n.apply(e,[t])})},t.prototype.cleanupTimeout=function(){this.timeoutHandle&&clearTimeout(this.timeoutHandle)},t.prototype.createInvocation=function(t,e,n){if(n)return{arguments:e,target:t,type:h.Invocation};var o=this.id;return this.id++,{arguments:e,invocationId:o.toString(),target:t,type:h.Invocation}},t.prototype.createStreamInvocation=function(t,e){var n=this.id;return this.id++,{arguments:e,invocationId:n.toString(),target:t,type:h.StreamInvocation}},t.prototype.createCancelInvocation=function(t){return{invocationId:t,type:h.CancelInvocation}},t}();!function(t){t[t.None=0]="None",t[t.WebSockets=1]="WebSockets",t[t.ServerSentEvents=2]="ServerSentEvents",t[t.LongPolling=4]="LongPolling"}(w||(w={})),function(t){t[t.Text=1]="Text",t[t.Binary=2]="Binary"}(S||(S={}));var x=function(){function t(){this.isAborted=!1}return t.prototype.abort=function(){this.isAborted||(this.isAborted=!0,this.onabort&&this.onabort())},Object.defineProperty(t.prototype,"signal",{get:function(){return this},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"aborted",{get:function(){return this.isAborted},enumerable:!0,configurable:!0}),t}(),P=5e3,M=function(){function t(t,e,n,o,r){this.httpClient=t,this.accessTokenFactory=e||function(){return null},this.logger=n,this.pollAbort=new x,this.logMessageContent=o,this.shutdownTimeout=r||P}return Object.defineProperty(t.prototype,"pollAborted",{get:function(){return this.pollAbort.aborted},enumerable:!0,configurable:!0}),t.prototype.connect=function(t,e){return i(this,void 0,void 0,function(){var n,o,r,s,i;return a(this,function(a){switch(a.label){case 0:if(m.isRequired(t,"url"),m.isRequired(e,"transferFormat"),m.isIn(e,S,"transferFormat"),this.url=t,this.logger.log(c.Trace,"(LongPolling transport) Connecting"),e===S.Binary&&"string"!=typeof(new XMLHttpRequest).responseType)throw new Error("Binary protocols over XmlHttpRequest not implementing advanced features are not supported.");return n={abortSignal:this.pollAbort.signal,headers:{},timeout:9e4},e===S.Binary&&(n.responseType="arraybuffer"),[4,this.accessTokenFactory()];case 1:return o=a.sent(),this.updateHeaderToken(n,o),s=t+"&_="+Date.now(),this.logger.log(c.Trace,"(LongPolling transport) polling: "+s),[4,this.httpClient.get(s,n)];case 2:return 200!==(i=a.sent()).statusCode?(this.logger.log(c.Error,"(LongPolling transport) Unexpected response code: "+i.statusCode),r=new l(i.statusText,i.statusCode),this.running=!1):this.running=!0,this.poll(this.url,n,r),[2,Promise.resolve()]}})})},t.prototype.updateHeaderToken=function(t,e){e?t.headers.Authorization="Bearer "+e:t.headers.Authorization&&delete t.headers.Authorization},t.prototype.poll=function(t,e,n){return i(this,void 0,void 0,function(){var o,r,s,i;return a(this,function(a){switch(a.label){case 0:a.trys.push([0,,8,9]),a.label=1;case 1:return this.running?[4,this.accessTokenFactory()]:[3,7];case 2:o=a.sent(),this.updateHeaderToken(e,o),a.label=3;case 3:return a.trys.push([3,5,,6]),r=t+"&_="+Date.now(),this.logger.log(c.Trace,"(LongPolling transport) polling: "+r),[4,this.httpClient.get(r,e)];case 4:return 204===(s=a.sent()).statusCode?(this.logger.log(c.Information,"(LongPolling transport) Poll terminated by server"),this.running=!1):200!==s.statusCode?(this.logger.log(c.Error,"(LongPolling transport) Unexpected response code: "+s.statusCode),n=new l(s.statusText,s.statusCode),this.running=!1):s.content?(this.logger.log(c.Trace,"(LongPolling transport) data received. "+y(s.content,this.logMessageContent)),this.onreceive&&this.onreceive(s.content)):this.logger.log(c.Trace,"(LongPolling transport) Poll timed out, reissuing."),[3,6];case 5:return i=a.sent(),this.running?i instanceof u?this.logger.log(c.Trace,"(LongPolling transport) Poll timed out, reissuing."):(n=i,this.running=!1):this.logger.log(c.Trace,"(LongPolling transport) Poll errored after shutdown: "+i.message),[3,6];case 6:return[3,1];case 7:return[3,9];case 8:return this.stopped=!0,this.shutdownTimer&&clearTimeout(this.shutdownTimer),this.onclose&&(this.logger.log(c.Trace,"(LongPolling transport) Firing onclose event. Error: "+(n||"<undefined>")),this.onclose(n)),this.logger.log(c.Trace,"(LongPolling transport) Transport finished."),[7];case 9:return[2]}})})},t.prototype.send=function(t){return i(this,void 0,void 0,function(){return a(this,function(e){return this.running?[2,b(this.logger,"LongPolling",this.httpClient,this.url,this.accessTokenFactory,t,this.logMessageContent)]:[2,Promise.reject(new Error("Cannot send until the transport is connected"))]})})},t.prototype.stop=function(){return i(this,void 0,void 0,function(){var t,e,n=this;return a(this,function(o){switch(o.label){case 0:return o.trys.push([0,,3,4]),this.running=!1,this.logger.log(c.Trace,"(LongPolling transport) sending DELETE request to "+this.url+"."),t={headers:{}},[4,this.accessTokenFactory()];case 1:return e=o.sent(),this.updateHeaderToken(t,e),[4,this.httpClient.delete(this.url,t)];case 2:return o.sent(),this.logger.log(c.Trace,"(LongPolling transport) DELETE request accepted."),[3,4];case 3:return this.stopped||(this.shutdownTimer=setTimeout(function(){n.logger.log(c.Warning,"(LongPolling transport) server did not terminate after DELETE request, canceling poll."),n.pollAbort.abort()},this.shutdownTimeout)),[7];case 4:return[2]}})})},t}(),R=function(){function t(t,e,n,o){this.httpClient=t,this.accessTokenFactory=e||function(){return null},this.logger=n,this.logMessageContent=o}return t.prototype.connect=function(t,e){return i(this,void 0,void 0,function(){var n,o=this;return a(this,function(r){switch(r.label){case 0:if(m.isRequired(t,"url"),m.isRequired(e,"transferFormat"),m.isIn(e,S,"transferFormat"),"undefined"==typeof EventSource)throw new Error("'EventSource' is not supported in your environment.");return this.logger.log(c.Trace,"(SSE transport) Connecting"),[4,this.accessTokenFactory()];case 1:return(n=r.sent())&&(t+=(t.indexOf("?")<0?"?":"&")+"access_token="+encodeURIComponent(n)),this.url=t,[2,new Promise(function(n,r){var s=!1;e!==S.Text&&r(new Error("The Server-Sent Events transport only supports the 'Text' transfer format"));var i=new EventSource(t,{withCredentials:!0});try{i.onmessage=function(t){if(o.onreceive)try{o.logger.log(c.Trace,"(SSE transport) data received. "+y(t.data,o.logMessageContent)+"."),o.onreceive(t.data)}catch(t){return void(o.onclose&&o.onclose(t))}},i.onerror=function(t){var e=new Error(t.message||"Error occurred");s?o.close(e):r(e)},i.onopen=function(){o.logger.log(c.Information,"SSE connected to "+o.url),o.eventSource=i,s=!0,n()}}catch(t){return Promise.reject(t)}})]}})})},t.prototype.send=function(t){return i(this,void 0,void 0,function(){return a(this,function(e){return this.eventSource?[2,b(this.logger,"SSE",this.httpClient,this.url,this.accessTokenFactory,t,this.logMessageContent)]:[2,Promise.reject(new Error("Cannot send until the transport is connected"))]})})},t.prototype.stop=function(){return this.close(),Promise.resolve()},t.prototype.close=function(t){this.eventSource&&(this.eventSource.close(),this.eventSource=null,this.onclose&&this.onclose(t))},t}(),q=function(){function t(t,e,n){this.logger=e,this.accessTokenFactory=t||function(){return null},this.logMessageContent=n}return t.prototype.connect=function(t,e){return i(this,void 0,void 0,function(){var n,o=this;return a(this,function(r){switch(r.label){case 0:if(m.isRequired(t,"url"),m.isRequired(e,"transferFormat"),m.isIn(e,S,"transferFormat"),"undefined"==typeof WebSocket)throw new Error("'WebSocket' is not supported in your environment.");return this.logger.log(c.Trace,"(WebSockets transport) Connecting"),[4,this.accessTokenFactory()];case 1:return(n=r.sent())&&(t+=(t.indexOf("?")<0?"?":"&")+"access_token="+encodeURIComponent(n)),[2,new Promise(function(n,r){t=t.replace(/^http/,"ws");var s=new WebSocket(t);e===S.Binary&&(s.binaryType="arraybuffer"),s.onopen=function(e){o.logger.log(c.Information,"WebSocket connected to "+t),o.webSocket=s,n()},s.onerror=function(t){r(t.error)},s.onmessage=function(t){o.logger.log(c.Trace,"(WebSockets transport) data received. "+y(t.data,o.logMessageContent)+"."),o.onreceive&&o.onreceive(t.data)},s.onclose=function(t){o.logger.log(c.Trace,"(WebSockets transport) socket closed."),o.onclose&&(!1===t.wasClean||1e3!==t.code?o.onclose(new Error("Websocket closed with status code: "+t.code+" ("+t.reason+")")):o.onclose())}})]}})})},t.prototype.send=function(t){return this.webSocket&&this.webSocket.readyState===WebSocket.OPEN?(this.logger.log(c.Trace,"(WebSockets transport) sending data. "+y(t,this.logMessageContent)+"."),this.webSocket.send(t),Promise.resolve()):Promise.reject("WebSocket is not in the OPEN state")},t.prototype.stop=function(){return this.webSocket&&(this.webSocket.close(),this.webSocket=null),Promise.resolve()},t}(),W=function(){function t(t,e){void 0===e&&(e={}),this.features={},m.isRequired(t,"url"),this.logger=function(t){return void 0===t?new k(c.Information):null===t?v.instance:t.log?t:new k(t)}(e.logger),this.baseUrl=this.resolveUrl(t),(e=e||{}).accessTokenFactory=e.accessTokenFactory||function(){return null},e.logMessageContent=e.logMessageContent||!1,this.httpClient=e.httpClient||new g(this.logger),this.connectionState=2,this.options=e}return t.prototype.start=function(t){return t=t||S.Binary,m.isIn(t,S,"transferFormat"),this.logger.log(c.Debug,"Starting connection with transfer format '"+S[t]+"'."),2!==this.connectionState?Promise.reject(new Error("Cannot start a connection that is not in the 'Disconnected' state.")):(this.connectionState=0,this.startPromise=this.startInternal(t),this.startPromise)},t.prototype.send=function(t){if(1!==this.connectionState)throw new Error("Cannot send data if the connection is not in the 'Connected' State.");return this.transport.send(t)},t.prototype.stop=function(t){return i(this,void 0,void 0,function(){return a(this,function(e){switch(e.label){case 0:this.connectionState=2,e.label=1;case 1:return e.trys.push([1,3,,4]),[4,this.startPromise];case 2:return e.sent(),[3,4];case 3:return e.sent(),[3,4];case 4:return this.transport?(this.stopError=t,[4,this.transport.stop()]):[3,6];case 5:e.sent(),this.transport=null,e.label=6;case 6:return[2]}})})},t.prototype.startInternal=function(t){return i(this,void 0,void 0,function(){var e,n,o,r,s,i,l,u=this;return a(this,function(h){switch(h.label){case 0:e=this.baseUrl,this.accessTokenFactory=this.options.accessTokenFactory,h.label=1;case 1:return h.trys.push([1,12,,13]),this.options.skipNegotiation?this.options.transport!==w.WebSockets?[3,3]:(this.transport=this.constructTransport(w.WebSockets),[4,this.transport.connect(e,t)]):[3,5];case 2:return h.sent(),[3,4];case 3:throw Error("Negotiation can only be skipped when using the WebSocket transport directly.");case 4:return[3,11];case 5:n=null,o=0,r=function(){var t;return a(this,function(r){switch(r.label){case 0:return[4,s.getNegotiationResponse(e)];case 1:return n=r.sent(),2===s.connectionState?[2,{value:void 0}]:(n.url&&(e=n.url),n.accessToken&&(t=n.accessToken,s.accessTokenFactory=function(){return t}),o++,[2])}})},s=this,h.label=6;case 6:return[5,r()];case 7:if("object"==typeof(i=h.sent()))return[2,i.value];h.label=8;case 8:if(n.url&&o<100)return[3,6];h.label=9;case 9:if(100===o&&n.url)throw Error("Negotiate redirection limit exceeded.");return[4,this.createTransport(e,this.options.transport,n,t)];case 10:h.sent(),h.label=11;case 11:return this.transport instanceof M&&(this.features.inherentKeepAlive=!0),this.transport.onreceive=this.onreceive,this.transport.onclose=function(t){return u.stopConnection(t)},this.changeState(0,1),[3,13];case 12:throw l=h.sent(),this.logger.log(c.Error,"Failed to start the connection: "+l),this.connectionState=2,this.transport=null,l;case 13:return[2]}})})},t.prototype.getNegotiationResponse=function(t){return i(this,void 0,void 0,function(){var e,n,o,r,s,i;return a(this,function(a){switch(a.label){case 0:return[4,this.accessTokenFactory()];case 1:(e=a.sent())&&((i={}).Authorization="Bearer "+e,n=i),o=this.resolveNegotiateUrl(t),this.logger.log(c.Debug,"Sending negotiation request: "+o),a.label=2;case 2:return a.trys.push([2,4,,5]),[4,this.httpClient.post(o,{content:"",headers:n})];case 3:if(200!==(r=a.sent()).statusCode)throw Error("Unexpected status code returned from negotiate "+r.statusCode);return[2,JSON.parse(r.content)];case 4:throw s=a.sent(),this.logger.log(c.Error,"Failed to complete negotiation with the server: "+s),s;case 5:return[2]}})})},t.prototype.createConnectUrl=function(t,e){return t+(-1===t.indexOf("?")?"?":"&")+"id="+e},t.prototype.createTransport=function(t,e,n,o){return i(this,void 0,void 0,function(){var r,s,i,l,u,h,p;return a(this,function(a){switch(a.label){case 0:return r=this.createConnectUrl(t,n.connectionId),this.isITransport(e)?(this.logger.log(c.Debug,"Connection was provided an instance of ITransport, using that directly."),this.transport=e,[4,this.transport.connect(r,o)]):[3,2];case 1:return a.sent(),this.changeState(0,1),[2];case 2:s=n.availableTransports,i=0,l=s,a.label=3;case 3:return i<l.length?(u=l[i],this.connectionState=0,"number"!=typeof(h=this.resolveTransport(u,e,o))?[3,8]:(this.transport=this.constructTransport(h),null!==n.connectionId?[3,5]:[4,this.getNegotiationResponse(t)])):[3,9];case 4:n=a.sent(),r=this.createConnectUrl(t,n.connectionId),a.label=5;case 5:return a.trys.push([5,7,,8]),[4,this.transport.connect(r,o)];case 6:return a.sent(),this.changeState(0,1),[2];case 7:return p=a.sent(),this.logger.log(c.Error,"Failed to start the transport '"+w[h]+"': "+p),this.connectionState=2,n.connectionId=null,[3,8];case 8:return i++,[3,3];case 9:throw new Error("Unable to initialize any of the available transports.")}})})},t.prototype.constructTransport=function(t){switch(t){case w.WebSockets:return new q(this.accessTokenFactory,this.logger,this.options.logMessageContent);case w.ServerSentEvents:return new R(this.httpClient,this.accessTokenFactory,this.logger,this.options.logMessageContent);case w.LongPolling:return new M(this.httpClient,this.accessTokenFactory,this.logger,this.options.logMessageContent);default:throw new Error("Unknown transport: "+t+".")}},t.prototype.resolveTransport=function(t,e,n){var o=w[t.transport];if(null===o||void 0===o)this.logger.log(c.Debug,"Skipping transport '"+t.transport+"' because it is not supported by this client.");else{var r=t.transferFormats.map(function(t){return S[t]});if(function(t,e){return!t||0!=(e&t)}(e,o))if(r.indexOf(n)>=0){if(!(o===w.WebSockets&&"undefined"==typeof WebSocket||o===w.ServerSentEvents&&"undefined"==typeof EventSource))return this.logger.log(c.Debug,"Selecting transport '"+w[o]+"'"),o;this.logger.log(c.Debug,"Skipping transport '"+w[o]+"' because it is not supported in your environment.'")}else this.logger.log(c.Debug,"Skipping transport '"+w[o]+"' because it does not support the requested transfer format '"+S[n]+"'.");else this.logger.log(c.Debug,"Skipping transport '"+w[o]+"' because it was disabled by the client.")}return null},t.prototype.isITransport=function(t){return t&&"object"==typeof t&&"connect"in t},t.prototype.changeState=function(t,e){return this.connectionState===t&&(this.connectionState=e,!0)},t.prototype.stopConnection=function(t){return i(this,void 0,void 0,function(){return a(this,function(e){return this.transport=null,(t=this.stopError||t)?this.logger.log(c.Error,"Connection disconnected with error '"+t+"'."):this.logger.log(c.Information,"Connection disconnected."),this.connectionState=2,this.onclose&&this.onclose(t),[2]})})},t.prototype.resolveUrl=function(t){if(0===t.lastIndexOf("https://",0)||0===t.lastIndexOf("http://",0))return t;if("undefined"==typeof window||!window||!window.document)throw new Error("Cannot resolve '"+t+"'.");var e=window.document.createElement("a");return e.href=t,this.logger.log(c.Information,"Normalizing '"+t+"' to '"+e.href+"'."),e.href},t.prototype.resolveNegotiateUrl=function(t){var e=t.indexOf("?"),n=t.substring(0,-1===e?t.length:e);return"/"!==n[n.length-1]&&(n+="/"),n+="negotiate",n+=-1===e?"":t.substring(e)},t}();var O="json",U=function(){function t(){this.name=O,this.version=1,this.transferFormat=S.Text}return t.prototype.parseMessages=function(t,e){if("string"!=typeof t)throw new Error("Invalid input for JSON hub protocol. Expected a string.");if(!t)return[];null===e&&(e=v.instance);for(var n=[],o=0,r=d.parse(t);o<r.length;o++){var s=r[o],i=JSON.parse(s);if("number"!=typeof i.type)throw new Error("Invalid payload.");switch(i.type){case h.Invocation:this.isInvocationMessage(i);break;case h.StreamItem:this.isStreamItemMessage(i);break;case h.Completion:this.isCompletionMessage(i);break;case h.Ping:case h.Close:break;default:e.log(c.Information,"Unknown message type '"+i.type+"' ignored.");continue}n.push(i)}return n},t.prototype.writeMessage=function(t){return d.write(JSON.stringify(t))},t.prototype.isInvocationMessage=function(t){this.assertNotEmptyString(t.target,"Invalid payload for Invocation message."),void 0!==t.invocationId&&this.assertNotEmptyString(t.invocationId,"Invalid payload for Invocation message.")},t.prototype.isStreamItemMessage=function(t){if(this.assertNotEmptyString(t.invocationId,"Invalid payload for StreamItem message."),void 0===t.item)throw new Error("Invalid payload for StreamItem message.")},t.prototype.isCompletionMessage=function(t){if(t.result&&t.error)throw new Error("Invalid payload for Completion message.");!t.result&&t.error&&this.assertNotEmptyString(t.error,"Invalid payload for Completion message."),this.assertNotEmptyString(t.invocationId,"Invalid payload for Completion message.")},t.prototype.assertNotEmptyString=function(t,e){if("string"!=typeof t||""===t)throw new Error(e)},t}(),N=function(){function t(){}return t.prototype.configureLogging=function(t){return m.isRequired(t,"logging"),!function(t){return void 0!==t.log}(t)?this.logger=new k(t):this.logger=t,this},t.prototype.withUrl=function(t,e){return m.isRequired(t,"url"),this.url=t,this.httpConnectionOptions="object"==typeof e?e:{transport:e},this},t.prototype.withHubProtocol=function(t){return m.isRequired(t,"protocol"),this.protocol=t,this},t.prototype.build=function(){var t=this.httpConnectionOptions||{};if(void 0===t.logger&&(t.logger=this.logger),!this.url)throw new Error("The 'HubConnectionBuilder.withUrl' method must be called before building the connection.");var e=new W(this.url,t);return I.create(e,this.logger||v.instance,this.protocol||new U)},t}();var A,B,D,L,F,H,j,_,G=function(){function t(t){this.addressParam=t,this.parameter="",this.requester=new XMLHttpRequest,this.address=t}return t.prototype.send=function(){this.requester.open("GET",this.address.concat(this.parameter)),this.requester.setRequestHeader("Content-Type","application/json;charset=UTF-8"),this.requester.send(null)},t.prototype.sendPut=function(){this.requester.open("PUT",this.address.concat(this.parameter)),this.requester.setRequestHeader("Content-Type","application/json;charset=UTF-8"),this.requester.send(null)},t}();function z(t){if(13==t.which){var e=new G("https://localhost:5001/Main/UpdateApiKey/");e.parameter=B.val().toString(),e.send(),A.text("looking for new games..."),A.toggleClass("AnimUpdateDB"),B.off("keypress")}}function J(t){$("#updates").append("<label>"+t+"</label><br/>");var e=$("#updates > label:last").height()*$("#updates").children().length/2;$("#updates").animate({scrollTop:e},0,"",function(){})}function X(){J("test "+_),_++}function K(t){var e=document.getElementById("ddChampion");L.parameter=e.options[e.selectedIndex].value.toString(),(H=new G("https://localhost:5001/Main/GetChampionIconStringByIDAsync/")).parameter=e.options[e.selectedIndex].value.toString(),H.requester.onreadystatechange=V,H.send(),L.send()}function Q(t){if(4===L.requester.readyState){var e=JSON.parse(L.requester.responseText);console.log(e),"NaN"===e.WinRate2Weeks.toString()&&(e.WinRate2Weeks="-"),"NaN"===e.WinRate3Months.toString()&&(e.WinRate3Months="-"),"NaN"===e.WinRate.toString()&&(e.WinRate="-"),document.getElementById("lblWinRate2Weeks").innerText=e.WinRate2Weeks.toString()+"%",document.getElementById("lblGamesPlayed2Weeks").innerText=e.GameCount2Weeks.toString(),document.getElementById("lblAvgGameTime2Weeks").innerText=et(e.AvgGameTime2Weeks),document.getElementById("lblWinRate3Months").innerText=e.WinRate3Months.toString()+"%",document.getElementById("lblGamesPlayed3Months").innerText=e.GameCount3Months.toString(),document.getElementById("lblAvgGameTime3Months").innerText=et(e.AvgGameTime3Months),document.getElementById("lblWinRate").innerText=e.WinRate.toString()+"%",document.getElementById("lblGamesPlayed").innerText=e.GameCount.toString(),document.getElementById("lblAvgGameTime").innerText=et(e.AvgGameTime)}}function V(){if(4===H.requester.readyState){var t=H.requester.responseText;$("#iconChampion").attr("src","https://ddragon.leagueoflegends.com/cdn/7.10.1/img/champion/"+t),$("#iconChampion").addClass("gray"),$("#iconChampion").on("load",function(){$("#iconChampion").removeClass("gray")}),console.log("icon address: https://ddragon.leagueoflegends.com/cdn/7.10.1/img/champion/"+t)}}function Y(t){if(4===F.requester.readyState){var e=JSON.parse(F.requester.responseText);console.log(e),e.forEach(function(t){$.each(e,function(t,e){D.append($("<option>",{value:e.id,text:e.name}))})}),K(new Event(null))}}function Z(){(F=new G("https://localhost:5001/Main/UpdateDB")).send(),F.requester.onload=tt,A.toggleClass("AnimUpdateDB"),$("#veil").css("display","block"),$("#consoleContainer").toggleClass("scale1")}function tt(){console.log("UpdateDB done"),$("#veil").css("display","none"),$("#consoleContainer").toggleClass("scale1"),A.text("DB is up to date"),A.prop("disabled",!0),A.toggleClass("AnimUpdateDB")}function et(t){if(0===t)return"--:--";var e=Math.floor(t/60),n=Math.floor(t-60*e);return e+":"+(n<10?"0"+n:n)}function nt(){var t=new G("https://localhost:5001/Main/UpdateStaticChampionData");t.send(),t.requester.onload=ot,A.toggleClass("AnimUpdateDB")}function ot(){A.text("Updated static champion data"),A.prop("disabled",!0),A.toggleClass("AnimUpdateDB")}window.onload=function(){j=(new N).withUrl("/chatHub").build(),A=$("#btnUpdateDB"),B=$("#inputApiKey"),D=$("#ddChampion"),A.click(Z).toggleClass("AnimUpdateDB").text("looking for new games...").prop("disabled",!0),B.on("transitionend",function(){$("#topContainer").hasClass("topContainerOnNoRiotConnection")?B.css("zIndex",0):B.css("zIndex",-1)}),D.on("change",K),(L=new G("https://localhost:5001/Main/GetWinrateByChampID/")).requester.onreadystatechange=Q,(F=new G("https://localhost:5001/Main/GetAllPlayedChampions")).requester.onreadystatechange=Y,F.send(),j.on("ReceiveMessage",function(t,e){var n=e.replace(/&/g,"&amp;").replace(/</g,"&lt;").replace(/>/g,"&gt;"),o=t+" says "+n,r=document.createElement("li");r.textContent=o,console.log(o)}),j.on("UpdateBtnUpdateDBText",function(t,e){A.text("Update DB ("+e+")").prop("disabled",!1).toggleClass("AnimUpdateDB"),console.log(t,e),"No new Matches"===e&&(A.text("No new Matches"),A.prop("disabled",!0)),"No connection to Riot Servers"===e?(A.text(e),A.prop("disabled",!0),$("#topContainer").addClass("topContainerOnNoRiotConnection"),B.on("keypress",z)):$("#topContainer").hasClass("topContainerOnNoRiotConnection")&&(B.css("zIndex",-1),$("#topContainer").toggleClass("topContainerOnNoRiotConnection"))}),j.on("AddMessageToConsole",function(t,e){J(e),console.log(t,e)}),j.start().catch(function(t){return console.error(t.toString())}),$("#btnTest").click(function(){var t=new G("https://localhost:5001/Main/Main/");t.send()}),new G("https://localhost:5001/Main/Main/").send(),_=0,$("#btnAddMessage").click(X),$("#btnUpdateStaticChampionData").click(nt)}},5:function(t,e){}});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3RzbGliL3RzbGliLmVzNi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGFzcG5ldC9zaWduYWxyL2Rpc3QvZXNtL0Vycm9ycy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGFzcG5ldC9zaWduYWxyL2Rpc3QvZXNtL0lMb2dnZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0Bhc3BuZXQvc2lnbmFsci9kaXN0L2VzbS9IdHRwQ2xpZW50LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYXNwbmV0L3NpZ25hbHIvZGlzdC9lc20vSUh1YlByb3RvY29sLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYXNwbmV0L3NpZ25hbHIvZGlzdC9lc20vVGV4dE1lc3NhZ2VGb3JtYXQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0Bhc3BuZXQvc2lnbmFsci9kaXN0L2VzbS9IYW5kc2hha2VQcm90b2NvbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGFzcG5ldC9zaWduYWxyL2Rpc3QvZXNtL0xvZ2dlcnMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0Bhc3BuZXQvc2lnbmFsci9kaXN0L2VzbS9VdGlscy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGFzcG5ldC9zaWduYWxyL2Rpc3QvZXNtL0lUcmFuc3BvcnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0Bhc3BuZXQvc2lnbmFsci9kaXN0L2VzbS9IdWJDb25uZWN0aW9uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYXNwbmV0L3NpZ25hbHIvZGlzdC9lc20vQWJvcnRDb250cm9sbGVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYXNwbmV0L3NpZ25hbHIvZGlzdC9lc20vTG9uZ1BvbGxpbmdUcmFuc3BvcnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0Bhc3BuZXQvc2lnbmFsci9kaXN0L2VzbS9TZXJ2ZXJTZW50RXZlbnRzVHJhbnNwb3J0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYXNwbmV0L3NpZ25hbHIvZGlzdC9lc20vV2ViU29ja2V0VHJhbnNwb3J0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYXNwbmV0L3NpZ25hbHIvZGlzdC9lc20vSHR0cENvbm5lY3Rpb24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0Bhc3BuZXQvc2lnbmFsci9kaXN0L2VzbS9Kc29uSHViUHJvdG9jb2wuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0Bhc3BuZXQvc2lnbmFsci9kaXN0L2VzbS9IdWJDb25uZWN0aW9uQnVpbGRlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGFzcG5ldC9zaWduYWxyL2Rpc3QvZXNtL2luZGV4LmpzIiwid2VicGFjazovLy8uL0NsaWVudC90cy9pbmRleC50cyIsIndlYnBhY2s6Ly8vLi9DbGllbnQvdHMvUmVxdWVzdGVyLnRzIl0sIm5hbWVzIjpbImluc3RhbGxlZE1vZHVsZXMiLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJleHBvcnRzIiwibW9kdWxlIiwiaSIsImwiLCJtb2R1bGVzIiwiY2FsbCIsIm0iLCJjIiwiZCIsIm5hbWUiLCJnZXR0ZXIiLCJvIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJlbnVtZXJhYmxlIiwiZ2V0IiwiciIsIlN5bWJvbCIsInRvU3RyaW5nVGFnIiwidmFsdWUiLCJ0IiwibW9kZSIsIl9fZXNNb2R1bGUiLCJucyIsImNyZWF0ZSIsImtleSIsImJpbmQiLCJuIiwib2JqZWN0IiwicHJvcGVydHkiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsInAiLCJzIiwiZXh0ZW5kU3RhdGljcyIsImIiLCJzZXRQcm90b3R5cGVPZiIsIl9fcHJvdG9fXyIsIkFycmF5IiwiX19leHRlbmRzIiwiX18iLCJ0aGlzIiwiY29uc3RydWN0b3IiLCJfX2Fzc2lnbiIsImFzc2lnbiIsImFyZ3VtZW50cyIsImxlbmd0aCIsImFwcGx5IiwiX19hd2FpdGVyIiwidGhpc0FyZyIsIl9hcmd1bWVudHMiLCJQIiwiZ2VuZXJhdG9yIiwiUHJvbWlzZSIsInJlc29sdmUiLCJyZWplY3QiLCJmdWxmaWxsZWQiLCJzdGVwIiwibmV4dCIsImUiLCJyZWplY3RlZCIsInJlc3VsdCIsImRvbmUiLCJ0aGVuIiwiX19nZW5lcmF0b3IiLCJib2R5IiwiZiIsInkiLCJnIiwiXyIsImxhYmVsIiwic2VudCIsInRyeXMiLCJvcHMiLCJ2ZXJiIiwidGhyb3ciLCJyZXR1cm4iLCJpdGVyYXRvciIsInYiLCJvcCIsIlR5cGVFcnJvciIsInBvcCIsInB1c2giLCJMb2dMZXZlbCIsIkVycm9yc19IdHRwRXJyb3IiLCJfc3VwZXIiLCJIdHRwRXJyb3IiLCJlcnJvck1lc3NhZ2UiLCJzdGF0dXNDb2RlIiwiX3RoaXMiLCJ0cnVlUHJvdG8iLCJFcnJvciIsIkVycm9yc19UaW1lb3V0RXJyb3IiLCJUaW1lb3V0RXJyb3IiLCJfbmV3VGFyZ2V0IiwiTWVzc2FnZVR5cGUiLCJIdHRwUmVzcG9uc2UiLCJzdGF0dXNUZXh0IiwiY29udGVudCIsIkh0dHBDbGllbnRfRGVmYXVsdEh0dHBDbGllbnQiLCJEZWZhdWx0SHR0cENsaWVudCIsImxvZ2dlciIsInNlbmQiLCJyZXF1ZXN0IiwieGhyIiwiWE1MSHR0cFJlcXVlc3QiLCJvcGVuIiwibWV0aG9kIiwidXJsIiwid2l0aENyZWRlbnRpYWxzIiwic2V0UmVxdWVzdEhlYWRlciIsImhlYWRlcnMiLCJrZXlzIiwiZm9yRWFjaCIsImhlYWRlciIsInJlc3BvbnNlVHlwZSIsImFib3J0U2lnbmFsIiwib25hYm9ydCIsImFib3J0IiwidGltZW91dCIsIm9ubG9hZCIsInN0YXR1cyIsInJlc3BvbnNlIiwicmVzcG9uc2VUZXh0Iiwib25lcnJvciIsImxvZyIsIldhcm5pbmciLCJvbnRpbWVvdXQiLCJIdHRwQ2xpZW50Iiwib3B0aW9ucyIsInBvc3QiLCJkZWxldGUiLCJUZXh0TWVzc2FnZUZvcm1hdCIsIndyaXRlIiwib3V0cHV0IiwiUmVjb3JkU2VwYXJhdG9yIiwicGFyc2UiLCJpbnB1dCIsIm1lc3NhZ2VzIiwic3BsaXQiLCJSZWNvcmRTZXBhcmF0b3JDb2RlIiwiU3RyaW5nIiwiZnJvbUNoYXJDb2RlIiwiSGFuZHNoYWtlUHJvdG9jb2xfSGFuZHNoYWtlUHJvdG9jb2wiLCJIYW5kc2hha2VQcm90b2NvbCIsIndyaXRlSGFuZHNoYWtlUmVxdWVzdCIsImhhbmRzaGFrZVJlcXVlc3QiLCJKU09OIiwic3RyaW5naWZ5IiwicGFyc2VIYW5kc2hha2VSZXNwb25zZSIsImRhdGEiLCJtZXNzYWdlRGF0YSIsInJlbWFpbmluZ0RhdGEiLCJBcnJheUJ1ZmZlciIsImJpbmFyeURhdGEiLCJVaW50OEFycmF5Iiwic2VwYXJhdG9ySW5kZXgiLCJpbmRleE9mIiwicmVzcG9uc2VMZW5ndGgiLCJzbGljZSIsImJ5dGVMZW5ndGgiLCJidWZmZXIiLCJ0ZXh0RGF0YSIsInN1YnN0cmluZyIsIk51bGxMb2dnZXIiLCJsb2dMZXZlbCIsIm1lc3NhZ2UiLCJpbnN0YW5jZSIsIkFyZyIsImlzUmVxdWlyZWQiLCJ2YWwiLCJ1bmRlZmluZWQiLCJpc0luIiwidmFsdWVzIiwiZ2V0RGF0YURldGFpbCIsImluY2x1ZGVDb250ZW50Iiwic3RyIiwibnVtIiwidG9TdHJpbmciLCJzdWJzdHIiLCJmb3JtYXRBcnJheUJ1ZmZlciIsInNlbmRNZXNzYWdlIiwidHJhbnNwb3J0TmFtZSIsImh0dHBDbGllbnQiLCJhY2Nlc3NUb2tlbkZhY3RvcnkiLCJsb2dNZXNzYWdlQ29udGVudCIsInRva2VuIiwiX2EiLCJfYiIsIlRyYWNlIiwiSHR0cFRyYW5zcG9ydFR5cGUiLCJUcmFuc2ZlckZvcm1hdCIsIlN1YmplY3QiLCJjYW5jZWxDYWxsYmFjayIsIm9ic2VydmVycyIsIml0ZW0iLCJfaSIsImVycm9yIiwiZXJyIiwib2JzZXJ2ZXIiLCJjb21wbGV0ZSIsInN1YnNjcmliZSIsIlN1YmplY3RTdWJzY3JpcHRpb24iLCJzdWJqZWN0IiwiZGlzcG9zZSIsImluZGV4Iiwic3BsaWNlIiwiY2F0Y2giLCJVdGlsc19Db25zb2xlTG9nZ2VyIiwiQ29uc29sZUxvZ2dlciIsIm1pbmltdW1Mb2dMZXZlbCIsIkNyaXRpY2FsIiwiY29uc29sZSIsIndhcm4iLCJJbmZvcm1hdGlvbiIsImluZm8iLCJERUZBVUxUX1RJTUVPVVRfSU5fTVMiLCJIdWJDb25uZWN0aW9uX0h1YkNvbm5lY3Rpb24iLCJIdWJDb25uZWN0aW9uIiwiY29ubmVjdGlvbiIsInByb3RvY29sIiwic2VydmVyVGltZW91dEluTWlsbGlzZWNvbmRzIiwiaGFuZHNoYWtlUHJvdG9jb2wiLCJvbnJlY2VpdmUiLCJwcm9jZXNzSW5jb21pbmdEYXRhIiwib25jbG9zZSIsImNvbm5lY3Rpb25DbG9zZWQiLCJjYWxsYmFja3MiLCJtZXRob2RzIiwiY2xvc2VkQ2FsbGJhY2tzIiwiaWQiLCJzdGFydCIsInZlcnNpb24iLCJEZWJ1ZyIsInJlY2VpdmVkSGFuZHNoYWtlUmVzcG9uc2UiLCJ0cmFuc2ZlckZvcm1hdCIsImNsZWFudXBUaW1lb3V0IiwiY29uZmlndXJlVGltZW91dCIsInN0b3AiLCJzdHJlYW0iLCJtZXRob2ROYW1lIiwiYXJncyIsImludm9jYXRpb25EZXNjcmlwdG9yIiwiY3JlYXRlU3RyZWFtSW52b2NhdGlvbiIsImNhbmNlbEludm9jYXRpb24iLCJjcmVhdGVDYW5jZWxJbnZvY2F0aW9uIiwiaW52b2NhdGlvbklkIiwiY2FuY2VsTWVzc2FnZSIsIndyaXRlTWVzc2FnZSIsImludm9jYXRpb25FdmVudCIsInR5cGUiLCJDb21wbGV0aW9uIiwiY3JlYXRlSW52b2NhdGlvbiIsImludm9rZSIsImNvbXBsZXRpb25NZXNzYWdlIiwib24iLCJuZXdNZXRob2QiLCJ0b0xvd2VyQ2FzZSIsIm9mZiIsImhhbmRsZXJzIiwicmVtb3ZlSWR4IiwiY2FsbGJhY2siLCJwcm9jZXNzSGFuZHNoYWtlUmVzcG9uc2UiLCJtZXNzYWdlc18xIiwicGFyc2VNZXNzYWdlcyIsIkludm9jYXRpb24iLCJpbnZva2VDbGllbnRNZXRob2QiLCJTdHJlYW1JdGVtIiwiUGluZyIsIkNsb3NlIiwicmVzcG9uc2VNZXNzYWdlIiwiZmVhdHVyZXMiLCJpbmhlcmVudEtlZXBBbGl2ZSIsInRpbWVvdXRIYW5kbGUiLCJzZXRUaW1lb3V0Iiwic2VydmVyVGltZW91dCIsImludm9jYXRpb25NZXNzYWdlIiwidGFyZ2V0IiwiY2xlYXJUaW1lb3V0Iiwibm9uYmxvY2tpbmciLCJTdHJlYW1JbnZvY2F0aW9uIiwiQ2FuY2VsSW52b2NhdGlvbiIsIkFib3J0Q29udHJvbGxlciIsImlzQWJvcnRlZCIsImNvbmZpZ3VyYWJsZSIsIlNIVVRET1dOX1RJTUVPVVQiLCJMb25nUG9sbGluZ1RyYW5zcG9ydF9Mb25nUG9sbGluZ1RyYW5zcG9ydCIsIkxvbmdQb2xsaW5nVHJhbnNwb3J0Iiwic2h1dGRvd25UaW1lb3V0IiwicG9sbEFib3J0IiwiYWJvcnRlZCIsImNvbm5lY3QiLCJwb2xsT3B0aW9ucyIsImNsb3NlRXJyb3IiLCJwb2xsVXJsIiwiQmluYXJ5Iiwic2lnbmFsIiwidXBkYXRlSGVhZGVyVG9rZW4iLCJEYXRlIiwibm93IiwicnVubmluZyIsInBvbGwiLCJlXzEiLCJzdG9wcGVkIiwic2h1dGRvd25UaW1lciIsImRlbGV0ZU9wdGlvbnMiLCJTZXJ2ZXJTZW50RXZlbnRzVHJhbnNwb3J0X1NlcnZlclNlbnRFdmVudHNUcmFuc3BvcnQiLCJTZXJ2ZXJTZW50RXZlbnRzVHJhbnNwb3J0IiwiZW5jb2RlVVJJQ29tcG9uZW50Iiwib3BlbmVkIiwiVGV4dCIsImV2ZW50U291cmNlIiwiRXZlbnRTb3VyY2UiLCJvbm1lc3NhZ2UiLCJjbG9zZSIsIm9ub3BlbiIsIldlYlNvY2tldFRyYW5zcG9ydF9XZWJTb2NrZXRUcmFuc3BvcnQiLCJXZWJTb2NrZXRUcmFuc3BvcnQiLCJyZXBsYWNlIiwid2ViU29ja2V0IiwiV2ViU29ja2V0IiwiYmluYXJ5VHlwZSIsImV2ZW50Iiwid2FzQ2xlYW4iLCJjb2RlIiwicmVhc29uIiwicmVhZHlTdGF0ZSIsIk9QRU4iLCJIdHRwQ29ubmVjdGlvbl9IdHRwQ29ubmVjdGlvbiIsIkh0dHBDb25uZWN0aW9uIiwiY3JlYXRlTG9nZ2VyIiwiYmFzZVVybCIsInJlc29sdmVVcmwiLCJjb25uZWN0aW9uU3RhdGUiLCJzdGFydFByb21pc2UiLCJzdGFydEludGVybmFsIiwidHJhbnNwb3J0Iiwic3RvcEVycm9yIiwibmVnb3RpYXRlUmVzcG9uc2UiLCJyZWRpcmVjdHMiLCJfbG9vcF8xIiwidGhpc18xIiwic3RhdGVfMSIsImVfMiIsInNraXBOZWdvdGlhdGlvbiIsIldlYlNvY2tldHMiLCJjb25zdHJ1Y3RUcmFuc3BvcnQiLCJhY2Nlc3NUb2tlbl8xIiwiZ2V0TmVnb3RpYXRpb25SZXNwb25zZSIsImFjY2Vzc1Rva2VuIiwiY3JlYXRlVHJhbnNwb3J0Iiwic3RvcENvbm5lY3Rpb24iLCJjaGFuZ2VTdGF0ZSIsIm5lZ290aWF0ZVVybCIsImVfMyIsInJlc29sdmVOZWdvdGlhdGVVcmwiLCJjcmVhdGVDb25uZWN0VXJsIiwiY29ubmVjdGlvbklkIiwicmVxdWVzdGVkVHJhbnNwb3J0IiwicmVxdWVzdGVkVHJhbnNmZXJGb3JtYXQiLCJjb25uZWN0VXJsIiwidHJhbnNwb3J0cyIsInRyYW5zcG9ydHNfMSIsImVuZHBvaW50IiwiZXhfMSIsImlzSVRyYW5zcG9ydCIsImF2YWlsYWJsZVRyYW5zcG9ydHMiLCJyZXNvbHZlVHJhbnNwb3J0IiwiU2VydmVyU2VudEV2ZW50cyIsIkxvbmdQb2xsaW5nIiwidHJhbnNmZXJGb3JtYXRzIiwibWFwIiwiYWN0dWFsVHJhbnNwb3J0IiwidHJhbnNwb3J0TWF0Y2hlcyIsImZyb20iLCJ0byIsImxhc3RJbmRleE9mIiwid2luZG93IiwiZG9jdW1lbnQiLCJhVGFnIiwiY3JlYXRlRWxlbWVudCIsImhyZWYiLCJKU09OX0hVQl9QUk9UT0NPTF9OQU1FIiwiSnNvbkh1YlByb3RvY29sX0pzb25IdWJQcm90b2NvbCIsIkpzb25IdWJQcm90b2NvbCIsImh1Yk1lc3NhZ2VzIiwicGFyc2VkTWVzc2FnZSIsImlzSW52b2NhdGlvbk1lc3NhZ2UiLCJpc1N0cmVhbUl0ZW1NZXNzYWdlIiwiaXNDb21wbGV0aW9uTWVzc2FnZSIsImFzc2VydE5vdEVtcHR5U3RyaW5nIiwiSHViQ29ubmVjdGlvbkJ1aWxkZXJfSHViQ29ubmVjdGlvbkJ1aWxkZXIiLCJIdWJDb25uZWN0aW9uQnVpbGRlciIsImNvbmZpZ3VyZUxvZ2dpbmciLCJsb2dnaW5nIiwiaXNMb2dnZXIiLCJ3aXRoVXJsIiwidHJhbnNwb3J0VHlwZU9yT3B0aW9ucyIsImh0dHBDb25uZWN0aW9uT3B0aW9ucyIsIndpdGhIdWJQcm90b2NvbCIsImJ1aWxkIiwiYnRuVXBkYXRlREIiLCJpbnB1dEFwaUtleSIsImRkQ2hhbXBpb24iLCJyZXF1ZXN0ZXJXaW5yYXRlIiwicmVxdWVzdGVyVXBkYXRlREIiLCJyZXF1ZXN0ZXJDaGFtcGlvbkljb25TdHJpbmciLCJjaGFubmVsU2VydmVyTXNnIiwiUmVxdWVzdGVyIiwiYWRkcmVzc1BhcmFtIiwicGFyYW1ldGVyIiwicmVxdWVzdGVyIiwiYWRkcmVzcyIsImNvbmNhdCIsInNlbmRQdXQiLCJvbktleXByZXNzSW5wdXRBcGlLZXkiLCJ3aGljaCIsInRleHQiLCJ0b2dnbGVDbGFzcyIsImFkZE1lc3NhZ2VUb0NvbnNvbGUiLCIkIiwiYXBwZW5kIiwic2Nyb2xsUG9zIiwiaGVpZ2h0IiwiY2hpbGRyZW4iLCJhbmltYXRlIiwic2Nyb2xsVG9wIiwib25CdG5BZGRNZXNzYWdlQ2xpY2siLCJvbkRkQ2hhbXBpb25TZWxlY3QiLCJzZWxlY3QiLCJnZXRFbGVtZW50QnlJZCIsInNlbGVjdGVkSW5kZXgiLCJvbnJlYWR5c3RhdGVjaGFuZ2UiLCJzZXRJY29uU3RyaW5nIiwic2V0V2lucmF0ZUluZm8iLCJXaW5SYXRlMldlZWtzIiwiV2luUmF0ZTNNb250aHMiLCJXaW5SYXRlIiwiaW5uZXJUZXh0IiwiR2FtZUNvdW50MldlZWtzIiwiY29udmVydFNlY29uZHNUb1RpbWUiLCJBdmdHYW1lVGltZTJXZWVrcyIsIkdhbWVDb3VudDNNb250aHMiLCJBdmdHYW1lVGltZTNNb250aHMiLCJHYW1lQ291bnQiLCJBdmdHYW1lVGltZSIsImF0dHIiLCJhZGRDbGFzcyIsInJlbW92ZUNsYXNzIiwic2V0QWxsUGxheWVkQ2hhbXBpb25zIiwicmVzcG9uc2VfMSIsImNoYW1waW9uIiwiZWFjaCIsIkV2ZW50Iiwib25DbGlja0J0blVwZGF0ZURCIiwib25VcGRhdGVEQlN1Y2Nlc3MiLCJjc3MiLCJwcm9wIiwic2Vjb25kcyIsIm1pbnV0ZXMiLCJNYXRoIiwiZmxvb3IiLCJzZWNzIiwib25CdG5VcGRhdGVTdGF0aWNDaGFtcGlvbkRhdGFDbGljayIsInJlcXVlc3RlclVwZGF0ZVN0YXRpY0NoYW1waW9uRGF0YSIsIm9uVXBkYXRlU3RhdGljQ2hhbXBpb25EYXRhU3VjY2VzcyIsImNsaWNrIiwiaGFzQ2xhc3MiLCJ1c2VyIiwibXNnIiwiZW5jb2RlZE1zZyIsImxpIiwidGV4dENvbnRlbnQiLCJ4Il0sIm1hcHBpbmdzIjoiYUFDQSxJQUFBQSxLQUdBLFNBQUFDLEVBQUFDLEdBR0EsR0FBQUYsRUFBQUUsR0FDQSxPQUFBRixFQUFBRSxHQUFBQyxRQUdBLElBQUFDLEVBQUFKLEVBQUFFLElBQ0FHLEVBQUFILEVBQ0FJLEdBQUEsRUFDQUgsWUFVQSxPQU5BSSxFQUFBTCxHQUFBTSxLQUFBSixFQUFBRCxRQUFBQyxJQUFBRCxRQUFBRixHQUdBRyxFQUFBRSxHQUFBLEVBR0FGLEVBQUFELFFBS0FGLEVBQUFRLEVBQUFGLEVBR0FOLEVBQUFTLEVBQUFWLEVBR0FDLEVBQUFVLEVBQUEsU0FBQVIsRUFBQVMsRUFBQUMsR0FDQVosRUFBQWEsRUFBQVgsRUFBQVMsSUFDQUcsT0FBQUMsZUFBQWIsRUFBQVMsR0FBMENLLFlBQUEsRUFBQUMsSUFBQUwsS0FLMUNaLEVBQUFrQixFQUFBLFNBQUFo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WUFBWSxHQUM3QnJDLEVBQUUsaUJBQWlCMkIsU0FBUyxrQ0FDNUI3QyxFQUFZbkosR0FBRyxXQUFZZ0ssSUFFdEJLLEVBQUUsaUJBQWlCK0MsU0FBUyxvQ0FFakNqRSxFQUFZc0QsSUFBSSxVQUFXLEdBQzNCcEMsRUFBRSxpQkFBaUJGLFlBQVkscUNBSzNDWCxFQUFpQnhKLEdBQUcsc0JBQ2hCLFNBQUNxTixFQUFNOVMsR0FDSDZQLEVBQW9CN1AsR0FDcEI4QyxRQUFRdkYsSUFBSXVWLEVBQU05UyxLQUkxQmlQLEVBQWlCaEwsUUFBUXhCLE1BQU0sU0FBQVQsR0FBTyxPQUFBYyxRQUFRZixNQUFNQyxFQUFJcEIsY0FFeERrUCxFQUFFLFlBQVk4QyxNQUFNLFdBRWhCLElBQUlPLEVBQUksSUFBSWpFLEVBQVUscUNBQ3RCaUUsRUFBRW5YLFNBR2MsSUFBSWtULEVBQVUscUNBQ3BCbFQsT0FFZHBHLEVBQUksRUFDSmthLEVBQUUsa0JBQWtCOEMsTUFBTXZDLEdBQzFCUCxFQUFFLGdDQUFnQzhDLE1BQU1IIiwiZmlsZSI6ImJ1bmRsZS5qcyIsInNvdXJjZXNDb250ZW50IjpbIiBcdC8vIFRoZSBtb2R1bGUgY2FjaGVcbiBcdHZhciBpbnN0YWxsZWRNb2R1bGVzID0ge307XG5cbiBcdC8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG4gXHRmdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cbiBcdFx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG4gXHRcdGlmKGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdKSB7XG4gXHRcdFx0cmV0dXJuIGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmV4cG9ydHM7XG4gXHRcdH1cbiBcdFx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcbiBcdFx0dmFyIG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdID0ge1xuIFx0XHRcdGk6IG1vZHVsZUlkLFxuIFx0XHRcdGw6IGZhbHNlLFxuIFx0XHRcdGV4cG9ydHM6IHt9XG4gXHRcdH07XG5cbiBcdFx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG4gXHRcdG1vZHVsZXNbbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG4gXHRcdC8vIEZsYWcgdGhlIG1vZHVsZSBhcyBsb2FkZWRcbiBcdFx0bW9kdWxlLmwgPSB0cnVlO1xuXG4gXHRcdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG4gXHRcdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbiBcdH1cblxuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5tID0gbW9kdWxlcztcblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGUgY2FjaGVcbiBcdF9fd2VicGFja19yZXF1aXJlX18uYyA9IGluc3RhbGxlZE1vZHVsZXM7XG5cbiBcdC8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb24gZm9yIGhhcm1vbnkgZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kID0gZnVuY3Rpb24oZXhwb3J0cywgbmFtZSwgZ2V0dGVyKSB7XG4gXHRcdGlmKCFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywgbmFtZSkpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgbmFtZSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGdldHRlciB9KTtcbiBcdFx0fVxuIFx0fTtcblxuIFx0Ly8gZGVmaW5lIF9fZXNNb2R1bGUgb24gZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yID0gZnVuY3Rpb24oZXhwb3J0cykge1xuIFx0XHRpZih0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiBTeW1ib2wudG9TdHJpbmdUYWcpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcbiBcdFx0fVxuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuIFx0fTtcblxuIFx0Ly8gY3JlYXRlIGEgZmFrZSBuYW1lc3BhY2Ugb2JqZWN0XG4gXHQvLyBtb2RlICYgMTogdmFsdWUgaXMgYSBtb2R1bGUgaWQsIHJlcXVpcmUgaXRcbiBcdC8vIG1vZGUgJiAyOiBtZXJnZSBhbGwgcHJvcGVydGllcyBvZiB2YWx1ZSBpbnRvIHRoZSBuc1xuIFx0Ly8gbW9kZSAmIDQ6IHJldHVybiB2YWx1ZSB3aGVuIGFscmVhZHkgbnMgb2JqZWN0XG4gXHQvLyBtb2RlICYgOHwxOiBiZWhhdmUgbGlrZSByZXF1aXJlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnQgPSBmdW5jdGlvbih2YWx1ZSwgbW9kZSkge1xuIFx0XHRpZihtb2RlICYgMSkgdmFsdWUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKHZhbHVlKTtcbiBcdFx0aWYobW9kZSAmIDgpIHJldHVybiB2YWx1ZTtcbiBcdFx0aWYoKG1vZGUgJiA0KSAmJiB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnICYmIHZhbHVlICYmIHZhbHVlLl9fZXNNb2R1bGUpIHJldHVybiB2YWx1ZTtcbiBcdFx0dmFyIG5zID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yKG5zKTtcbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG5zLCAnZGVmYXVsdCcsIHsgZW51bWVyYWJsZTogdHJ1ZSwgdmFsdWU6IHZhbHVlIH0pO1xuIFx0XHRpZihtb2RlICYgMiAmJiB0eXBlb2YgdmFsdWUgIT0gJ3N0cmluZycpIGZvcih2YXIga2V5IGluIHZhbHVlKSBfX3dlYnBhY2tfcmVxdWlyZV9fLmQobnMsIGtleSwgZnVuY3Rpb24oa2V5KSB7IHJldHVybiB2YWx1ZVtrZXldOyB9LmJpbmQobnVsbCwga2V5KSk7XG4gXHRcdHJldHVybiBucztcbiBcdH07XG5cbiBcdC8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSBmdW5jdGlvbihtb2R1bGUpIHtcbiBcdFx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0RGVmYXVsdCgpIHsgcmV0dXJuIG1vZHVsZVsnZGVmYXVsdCddOyB9IDpcbiBcdFx0XHRmdW5jdGlvbiBnZXRNb2R1bGVFeHBvcnRzKCkgeyByZXR1cm4gbW9kdWxlOyB9O1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCAnYScsIGdldHRlcik7XG4gXHRcdHJldHVybiBnZXR0ZXI7XG4gXHR9O1xuXG4gXHQvLyBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGxcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubyA9IGZ1bmN0aW9uKG9iamVjdCwgcHJvcGVydHkpIHsgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIHByb3BlcnR5KTsgfTtcblxuIFx0Ly8gX193ZWJwYWNrX3B1YmxpY19wYXRoX19cbiBcdF9fd2VicGFja19yZXF1aXJlX18ucCA9IFwiL3d3d3dyb290L2Rpc3QvXCI7XG5cblxuIFx0Ly8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG4gXHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXyhfX3dlYnBhY2tfcmVxdWlyZV9fLnMgPSAwKTtcbiIsIi8qISAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxyXG5Db3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cclxuTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTsgeW91IG1heSBub3QgdXNlXHJcbnRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlXHJcbkxpY2Vuc2UgYXQgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcblxyXG5USElTIENPREUgSVMgUFJPVklERUQgT04gQU4gKkFTIElTKiBCQVNJUywgV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZXHJcbktJTkQsIEVJVEhFUiBFWFBSRVNTIE9SIElNUExJRUQsIElOQ0xVRElORyBXSVRIT1VUIExJTUlUQVRJT04gQU5ZIElNUExJRURcclxuV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIFRJVExFLCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSxcclxuTUVSQ0hBTlRBQkxJVFkgT1IgTk9OLUlORlJJTkdFTUVOVC5cclxuXHJcblNlZSB0aGUgQXBhY2hlIFZlcnNpb24gMi4wIExpY2Vuc2UgZm9yIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9uc1xyXG5hbmQgbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqICovXHJcbi8qIGdsb2JhbCBSZWZsZWN0LCBQcm9taXNlICovXHJcblxyXG52YXIgZXh0ZW5kU3RhdGljcyA9IGZ1bmN0aW9uKGQsIGIpIHtcclxuICAgIGV4dGVuZFN0YXRpY3MgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHxcclxuICAgICAgICAoeyBfX3Byb3RvX186IFtdIH0gaW5zdGFuY2VvZiBBcnJheSAmJiBmdW5jdGlvbiAoZCwgYikgeyBkLl9fcHJvdG9fXyA9IGI7IH0pIHx8XHJcbiAgICAgICAgZnVuY3Rpb24gKGQsIGIpIHsgZm9yICh2YXIgcCBpbiBiKSBpZiAoYi5oYXNPd25Qcm9wZXJ0eShwKSkgZFtwXSA9IGJbcF07IH07XHJcbiAgICByZXR1cm4gZXh0ZW5kU3RhdGljcyhkLCBiKTtcclxufTtcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2V4dGVuZHMoZCwgYikge1xyXG4gICAgZXh0ZW5kU3RhdGljcyhkLCBiKTtcclxuICAgIGZ1bmN0aW9uIF9fKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gZDsgfVxyXG4gICAgZC5wcm90b3R5cGUgPSBiID09PSBudWxsID8gT2JqZWN0LmNyZWF0ZShiKSA6IChfXy5wcm90b3R5cGUgPSBiLnByb3RvdHlwZSwgbmV3IF9fKCkpO1xyXG59XHJcblxyXG5leHBvcnQgdmFyIF9fYXNzaWduID0gZnVuY3Rpb24oKSB7XHJcbiAgICBfX2Fzc2lnbiA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gX19hc3NpZ24odCkge1xyXG4gICAgICAgIGZvciAodmFyIHMsIGkgPSAxLCBuID0gYXJndW1lbnRzLmxlbmd0aDsgaSA8IG47IGkrKykge1xyXG4gICAgICAgICAgICBzID0gYXJndW1lbnRzW2ldO1xyXG4gICAgICAgICAgICBmb3IgKHZhciBwIGluIHMpIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwocywgcCkpIHRbcF0gPSBzW3BdO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdDtcclxuICAgIH1cclxuICAgIHJldHVybiBfX2Fzc2lnbi5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19yZXN0KHMsIGUpIHtcclxuICAgIHZhciB0ID0ge307XHJcbiAgICBmb3IgKHZhciBwIGluIHMpIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwocywgcCkgJiYgZS5pbmRleE9mKHApIDwgMClcclxuICAgICAgICB0W3BdID0gc1twXTtcclxuICAgIGlmIChzICE9IG51bGwgJiYgdHlwZW9mIE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMgPT09IFwiZnVuY3Rpb25cIilcclxuICAgICAgICBmb3IgKHZhciBpID0gMCwgcCA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMocyk7IGkgPCBwLmxlbmd0aDsgaSsrKSBpZiAoZS5pbmRleE9mKHBbaV0pIDwgMClcclxuICAgICAgICAgICAgdFtwW2ldXSA9IHNbcFtpXV07XHJcbiAgICByZXR1cm4gdDtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fZGVjb3JhdGUoZGVjb3JhdG9ycywgdGFyZ2V0LCBrZXksIGRlc2MpIHtcclxuICAgIHZhciBjID0gYXJndW1lbnRzLmxlbmd0aCwgciA9IGMgPCAzID8gdGFyZ2V0IDogZGVzYyA9PT0gbnVsbCA/IGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHRhcmdldCwga2V5KSA6IGRlc2MsIGQ7XHJcbiAgICBpZiAodHlwZW9mIFJlZmxlY3QgPT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIFJlZmxlY3QuZGVjb3JhdGUgPT09IFwiZnVuY3Rpb25cIikgciA9IFJlZmxlY3QuZGVjb3JhdGUoZGVjb3JhdG9ycywgdGFyZ2V0LCBrZXksIGRlc2MpO1xyXG4gICAgZWxzZSBmb3IgKHZhciBpID0gZGVjb3JhdG9ycy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkgaWYgKGQgPSBkZWNvcmF0b3JzW2ldKSByID0gKGMgPCAzID8gZChyKSA6IGMgPiAzID8gZCh0YXJnZXQsIGtleSwgcikgOiBkKHRhcmdldCwga2V5KSkgfHwgcjtcclxuICAgIHJldHVybiBjID4gMyAmJiByICYmIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgciksIHI7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX3BhcmFtKHBhcmFtSW5kZXgsIGRlY29yYXRvcikge1xyXG4gICAgcmV0dXJuIGZ1bmN0aW9uICh0YXJnZXQsIGtleSkgeyBkZWNvcmF0b3IodGFyZ2V0LCBrZXksIHBhcmFtSW5kZXgpOyB9XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX21ldGFkYXRhKG1ldGFkYXRhS2V5LCBtZXRhZGF0YVZhbHVlKSB7XHJcbiAgICBpZiAodHlwZW9mIFJlZmxlY3QgPT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIFJlZmxlY3QubWV0YWRhdGEgPT09IFwiZnVuY3Rpb25cIikgcmV0dXJuIFJlZmxlY3QubWV0YWRhdGEobWV0YWRhdGFLZXksIG1ldGFkYXRhVmFsdWUpO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19hd2FpdGVyKHRoaXNBcmcsIF9hcmd1bWVudHMsIFAsIGdlbmVyYXRvcikge1xyXG4gICAgcmV0dXJuIG5ldyAoUCB8fCAoUCA9IFByb21pc2UpKShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XHJcbiAgICAgICAgZnVuY3Rpb24gZnVsZmlsbGVkKHZhbHVlKSB7IHRyeSB7IHN0ZXAoZ2VuZXJhdG9yLm5leHQodmFsdWUpKTsgfSBjYXRjaCAoZSkgeyByZWplY3QoZSk7IH0gfVxyXG4gICAgICAgIGZ1bmN0aW9uIHJlamVjdGVkKHZhbHVlKSB7IHRyeSB7IHN0ZXAoZ2VuZXJhdG9yW1widGhyb3dcIl0odmFsdWUpKTsgfSBjYXRjaCAoZSkgeyByZWplY3QoZSk7IH0gfVxyXG4gICAgICAgIGZ1bmN0aW9uIHN0ZXAocmVzdWx0KSB7IHJlc3VsdC5kb25lID8gcmVzb2x2ZShyZXN1bHQudmFsdWUpIDogbmV3IFAoZnVuY3Rpb24gKHJlc29sdmUpIHsgcmVzb2x2ZShyZXN1bHQudmFsdWUpOyB9KS50aGVuKGZ1bGZpbGxlZCwgcmVqZWN0ZWQpOyB9XHJcbiAgICAgICAgc3RlcCgoZ2VuZXJhdG9yID0gZ2VuZXJhdG9yLmFwcGx5KHRoaXNBcmcsIF9hcmd1bWVudHMgfHwgW10pKS5uZXh0KCkpO1xyXG4gICAgfSk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2dlbmVyYXRvcih0aGlzQXJnLCBib2R5KSB7XHJcbiAgICB2YXIgXyA9IHsgbGFiZWw6IDAsIHNlbnQ6IGZ1bmN0aW9uKCkgeyBpZiAodFswXSAmIDEpIHRocm93IHRbMV07IHJldHVybiB0WzFdOyB9LCB0cnlzOiBbXSwgb3BzOiBbXSB9LCBmLCB5LCB0LCBnO1xyXG4gICAgcmV0dXJuIGcgPSB7IG5leHQ6IHZlcmIoMCksIFwidGhyb3dcIjogdmVyYigxKSwgXCJyZXR1cm5cIjogdmVyYigyKSB9LCB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgKGdbU3ltYm9sLml0ZXJhdG9yXSA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gdGhpczsgfSksIGc7XHJcbiAgICBmdW5jdGlvbiB2ZXJiKG4pIHsgcmV0dXJuIGZ1bmN0aW9uICh2KSB7IHJldHVybiBzdGVwKFtuLCB2XSk7IH07IH1cclxuICAgIGZ1bmN0aW9uIHN0ZXAob3ApIHtcclxuICAgICAgICBpZiAoZikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkdlbmVyYXRvciBpcyBhbHJlYWR5IGV4ZWN1dGluZy5cIik7XHJcbiAgICAgICAgd2hpbGUgKF8pIHRyeSB7XHJcbiAgICAgICAgICAgIGlmIChmID0gMSwgeSAmJiAodCA9IG9wWzBdICYgMiA/IHlbXCJyZXR1cm5cIl0gOiBvcFswXSA/IHlbXCJ0aHJvd1wiXSB8fCAoKHQgPSB5W1wicmV0dXJuXCJdKSAmJiB0LmNhbGwoeSksIDApIDogeS5uZXh0KSAmJiAhKHQgPSB0LmNhbGwoeSwgb3BbMV0pKS5kb25lKSByZXR1cm4gdDtcclxuICAgICAgICAgICAgaWYgKHkgPSAwLCB0KSBvcCA9IFtvcFswXSAmIDIsIHQudmFsdWVdO1xyXG4gICAgICAgICAgICBzd2l0Y2ggKG9wWzBdKSB7XHJcbiAgICAgICAgICAgICAgICBjYXNlIDA6IGNhc2UgMTogdCA9IG9wOyBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgNDogXy5sYWJlbCsrOyByZXR1cm4geyB2YWx1ZTogb3BbMV0sIGRvbmU6IGZhbHNlIH07XHJcbiAgICAgICAgICAgICAgICBjYXNlIDU6IF8ubGFiZWwrKzsgeSA9IG9wWzFdOyBvcCA9IFswXTsgY29udGludWU7XHJcbiAgICAgICAgICAgICAgICBjYXNlIDc6IG9wID0gXy5vcHMucG9wKCk7IF8udHJ5cy5wb3AoKTsgY29udGludWU7XHJcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgICAgICAgIGlmICghKHQgPSBfLnRyeXMsIHQgPSB0Lmxlbmd0aCA+IDAgJiYgdFt0Lmxlbmd0aCAtIDFdKSAmJiAob3BbMF0gPT09IDYgfHwgb3BbMF0gPT09IDIpKSB7IF8gPSAwOyBjb250aW51ZTsgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChvcFswXSA9PT0gMyAmJiAoIXQgfHwgKG9wWzFdID4gdFswXSAmJiBvcFsxXSA8IHRbM10pKSkgeyBfLmxhYmVsID0gb3BbMV07IGJyZWFrOyB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKG9wWzBdID09PSA2ICYmIF8ubGFiZWwgPCB0WzFdKSB7IF8ubGFiZWwgPSB0WzFdOyB0ID0gb3A7IGJyZWFrOyB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHQgJiYgXy5sYWJlbCA8IHRbMl0pIHsgXy5sYWJlbCA9IHRbMl07IF8ub3BzLnB1c2gob3ApOyBicmVhazsgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0WzJdKSBfLm9wcy5wb3AoKTtcclxuICAgICAgICAgICAgICAgICAgICBfLnRyeXMucG9wKCk7IGNvbnRpbnVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIG9wID0gYm9keS5jYWxsKHRoaXNBcmcsIF8pO1xyXG4gICAgICAgIH0gY2F0Y2ggKGUpIHsgb3AgPSBbNiwgZV07IHkgPSAwOyB9IGZpbmFsbHkgeyBmID0gdCA9IDA7IH1cclxuICAgICAgICBpZiAob3BbMF0gJiA1KSB0aHJvdyBvcFsxXTsgcmV0dXJuIHsgdmFsdWU6IG9wWzBdID8gb3BbMV0gOiB2b2lkIDAsIGRvbmU6IHRydWUgfTtcclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fZXhwb3J0U3RhcihtLCBleHBvcnRzKSB7XHJcbiAgICBmb3IgKHZhciBwIGluIG0pIGlmICghZXhwb3J0cy5oYXNPd25Qcm9wZXJ0eShwKSkgZXhwb3J0c1twXSA9IG1bcF07XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX3ZhbHVlcyhvKSB7XHJcbiAgICB2YXIgbSA9IHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvW1N5bWJvbC5pdGVyYXRvcl0sIGkgPSAwO1xyXG4gICAgaWYgKG0pIHJldHVybiBtLmNhbGwobyk7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIG5leHQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgaWYgKG8gJiYgaSA+PSBvLmxlbmd0aCkgbyA9IHZvaWQgMDtcclxuICAgICAgICAgICAgcmV0dXJuIHsgdmFsdWU6IG8gJiYgb1tpKytdLCBkb25lOiAhbyB9O1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX3JlYWQobywgbikge1xyXG4gICAgdmFyIG0gPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb1tTeW1ib2wuaXRlcmF0b3JdO1xyXG4gICAgaWYgKCFtKSByZXR1cm4gbztcclxuICAgIHZhciBpID0gbS5jYWxsKG8pLCByLCBhciA9IFtdLCBlO1xyXG4gICAgdHJ5IHtcclxuICAgICAgICB3aGlsZSAoKG4gPT09IHZvaWQgMCB8fCBuLS0gPiAwKSAmJiAhKHIgPSBpLm5leHQoKSkuZG9uZSkgYXIucHVzaChyLnZhbHVlKTtcclxuICAgIH1cclxuICAgIGNhdGNoIChlcnJvcikgeyBlID0geyBlcnJvcjogZXJyb3IgfTsgfVxyXG4gICAgZmluYWxseSB7XHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgaWYgKHIgJiYgIXIuZG9uZSAmJiAobSA9IGlbXCJyZXR1cm5cIl0pKSBtLmNhbGwoaSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGZpbmFsbHkgeyBpZiAoZSkgdGhyb3cgZS5lcnJvcjsgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIGFyO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19zcHJlYWQoKSB7XHJcbiAgICBmb3IgKHZhciBhciA9IFtdLCBpID0gMDsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKylcclxuICAgICAgICBhciA9IGFyLmNvbmNhdChfX3JlYWQoYXJndW1lbnRzW2ldKSk7XHJcbiAgICByZXR1cm4gYXI7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2F3YWl0KHYpIHtcclxuICAgIHJldHVybiB0aGlzIGluc3RhbmNlb2YgX19hd2FpdCA/ICh0aGlzLnYgPSB2LCB0aGlzKSA6IG5ldyBfX2F3YWl0KHYpO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19hc3luY0dlbmVyYXRvcih0aGlzQXJnLCBfYXJndW1lbnRzLCBnZW5lcmF0b3IpIHtcclxuICAgIGlmICghU3ltYm9sLmFzeW5jSXRlcmF0b3IpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJTeW1ib2wuYXN5bmNJdGVyYXRvciBpcyBub3QgZGVmaW5lZC5cIik7XHJcbiAgICB2YXIgZyA9IGdlbmVyYXRvci5hcHBseSh0aGlzQXJnLCBfYXJndW1lbnRzIHx8IFtdKSwgaSwgcSA9IFtdO1xyXG4gICAgcmV0dXJuIGkgPSB7fSwgdmVyYihcIm5leHRcIiksIHZlcmIoXCJ0aHJvd1wiKSwgdmVyYihcInJldHVyblwiKSwgaVtTeW1ib2wuYXN5bmNJdGVyYXRvcl0gPSBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzOyB9LCBpO1xyXG4gICAgZnVuY3Rpb24gdmVyYihuKSB7IGlmIChnW25dKSBpW25dID0gZnVuY3Rpb24gKHYpIHsgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChhLCBiKSB7IHEucHVzaChbbiwgdiwgYSwgYl0pID4gMSB8fCByZXN1bWUobiwgdik7IH0pOyB9OyB9XHJcbiAgICBmdW5jdGlvbiByZXN1bWUobiwgdikgeyB0cnkgeyBzdGVwKGdbbl0odikpOyB9IGNhdGNoIChlKSB7IHNldHRsZShxWzBdWzNdLCBlKTsgfSB9XHJcbiAgICBmdW5jdGlvbiBzdGVwKHIpIHsgci52YWx1ZSBpbnN0YW5jZW9mIF9fYXdhaXQgPyBQcm9taXNlLnJlc29sdmUoci52YWx1ZS52KS50aGVuKGZ1bGZpbGwsIHJlamVjdCkgOiBzZXR0bGUocVswXVsyXSwgcik7IH1cclxuICAgIGZ1bmN0aW9uIGZ1bGZpbGwodmFsdWUpIHsgcmVzdW1lKFwibmV4dFwiLCB2YWx1ZSk7IH1cclxuICAgIGZ1bmN0aW9uIHJlamVjdCh2YWx1ZSkgeyByZXN1bWUoXCJ0aHJvd1wiLCB2YWx1ZSk7IH1cclxuICAgIGZ1bmN0aW9uIHNldHRsZShmLCB2KSB7IGlmIChmKHYpLCBxLnNoaWZ0KCksIHEubGVuZ3RoKSByZXN1bWUocVswXVswXSwgcVswXVsxXSk7IH1cclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fYXN5bmNEZWxlZ2F0b3Iobykge1xyXG4gICAgdmFyIGksIHA7XHJcbiAgICByZXR1cm4gaSA9IHt9LCB2ZXJiKFwibmV4dFwiKSwgdmVyYihcInRocm93XCIsIGZ1bmN0aW9uIChlKSB7IHRocm93IGU7IH0pLCB2ZXJiKFwicmV0dXJuXCIpLCBpW1N5bWJvbC5pdGVyYXRvcl0gPSBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzOyB9LCBpO1xyXG4gICAgZnVuY3Rpb24gdmVyYihuLCBmKSB7IGlbbl0gPSBvW25dID8gZnVuY3Rpb24gKHYpIHsgcmV0dXJuIChwID0gIXApID8geyB2YWx1ZTogX19hd2FpdChvW25dKHYpKSwgZG9uZTogbiA9PT0gXCJyZXR1cm5cIiB9IDogZiA/IGYodikgOiB2OyB9IDogZjsgfVxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19hc3luY1ZhbHVlcyhvKSB7XHJcbiAgICBpZiAoIVN5bWJvbC5hc3luY0l0ZXJhdG9yKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3ltYm9sLmFzeW5jSXRlcmF0b3IgaXMgbm90IGRlZmluZWQuXCIpO1xyXG4gICAgdmFyIG0gPSBvW1N5bWJvbC5hc3luY0l0ZXJhdG9yXSwgaTtcclxuICAgIHJldHVybiBtID8gbS5jYWxsKG8pIDogKG8gPSB0eXBlb2YgX192YWx1ZXMgPT09IFwiZnVuY3Rpb25cIiA/IF9fdmFsdWVzKG8pIDogb1tTeW1ib2wuaXRlcmF0b3JdKCksIGkgPSB7fSwgdmVyYihcIm5leHRcIiksIHZlcmIoXCJ0aHJvd1wiKSwgdmVyYihcInJldHVyblwiKSwgaVtTeW1ib2wuYXN5bmNJdGVyYXRvcl0gPSBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzOyB9LCBpKTtcclxuICAgIGZ1bmN0aW9uIHZlcmIobikgeyBpW25dID0gb1tuXSAmJiBmdW5jdGlvbiAodikgeyByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkgeyB2ID0gb1tuXSh2KSwgc2V0dGxlKHJlc29sdmUsIHJlamVjdCwgdi5kb25lLCB2LnZhbHVlKTsgfSk7IH07IH1cclxuICAgIGZ1bmN0aW9uIHNldHRsZShyZXNvbHZlLCByZWplY3QsIGQsIHYpIHsgUHJvbWlzZS5yZXNvbHZlKHYpLnRoZW4oZnVuY3Rpb24odikgeyByZXNvbHZlKHsgdmFsdWU6IHYsIGRvbmU6IGQgfSk7IH0sIHJlamVjdCk7IH1cclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fbWFrZVRlbXBsYXRlT2JqZWN0KGNvb2tlZCwgcmF3KSB7XHJcbiAgICBpZiAoT2JqZWN0LmRlZmluZVByb3BlcnR5KSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShjb29rZWQsIFwicmF3XCIsIHsgdmFsdWU6IHJhdyB9KTsgfSBlbHNlIHsgY29va2VkLnJhdyA9IHJhdzsgfVxyXG4gICAgcmV0dXJuIGNvb2tlZDtcclxufTtcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2ltcG9ydFN0YXIobW9kKSB7XHJcbiAgICBpZiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSByZXR1cm4gbW9kO1xyXG4gICAgdmFyIHJlc3VsdCA9IHt9O1xyXG4gICAgaWYgKG1vZCAhPSBudWxsKSBmb3IgKHZhciBrIGluIG1vZCkgaWYgKE9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKG1vZCwgaykpIHJlc3VsdFtrXSA9IG1vZFtrXTtcclxuICAgIHJlc3VsdC5kZWZhdWx0ID0gbW9kO1xyXG4gICAgcmV0dXJuIHJlc3VsdDtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9faW1wb3J0RGVmYXVsdChtb2QpIHtcclxuICAgIHJldHVybiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSA/IG1vZCA6IHsgZGVmYXVsdDogbW9kIH07XHJcbn1cclxuIiwiLy8gQ29weXJpZ2h0IChjKSAuTkVUIEZvdW5kYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXHJcbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAuIFNlZSBMaWNlbnNlLnR4dCBpbiB0aGUgcHJvamVjdCByb290IGZvciBsaWNlbnNlIGluZm9ybWF0aW9uLlxyXG5pbXBvcnQgKiBhcyB0c2xpYl8xIGZyb20gXCJ0c2xpYlwiO1xyXG4vKiogRXJyb3IgdGhyb3duIHdoZW4gYW4gSFRUUCByZXF1ZXN0IGZhaWxzLiAqL1xyXG52YXIgSHR0cEVycm9yID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKF9zdXBlcikge1xyXG4gICAgdHNsaWJfMS5fX2V4dGVuZHMoSHR0cEVycm9yLCBfc3VwZXIpO1xyXG4gICAgLyoqIENvbnN0cnVjdHMgYSBuZXcgaW5zdGFuY2Ugb2Yge0BsaW5rIEh0dHBFcnJvcn0uXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGVycm9yTWVzc2FnZSBBIGRlc2NyaXB0aXZlIGVycm9yIG1lc3NhZ2UuXHJcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gc3RhdHVzQ29kZSBUaGUgSFRUUCBzdGF0dXMgY29kZSByZXByZXNlbnRlZCBieSB0aGlzIGVycm9yLlxyXG4gICAgICovXHJcbiAgICBmdW5jdGlvbiBIdHRwRXJyb3IoZXJyb3JNZXNzYWdlLCBzdGF0dXNDb2RlKSB7XHJcbiAgICAgICAgdmFyIF9uZXdUYXJnZXQgPSB0aGlzLmNvbnN0cnVjdG9yO1xyXG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgdmFyIHRydWVQcm90byA9IF9uZXdUYXJnZXQucHJvdG90eXBlO1xyXG4gICAgICAgIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcywgZXJyb3JNZXNzYWdlKSB8fCB0aGlzO1xyXG4gICAgICAgIF90aGlzLnN0YXR1c0NvZGUgPSBzdGF0dXNDb2RlO1xyXG4gICAgICAgIC8vIFdvcmthcm91bmQgaXNzdWUgaW4gVHlwZXNjcmlwdCBjb21waWxlclxyXG4gICAgICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9NaWNyb3NvZnQvVHlwZVNjcmlwdC9pc3N1ZXMvMTM5NjUjaXNzdWVjb21tZW50LTI3ODU3MDIwMFxyXG4gICAgICAgIF90aGlzLl9fcHJvdG9fXyA9IHRydWVQcm90bztcclxuICAgICAgICByZXR1cm4gX3RoaXM7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gSHR0cEVycm9yO1xyXG59KEVycm9yKSk7XHJcbmV4cG9ydCB7IEh0dHBFcnJvciB9O1xyXG4vKiogRXJyb3IgdGhyb3duIHdoZW4gYSB0aW1lb3V0IGVsYXBzZXMuICovXHJcbnZhciBUaW1lb3V0RXJyb3IgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XHJcbiAgICB0c2xpYl8xLl9fZXh0ZW5kcyhUaW1lb3V0RXJyb3IsIF9zdXBlcik7XHJcbiAgICAvKiogQ29uc3RydWN0cyBhIG5ldyBpbnN0YW5jZSBvZiB7QGxpbmsgVGltZW91dEVycm9yfS5cclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gZXJyb3JNZXNzYWdlIEEgZGVzY3JpcHRpdmUgZXJyb3IgbWVzc2FnZS5cclxuICAgICAqL1xyXG4gICAgZnVuY3Rpb24gVGltZW91dEVycm9yKGVycm9yTWVzc2FnZSkge1xyXG4gICAgICAgIHZhciBfbmV3VGFyZ2V0ID0gdGhpcy5jb25zdHJ1Y3RvcjtcclxuICAgICAgICBpZiAoZXJyb3JNZXNzYWdlID09PSB2b2lkIDApIHsgZXJyb3JNZXNzYWdlID0gXCJBIHRpbWVvdXQgb2NjdXJyZWQuXCI7IH1cclxuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgIHZhciB0cnVlUHJvdG8gPSBfbmV3VGFyZ2V0LnByb3RvdHlwZTtcclxuICAgICAgICBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMsIGVycm9yTWVzc2FnZSkgfHwgdGhpcztcclxuICAgICAgICAvLyBXb3JrYXJvdW5kIGlzc3VlIGluIFR5cGVzY3JpcHQgY29tcGlsZXJcclxuICAgICAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vTWljcm9zb2Z0L1R5cGVTY3JpcHQvaXNzdWVzLzEzOTY1I2lzc3VlY29tbWVudC0yNzg1NzAyMDBcclxuICAgICAgICBfdGhpcy5fX3Byb3RvX18gPSB0cnVlUHJvdG87XHJcbiAgICAgICAgcmV0dXJuIF90aGlzO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIFRpbWVvdXRFcnJvcjtcclxufShFcnJvcikpO1xyXG5leHBvcnQgeyBUaW1lb3V0RXJyb3IgfTtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9RXJyb3JzLmpzLm1hcCIsIi8vIENvcHlyaWdodCAoYykgLk5FVCBGb3VuZGF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxyXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wLiBTZWUgTGljZW5zZS50eHQgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbi5cclxuLy8gVGhlc2UgdmFsdWVzIGFyZSBkZXNpZ25lZCB0byBtYXRjaCB0aGUgQVNQLk5FVCBMb2cgTGV2ZWxzIHNpbmNlIHRoYXQncyB0aGUgcGF0dGVybiB3ZSdyZSBlbXVsYXRpbmcgaGVyZS5cclxuLyoqIEluZGljYXRlcyB0aGUgc2V2ZXJpdHkgb2YgYSBsb2cgbWVzc2FnZS5cclxuICpcclxuICogTG9nIExldmVscyBhcmUgb3JkZXJlZCBpbiBpbmNyZWFzaW5nIHNldmVyaXR5LiBTbyBgRGVidWdgIGlzIG1vcmUgc2V2ZXJlIHRoYW4gYFRyYWNlYCwgZXRjLlxyXG4gKi9cclxuZXhwb3J0IHZhciBMb2dMZXZlbDtcclxuKGZ1bmN0aW9uIChMb2dMZXZlbCkge1xyXG4gICAgLyoqIExvZyBsZXZlbCBmb3IgdmVyeSBsb3cgc2V2ZXJpdHkgZGlhZ25vc3RpYyBtZXNzYWdlcy4gKi9cclxuICAgIExvZ0xldmVsW0xvZ0xldmVsW1wiVHJhY2VcIl0gPSAwXSA9IFwiVHJhY2VcIjtcclxuICAgIC8qKiBMb2cgbGV2ZWwgZm9yIGxvdyBzZXZlcml0eSBkaWFnbm9zdGljIG1lc3NhZ2VzLiAqL1xyXG4gICAgTG9nTGV2ZWxbTG9nTGV2ZWxbXCJEZWJ1Z1wiXSA9IDFdID0gXCJEZWJ1Z1wiO1xyXG4gICAgLyoqIExvZyBsZXZlbCBmb3IgaW5mb3JtYXRpb25hbCBkaWFnbm9zdGljIG1lc3NhZ2VzLiAqL1xyXG4gICAgTG9nTGV2ZWxbTG9nTGV2ZWxbXCJJbmZvcm1hdGlvblwiXSA9IDJdID0gXCJJbmZvcm1hdGlvblwiO1xyXG4gICAgLyoqIExvZyBsZXZlbCBmb3IgZGlhZ25vc3RpYyBtZXNzYWdlcyB0aGF0IGluZGljYXRlIGEgbm9uLWZhdGFsIHByb2JsZW0uICovXHJcbiAgICBMb2dMZXZlbFtMb2dMZXZlbFtcIldhcm5pbmdcIl0gPSAzXSA9IFwiV2FybmluZ1wiO1xyXG4gICAgLyoqIExvZyBsZXZlbCBmb3IgZGlhZ25vc3RpYyBtZXNzYWdlcyB0aGF0IGluZGljYXRlIGEgZmFpbHVyZSBpbiB0aGUgY3VycmVudCBvcGVyYXRpb24uICovXHJcbiAgICBMb2dMZXZlbFtMb2dMZXZlbFtcIkVycm9yXCJdID0gNF0gPSBcIkVycm9yXCI7XHJcbiAgICAvKiogTG9nIGxldmVsIGZvciBkaWFnbm9zdGljIG1lc3NhZ2VzIHRoYXQgaW5kaWNhdGUgYSBmYWlsdXJlIHRoYXQgd2lsbCB0ZXJtaW5hdGUgdGhlIGVudGlyZSBhcHBsaWNhdGlvbi4gKi9cclxuICAgIExvZ0xldmVsW0xvZ0xldmVsW1wiQ3JpdGljYWxcIl0gPSA1XSA9IFwiQ3JpdGljYWxcIjtcclxuICAgIC8qKiBUaGUgaGlnaGVzdCBwb3NzaWJsZSBsb2cgbGV2ZWwuIFVzZWQgd2hlbiBjb25maWd1cmluZyBsb2dnaW5nIHRvIGluZGljYXRlIHRoYXQgbm8gbG9nIG1lc3NhZ2VzIHNob3VsZCBiZSBlbWl0dGVkLiAqL1xyXG4gICAgTG9nTGV2ZWxbTG9nTGV2ZWxbXCJOb25lXCJdID0gNl0gPSBcIk5vbmVcIjtcclxufSkoTG9nTGV2ZWwgfHwgKExvZ0xldmVsID0ge30pKTtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9SUxvZ2dlci5qcy5tYXAiLCIvLyBDb3B5cmlnaHQgKGMpIC5ORVQgRm91bmRhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cclxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMC4gU2VlIExpY2Vuc2UudHh0IGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIGxpY2Vuc2UgaW5mb3JtYXRpb24uXHJcbmltcG9ydCAqIGFzIHRzbGliXzEgZnJvbSBcInRzbGliXCI7XHJcbmltcG9ydCB7IEh0dHBFcnJvciwgVGltZW91dEVycm9yIH0gZnJvbSBcIi4vRXJyb3JzXCI7XHJcbmltcG9ydCB7IExvZ0xldmVsIH0gZnJvbSBcIi4vSUxvZ2dlclwiO1xyXG4vKiogUmVwcmVzZW50cyBhbiBIVFRQIHJlc3BvbnNlLiAqL1xyXG52YXIgSHR0cFJlc3BvbnNlID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gSHR0cFJlc3BvbnNlKHN0YXR1c0NvZGUsIHN0YXR1c1RleHQsIGNvbnRlbnQpIHtcclxuICAgICAgICB0aGlzLnN0YXR1c0NvZGUgPSBzdGF0dXNDb2RlO1xyXG4gICAgICAgIHRoaXMuc3RhdHVzVGV4dCA9IHN0YXR1c1RleHQ7XHJcbiAgICAgICAgdGhpcy5jb250ZW50ID0gY29udGVudDtcclxuICAgIH1cclxuICAgIHJldHVybiBIdHRwUmVzcG9uc2U7XHJcbn0oKSk7XHJcbmV4cG9ydCB7IEh0dHBSZXNwb25zZSB9O1xyXG4vKiogQWJzdHJhY3Rpb24gb3ZlciBhbiBIVFRQIGNsaWVudC5cclxuICpcclxuICogVGhpcyBjbGFzcyBwcm92aWRlcyBhbiBhYnN0cmFjdGlvbiBvdmVyIGFuIEhUVFAgY2xpZW50IHNvIHRoYXQgYSBkaWZmZXJlbnQgaW1wbGVtZW50YXRpb24gY2FuIGJlIHByb3ZpZGVkIG9uIGRpZmZlcmVudCBwbGF0Zm9ybXMuXHJcbiAqL1xyXG52YXIgSHR0cENsaWVudCA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIEh0dHBDbGllbnQoKSB7XHJcbiAgICB9XHJcbiAgICBIdHRwQ2xpZW50LnByb3RvdHlwZS5nZXQgPSBmdW5jdGlvbiAodXJsLCBvcHRpb25zKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuc2VuZCh0c2xpYl8xLl9fYXNzaWduKHt9LCBvcHRpb25zLCB7IG1ldGhvZDogXCJHRVRcIiwgdXJsOiB1cmwgfSkpO1xyXG4gICAgfTtcclxuICAgIEh0dHBDbGllbnQucHJvdG90eXBlLnBvc3QgPSBmdW5jdGlvbiAodXJsLCBvcHRpb25zKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuc2VuZCh0c2xpYl8xLl9fYXNzaWduKHt9LCBvcHRpb25zLCB7IG1ldGhvZDogXCJQT1NUXCIsIHVybDogdXJsIH0pKTtcclxuICAgIH07XHJcbiAgICBIdHRwQ2xpZW50LnByb3RvdHlwZS5kZWxldGUgPSBmdW5jdGlvbiAodXJsLCBvcHRpb25zKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuc2VuZCh0c2xpYl8xLl9fYXNzaWduKHt9LCBvcHRpb25zLCB7IG1ldGhvZDogXCJERUxFVEVcIiwgdXJsOiB1cmwgfSkpO1xyXG4gICAgfTtcclxuICAgIHJldHVybiBIdHRwQ2xpZW50O1xyXG59KCkpO1xyXG5leHBvcnQgeyBIdHRwQ2xpZW50IH07XHJcbi8qKiBEZWZhdWx0IGltcGxlbWVudGF0aW9uIG9mIHtAbGluayBIdHRwQ2xpZW50fS4gKi9cclxudmFyIERlZmF1bHRIdHRwQ2xpZW50ID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKF9zdXBlcikge1xyXG4gICAgdHNsaWJfMS5fX2V4dGVuZHMoRGVmYXVsdEh0dHBDbGllbnQsIF9zdXBlcik7XHJcbiAgICAvKiogQ3JlYXRlcyBhIG5ldyBpbnN0YW5jZSBvZiB0aGUge0BsaW5rIERlZmF1bHRIdHRwQ2xpZW50fSwgdXNpbmcgdGhlIHByb3ZpZGVkIHtAbGluayBJTG9nZ2VyfSB0byBsb2cgbWVzc2FnZXMuICovXHJcbiAgICBmdW5jdGlvbiBEZWZhdWx0SHR0cENsaWVudChsb2dnZXIpIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzKSB8fCB0aGlzO1xyXG4gICAgICAgIF90aGlzLmxvZ2dlciA9IGxvZ2dlcjtcclxuICAgICAgICByZXR1cm4gX3RoaXM7XHJcbiAgICB9XHJcbiAgICAvKiogQGluaGVyaXREb2MgKi9cclxuICAgIERlZmF1bHRIdHRwQ2xpZW50LnByb3RvdHlwZS5zZW5kID0gZnVuY3Rpb24gKHJlcXVlc3QpIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XHJcbiAgICAgICAgICAgIHZhciB4aHIgPSBuZXcgWE1MSHR0cFJlcXVlc3QoKTtcclxuICAgICAgICAgICAgeGhyLm9wZW4ocmVxdWVzdC5tZXRob2QsIHJlcXVlc3QudXJsLCB0cnVlKTtcclxuICAgICAgICAgICAgeGhyLndpdGhDcmVkZW50aWFscyA9IHRydWU7XHJcbiAgICAgICAgICAgIHhoci5zZXRSZXF1ZXN0SGVhZGVyKFwiWC1SZXF1ZXN0ZWQtV2l0aFwiLCBcIlhNTEh0dHBSZXF1ZXN0XCIpO1xyXG4gICAgICAgICAgICBpZiAocmVxdWVzdC5oZWFkZXJzKSB7XHJcbiAgICAgICAgICAgICAgICBPYmplY3Qua2V5cyhyZXF1ZXN0LmhlYWRlcnMpXHJcbiAgICAgICAgICAgICAgICAgICAgLmZvckVhY2goZnVuY3Rpb24gKGhlYWRlcikgeyByZXR1cm4geGhyLnNldFJlcXVlc3RIZWFkZXIoaGVhZGVyLCByZXF1ZXN0LmhlYWRlcnNbaGVhZGVyXSk7IH0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmIChyZXF1ZXN0LnJlc3BvbnNlVHlwZSkge1xyXG4gICAgICAgICAgICAgICAgeGhyLnJlc3BvbnNlVHlwZSA9IHJlcXVlc3QucmVzcG9uc2VUeXBlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmIChyZXF1ZXN0LmFib3J0U2lnbmFsKSB7XHJcbiAgICAgICAgICAgICAgICByZXF1ZXN0LmFib3J0U2lnbmFsLm9uYWJvcnQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgeGhyLmFib3J0KCk7XHJcbiAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmIChyZXF1ZXN0LnRpbWVvdXQpIHtcclxuICAgICAgICAgICAgICAgIHhoci50aW1lb3V0ID0gcmVxdWVzdC50aW1lb3V0O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHhoci5vbmxvYWQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAocmVxdWVzdC5hYm9ydFNpZ25hbCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJlcXVlc3QuYWJvcnRTaWduYWwub25hYm9ydCA9IG51bGw7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAoeGhyLnN0YXR1cyA+PSAyMDAgJiYgeGhyLnN0YXR1cyA8IDMwMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJlc29sdmUobmV3IEh0dHBSZXNwb25zZSh4aHIuc3RhdHVzLCB4aHIuc3RhdHVzVGV4dCwgeGhyLnJlc3BvbnNlIHx8IHhoci5yZXNwb25zZVRleHQpKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHJlamVjdChuZXcgSHR0cEVycm9yKHhoci5zdGF0dXNUZXh0LCB4aHIuc3RhdHVzKSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIHhoci5vbmVycm9yID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgX3RoaXMubG9nZ2VyLmxvZyhMb2dMZXZlbC5XYXJuaW5nLCBcIkVycm9yIGZyb20gSFRUUCByZXF1ZXN0LiBcIiArIHhoci5zdGF0dXMgKyBcIjogXCIgKyB4aHIuc3RhdHVzVGV4dCk7XHJcbiAgICAgICAgICAgICAgICByZWplY3QobmV3IEh0dHBFcnJvcih4aHIuc3RhdHVzVGV4dCwgeGhyLnN0YXR1cykpO1xyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICB4aHIub250aW1lb3V0ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgX3RoaXMubG9nZ2VyLmxvZyhMb2dMZXZlbC5XYXJuaW5nLCBcIlRpbWVvdXQgZnJvbSBIVFRQIHJlcXVlc3QuXCIpO1xyXG4gICAgICAgICAgICAgICAgcmVqZWN0KG5ldyBUaW1lb3V0RXJyb3IoKSk7XHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIHhoci5zZW5kKHJlcXVlc3QuY29udGVudCB8fCBcIlwiKTtcclxuICAgICAgICB9KTtcclxuICAgIH07XHJcbiAgICByZXR1cm4gRGVmYXVsdEh0dHBDbGllbnQ7XHJcbn0oSHR0cENsaWVudCkpO1xyXG5leHBvcnQgeyBEZWZhdWx0SHR0cENsaWVudCB9O1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1IdHRwQ2xpZW50LmpzLm1hcCIsIi8vIENvcHlyaWdodCAoYykgLk5FVCBGb3VuZGF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxyXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wLiBTZWUgTGljZW5zZS50eHQgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbi5cclxuLyoqIERlZmluZXMgdGhlIHR5cGUgb2YgYSBIdWIgTWVzc2FnZS4gKi9cclxuZXhwb3J0IHZhciBNZXNzYWdlVHlwZTtcclxuKGZ1bmN0aW9uIChNZXNzYWdlVHlwZSkge1xyXG4gICAgLyoqIEluZGljYXRlcyB0aGUgbWVzc2FnZSBpcyBhbiBJbnZvY2F0aW9uIG1lc3NhZ2UgYW5kIGltcGxlbWVudHMgdGhlIHtAbGluayBJbnZvY2F0aW9uTWVzc2FnZX0gaW50ZXJmYWNlLiAqL1xyXG4gICAgTWVzc2FnZVR5cGVbTWVzc2FnZVR5cGVbXCJJbnZvY2F0aW9uXCJdID0gMV0gPSBcIkludm9jYXRpb25cIjtcclxuICAgIC8qKiBJbmRpY2F0ZXMgdGhlIG1lc3NhZ2UgaXMgYSBTdHJlYW1JdGVtIG1lc3NhZ2UgYW5kIGltcGxlbWVudHMgdGhlIHtAbGluayBTdHJlYW1JdGVtTWVzc2FnZX0gaW50ZXJmYWNlLiAqL1xyXG4gICAgTWVzc2FnZVR5cGVbTWVzc2FnZVR5cGVbXCJTdHJlYW1JdGVtXCJdID0gMl0gPSBcIlN0cmVhbUl0ZW1cIjtcclxuICAgIC8qKiBJbmRpY2F0ZXMgdGhlIG1lc3NhZ2UgaXMgYSBDb21wbGV0aW9uIG1lc3NhZ2UgYW5kIGltcGxlbWVudHMgdGhlIHtAbGluayBDb21wbGV0aW9uTWVzc2FnZX0gaW50ZXJmYWNlLiAqL1xyXG4gICAgTWVzc2FnZVR5cGVbTWVzc2FnZVR5cGVbXCJDb21wbGV0aW9uXCJdID0gM10gPSBcIkNvbXBsZXRpb25cIjtcclxuICAgIC8qKiBJbmRpY2F0ZXMgdGhlIG1lc3NhZ2UgaXMgYSBTdHJlYW0gSW52b2NhdGlvbiBtZXNzYWdlIGFuZCBpbXBsZW1lbnRzIHRoZSB7QGxpbmsgU3RyZWFtSW52b2NhdGlvbk1lc3NhZ2V9IGludGVyZmFjZS4gKi9cclxuICAgIE1lc3NhZ2VUeXBlW01lc3NhZ2VUeXBlW1wiU3RyZWFtSW52b2NhdGlvblwiXSA9IDRdID0gXCJTdHJlYW1JbnZvY2F0aW9uXCI7XHJcbiAgICAvKiogSW5kaWNhdGVzIHRoZSBtZXNzYWdlIGlzIGEgQ2FuY2VsIEludm9jYXRpb24gbWVzc2FnZSBhbmQgaW1wbGVtZW50cyB0aGUge0BsaW5rIENhbmNlbEludm9jYXRpb25NZXNzYWdlfSBpbnRlcmZhY2UuICovXHJcbiAgICBNZXNzYWdlVHlwZVtNZXNzYWdlVHlwZVtcIkNhbmNlbEludm9jYXRpb25cIl0gPSA1XSA9IFwiQ2FuY2VsSW52b2NhdGlvblwiO1xyXG4gICAgLyoqIEluZGljYXRlcyB0aGUgbWVzc2FnZSBpcyBhIFBpbmcgbWVzc2FnZSBhbmQgaW1wbGVtZW50cyB0aGUge0BsaW5rIFBpbmdNZXNzYWdlfSBpbnRlcmZhY2UuICovXHJcbiAgICBNZXNzYWdlVHlwZVtNZXNzYWdlVHlwZVtcIlBpbmdcIl0gPSA2XSA9IFwiUGluZ1wiO1xyXG4gICAgLyoqIEluZGljYXRlcyB0aGUgbWVzc2FnZSBpcyBhIENsb3NlIG1lc3NhZ2UgYW5kIGltcGxlbWVudHMgdGhlIHtAbGluayBDbG9zZU1lc3NhZ2V9IGludGVyZmFjZS4gKi9cclxuICAgIE1lc3NhZ2VUeXBlW01lc3NhZ2VUeXBlW1wiQ2xvc2VcIl0gPSA3XSA9IFwiQ2xvc2VcIjtcclxufSkoTWVzc2FnZVR5cGUgfHwgKE1lc3NhZ2VUeXBlID0ge30pKTtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9SUh1YlByb3RvY29sLmpzLm1hcCIsIi8vIENvcHlyaWdodCAoYykgLk5FVCBGb3VuZGF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxyXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wLiBTZWUgTGljZW5zZS50eHQgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbi5cclxuLy8gTm90IGV4cG9ydGVkIGZyb20gaW5kZXhcclxudmFyIFRleHRNZXNzYWdlRm9ybWF0ID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gVGV4dE1lc3NhZ2VGb3JtYXQoKSB7XHJcbiAgICB9XHJcbiAgICBUZXh0TWVzc2FnZUZvcm1hdC53cml0ZSA9IGZ1bmN0aW9uIChvdXRwdXQpIHtcclxuICAgICAgICByZXR1cm4gXCJcIiArIG91dHB1dCArIFRleHRNZXNzYWdlRm9ybWF0LlJlY29yZFNlcGFyYXRvcjtcclxuICAgIH07XHJcbiAgICBUZXh0TWVzc2FnZUZvcm1hdC5wYXJzZSA9IGZ1bmN0aW9uIChpbnB1dCkge1xyXG4gICAgICAgIGlmIChpbnB1dFtpbnB1dC5sZW5ndGggLSAxXSAhPT0gVGV4dE1lc3NhZ2VGb3JtYXQuUmVjb3JkU2VwYXJhdG9yKSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIk1lc3NhZ2UgaXMgaW5jb21wbGV0ZS5cIik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHZhciBtZXNzYWdlcyA9IGlucHV0LnNwbGl0KFRleHRNZXNzYWdlRm9ybWF0LlJlY29yZFNlcGFyYXRvcik7XHJcbiAgICAgICAgbWVzc2FnZXMucG9wKCk7XHJcbiAgICAgICAgcmV0dXJuIG1lc3NhZ2VzO1xyXG4gICAgfTtcclxuICAgIFRleHRNZXNzYWdlRm9ybWF0LlJlY29yZFNlcGFyYXRvckNvZGUgPSAweDFlO1xyXG4gICAgVGV4dE1lc3NhZ2VGb3JtYXQuUmVjb3JkU2VwYXJhdG9yID0gU3RyaW5nLmZyb21DaGFyQ29kZShUZXh0TWVzc2FnZUZvcm1hdC5SZWNvcmRTZXBhcmF0b3JDb2RlKTtcclxuICAgIHJldHVybiBUZXh0TWVzc2FnZUZvcm1hdDtcclxufSgpKTtcclxuZXhwb3J0IHsgVGV4dE1lc3NhZ2VGb3JtYXQgfTtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9VGV4dE1lc3NhZ2VGb3JtYXQuanMubWFwIiwiLy8gQ29weXJpZ2h0IChjKSAuTkVUIEZvdW5kYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXHJcbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAuIFNlZSBMaWNlbnNlLnR4dCBpbiB0aGUgcHJvamVjdCByb290IGZvciBsaWNlbnNlIGluZm9ybWF0aW9uLlxyXG5pbXBvcnQgeyBUZXh0TWVzc2FnZUZvcm1hdCB9IGZyb20gXCIuL1RleHRNZXNzYWdlRm9ybWF0XCI7XHJcbnZhciBIYW5kc2hha2VQcm90b2NvbCA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIEhhbmRzaGFrZVByb3RvY29sKCkge1xyXG4gICAgfVxyXG4gICAgLy8gSGFuZHNoYWtlIHJlcXVlc3QgaXMgYWx3YXlzIEpTT05cclxuICAgIEhhbmRzaGFrZVByb3RvY29sLnByb3RvdHlwZS53cml0ZUhhbmRzaGFrZVJlcXVlc3QgPSBmdW5jdGlvbiAoaGFuZHNoYWtlUmVxdWVzdCkge1xyXG4gICAgICAgIHJldHVybiBUZXh0TWVzc2FnZUZvcm1hdC53cml0ZShKU09OLnN0cmluZ2lmeShoYW5kc2hha2VSZXF1ZXN0KSk7XHJcbiAgICB9O1xyXG4gICAgSGFuZHNoYWtlUHJvdG9jb2wucHJvdG90eXBlLnBhcnNlSGFuZHNoYWtlUmVzcG9uc2UgPSBmdW5jdGlvbiAoZGF0YSkge1xyXG4gICAgICAgIHZhciByZXNwb25zZU1lc3NhZ2U7XHJcbiAgICAgICAgdmFyIG1lc3NhZ2VEYXRhO1xyXG4gICAgICAgIHZhciByZW1haW5pbmdEYXRhO1xyXG4gICAgICAgIGlmIChkYXRhIGluc3RhbmNlb2YgQXJyYXlCdWZmZXIpIHtcclxuICAgICAgICAgICAgLy8gRm9ybWF0IGlzIGJpbmFyeSBidXQgc3RpbGwgbmVlZCB0byByZWFkIEpTT04gdGV4dCBmcm9tIGhhbmRzaGFrZSByZXNwb25zZVxyXG4gICAgICAgICAgICB2YXIgYmluYXJ5RGF0YSA9IG5ldyBVaW50OEFycmF5KGRhdGEpO1xyXG4gICAgICAgICAgICB2YXIgc2VwYXJhdG9ySW5kZXggPSBiaW5hcnlEYXRhLmluZGV4T2YoVGV4dE1lc3NhZ2VGb3JtYXQuUmVjb3JkU2VwYXJhdG9yQ29kZSk7XHJcbiAgICAgICAgICAgIGlmIChzZXBhcmF0b3JJbmRleCA9PT0gLTEpIHtcclxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIk1lc3NhZ2UgaXMgaW5jb21wbGV0ZS5cIik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgLy8gY29udGVudCBiZWZvcmUgc2VwYXJhdG9yIGlzIGhhbmRzaGFrZSByZXNwb25zZVxyXG4gICAgICAgICAgICAvLyBvcHRpb25hbCBjb250ZW50IGFmdGVyIGlzIGFkZGl0aW9uYWwgbWVzc2FnZXNcclxuICAgICAgICAgICAgdmFyIHJlc3BvbnNlTGVuZ3RoID0gc2VwYXJhdG9ySW5kZXggKyAxO1xyXG4gICAgICAgICAgICBtZXNzYWdlRGF0YSA9IFN0cmluZy5mcm9tQ2hhckNvZGUuYXBwbHkobnVsbCwgYmluYXJ5RGF0YS5zbGljZSgwLCByZXNwb25zZUxlbmd0aCkpO1xyXG4gICAgICAgICAgICByZW1haW5pbmdEYXRhID0gKGJpbmFyeURhdGEuYnl0ZUxlbmd0aCA+IHJlc3BvbnNlTGVuZ3RoKSA/IGJpbmFyeURhdGEuc2xpY2UocmVzcG9uc2VMZW5ndGgpLmJ1ZmZlciA6IG51bGw7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICB2YXIgdGV4dERhdGEgPSBkYXRhO1xyXG4gICAgICAgICAgICB2YXIgc2VwYXJhdG9ySW5kZXggPSB0ZXh0RGF0YS5pbmRleE9mKFRleHRNZXNzYWdlRm9ybWF0LlJlY29yZFNlcGFyYXRvcik7XHJcbiAgICAgICAgICAgIGlmIChzZXBhcmF0b3JJbmRleCA9PT0gLTEpIHtcclxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIk1lc3NhZ2UgaXMgaW5jb21wbGV0ZS5cIik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgLy8gY29udGVudCBiZWZvcmUgc2VwYXJhdG9yIGlzIGhhbmRzaGFrZSByZXNwb25zZVxyXG4gICAgICAgICAgICAvLyBvcHRpb25hbCBjb250ZW50IGFmdGVyIGlzIGFkZGl0aW9uYWwgbWVzc2FnZXNcclxuICAgICAgICAgICAgdmFyIHJlc3BvbnNlTGVuZ3RoID0gc2VwYXJhdG9ySW5kZXggKyAxO1xyXG4gICAgICAgICAgICBtZXNzYWdlRGF0YSA9IHRleHREYXRhLnN1YnN0cmluZygwLCByZXNwb25zZUxlbmd0aCk7XHJcbiAgICAgICAgICAgIHJlbWFpbmluZ0RhdGEgPSAodGV4dERhdGEubGVuZ3RoID4gcmVzcG9uc2VMZW5ndGgpID8gdGV4dERhdGEuc3Vic3RyaW5nKHJlc3BvbnNlTGVuZ3RoKSA6IG51bGw7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIEF0IHRoaXMgcG9pbnQgd2Ugc2hvdWxkIGhhdmUganVzdCB0aGUgc2luZ2xlIGhhbmRzaGFrZSBtZXNzYWdlXHJcbiAgICAgICAgdmFyIG1lc3NhZ2VzID0gVGV4dE1lc3NhZ2VGb3JtYXQucGFyc2UobWVzc2FnZURhdGEpO1xyXG4gICAgICAgIHJlc3BvbnNlTWVzc2FnZSA9IEpTT04ucGFyc2UobWVzc2FnZXNbMF0pO1xyXG4gICAgICAgIC8vIG11bHRpcGxlIG1lc3NhZ2VzIGNvdWxkIGhhdmUgYXJyaXZlZCB3aXRoIGhhbmRzaGFrZVxyXG4gICAgICAgIC8vIHJldHVybiBhZGRpdGlvbmFsIGRhdGEgdG8gYmUgcGFyc2VkIGFzIHVzdWFsLCBvciBudWxsIGlmIGFsbCBwYXJzZWRcclxuICAgICAgICByZXR1cm4gW3JlbWFpbmluZ0RhdGEsIHJlc3BvbnNlTWVzc2FnZV07XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIEhhbmRzaGFrZVByb3RvY29sO1xyXG59KCkpO1xyXG5leHBvcnQgeyBIYW5kc2hha2VQcm90b2NvbCB9O1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1IYW5kc2hha2VQcm90b2NvbC5qcy5tYXAiLCIvLyBDb3B5cmlnaHQgKGMpIC5ORVQgRm91bmRhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cclxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMC4gU2VlIExpY2Vuc2UudHh0IGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIGxpY2Vuc2UgaW5mb3JtYXRpb24uXHJcbi8qKiBBIGxvZ2dlciB0aGF0IGRvZXMgbm90aGluZyB3aGVuIGxvZyBtZXNzYWdlcyBhcmUgc2VudCB0byBpdC4gKi9cclxudmFyIE51bGxMb2dnZXIgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBOdWxsTG9nZ2VyKCkge1xyXG4gICAgfVxyXG4gICAgLyoqIEBpbmhlcml0RG9jICovXHJcbiAgICBOdWxsTG9nZ2VyLnByb3RvdHlwZS5sb2cgPSBmdW5jdGlvbiAobG9nTGV2ZWwsIG1lc3NhZ2UpIHtcclxuICAgIH07XHJcbiAgICAvKiogVGhlIHNpbmdsZXRvbiBpbnN0YW5jZSBvZiB0aGUge0BsaW5rIE51bGxMb2dnZXJ9LiAqL1xyXG4gICAgTnVsbExvZ2dlci5pbnN0YW5jZSA9IG5ldyBOdWxsTG9nZ2VyKCk7XHJcbiAgICByZXR1cm4gTnVsbExvZ2dlcjtcclxufSgpKTtcclxuZXhwb3J0IHsgTnVsbExvZ2dlciB9O1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1Mb2dnZXJzLmpzLm1hcCIsIi8vIENvcHlyaWdodCAoYykgLk5FVCBGb3VuZGF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxyXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wLiBTZWUgTGljZW5zZS50eHQgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbi5cclxuaW1wb3J0ICogYXMgdHNsaWJfMSBmcm9tIFwidHNsaWJcIjtcclxuaW1wb3J0IHsgTG9nTGV2ZWwgfSBmcm9tIFwiLi9JTG9nZ2VyXCI7XHJcbmltcG9ydCB7IE51bGxMb2dnZXIgfSBmcm9tIFwiLi9Mb2dnZXJzXCI7XHJcbnZhciBBcmcgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBBcmcoKSB7XHJcbiAgICB9XHJcbiAgICBBcmcuaXNSZXF1aXJlZCA9IGZ1bmN0aW9uICh2YWwsIG5hbWUpIHtcclxuICAgICAgICBpZiAodmFsID09PSBudWxsIHx8IHZhbCA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIlRoZSAnXCIgKyBuYW1lICsgXCInIGFyZ3VtZW50IGlzIHJlcXVpcmVkLlwiKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgQXJnLmlzSW4gPSBmdW5jdGlvbiAodmFsLCB2YWx1ZXMsIG5hbWUpIHtcclxuICAgICAgICAvLyBUeXBlU2NyaXB0IGVudW1zIGhhdmUga2V5cyBmb3IgKipib3RoKiogdGhlIG5hbWUgYW5kIHRoZSB2YWx1ZSBvZiBlYWNoIGVudW0gbWVtYmVyIG9uIHRoZSB0eXBlIGl0c2VsZi5cclxuICAgICAgICBpZiAoISh2YWwgaW4gdmFsdWVzKSkge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJVbmtub3duIFwiICsgbmFtZSArIFwiIHZhbHVlOiBcIiArIHZhbCArIFwiLlwiKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIEFyZztcclxufSgpKTtcclxuZXhwb3J0IHsgQXJnIH07XHJcbmV4cG9ydCBmdW5jdGlvbiBnZXREYXRhRGV0YWlsKGRhdGEsIGluY2x1ZGVDb250ZW50KSB7XHJcbiAgICB2YXIgbGVuZ3RoID0gbnVsbDtcclxuICAgIGlmIChkYXRhIGluc3RhbmNlb2YgQXJyYXlCdWZmZXIpIHtcclxuICAgICAgICBsZW5ndGggPSBcIkJpbmFyeSBkYXRhIG9mIGxlbmd0aCBcIiArIGRhdGEuYnl0ZUxlbmd0aDtcclxuICAgICAgICBpZiAoaW5jbHVkZUNvbnRlbnQpIHtcclxuICAgICAgICAgICAgbGVuZ3RoICs9IFwiLiBDb250ZW50OiAnXCIgKyBmb3JtYXRBcnJheUJ1ZmZlcihkYXRhKSArIFwiJ1wiO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGVsc2UgaWYgKHR5cGVvZiBkYXRhID09PSBcInN0cmluZ1wiKSB7XHJcbiAgICAgICAgbGVuZ3RoID0gXCJTdHJpbmcgZGF0YSBvZiBsZW5ndGggXCIgKyBkYXRhLmxlbmd0aDtcclxuICAgICAgICBpZiAoaW5jbHVkZUNvbnRlbnQpIHtcclxuICAgICAgICAgICAgbGVuZ3RoICs9IFwiLiBDb250ZW50OiAnXCIgKyBkYXRhICsgXCInLlwiO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiBsZW5ndGg7XHJcbn1cclxuZXhwb3J0IGZ1bmN0aW9uIGZvcm1hdEFycmF5QnVmZmVyKGRhdGEpIHtcclxuICAgIHZhciB2aWV3ID0gbmV3IFVpbnQ4QXJyYXkoZGF0YSk7XHJcbiAgICAvLyBVaW50OEFycmF5Lm1hcCBvbmx5IHN1cHBvcnRzIHJldHVybmluZyBhbm90aGVyIFVpbnQ4QXJyYXk/XHJcbiAgICB2YXIgc3RyID0gXCJcIjtcclxuICAgIHZpZXcuZm9yRWFjaChmdW5jdGlvbiAobnVtKSB7XHJcbiAgICAgICAgdmFyIHBhZCA9IG51bSA8IDE2ID8gXCIwXCIgOiBcIlwiO1xyXG4gICAgICAgIHN0ciArPSBcIjB4XCIgKyBwYWQgKyBudW0udG9TdHJpbmcoMTYpICsgXCIgXCI7XHJcbiAgICB9KTtcclxuICAgIC8vIFRyaW0gb2YgdHJhaWxpbmcgc3BhY2UuXHJcbiAgICByZXR1cm4gc3RyLnN1YnN0cigwLCBzdHIubGVuZ3RoIC0gMSk7XHJcbn1cclxuZXhwb3J0IGZ1bmN0aW9uIHNlbmRNZXNzYWdlKGxvZ2dlciwgdHJhbnNwb3J0TmFtZSwgaHR0cENsaWVudCwgdXJsLCBhY2Nlc3NUb2tlbkZhY3RvcnksIGNvbnRlbnQsIGxvZ01lc3NhZ2VDb250ZW50KSB7XHJcbiAgICByZXR1cm4gdHNsaWJfMS5fX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YXIgaGVhZGVycywgdG9rZW4sIHJlc3BvbnNlLCBfYTtcclxuICAgICAgICByZXR1cm4gdHNsaWJfMS5fX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2IpIHtcclxuICAgICAgICAgICAgc3dpdGNoIChfYi5sYWJlbCkge1xyXG4gICAgICAgICAgICAgICAgY2FzZSAwOiByZXR1cm4gWzQgLyp5aWVsZCovLCBhY2Nlc3NUb2tlbkZhY3RvcnkoKV07XHJcbiAgICAgICAgICAgICAgICBjYXNlIDE6XHJcbiAgICAgICAgICAgICAgICAgICAgdG9rZW4gPSBfYi5zZW50KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRva2VuKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGhlYWRlcnMgPSAoX2EgPSB7fSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9hW1wiQXV0aG9yaXphdGlvblwiXSA9IFwiQmVhcmVyIFwiICsgdG9rZW4sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfYSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGxvZ2dlci5sb2coTG9nTGV2ZWwuVHJhY2UsIFwiKFwiICsgdHJhbnNwb3J0TmFtZSArIFwiIHRyYW5zcG9ydCkgc2VuZGluZyBkYXRhLiBcIiArIGdldERhdGFEZXRhaWwoY29udGVudCwgbG9nTWVzc2FnZUNvbnRlbnQpICsgXCIuXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCAvKnlpZWxkKi8sIGh0dHBDbGllbnQucG9zdCh1cmwsIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRlbnQ6IGNvbnRlbnQsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBoZWFkZXJzOiBoZWFkZXJzLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KV07XHJcbiAgICAgICAgICAgICAgICBjYXNlIDI6XHJcbiAgICAgICAgICAgICAgICAgICAgcmVzcG9uc2UgPSBfYi5zZW50KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgbG9nZ2VyLmxvZyhMb2dMZXZlbC5UcmFjZSwgXCIoXCIgKyB0cmFuc3BvcnROYW1lICsgXCIgdHJhbnNwb3J0KSByZXF1ZXN0IGNvbXBsZXRlLiBSZXNwb25zZSBzdGF0dXM6IFwiICsgcmVzcG9uc2Uuc3RhdHVzQ29kZSArIFwiLlwiKTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzIgLypyZXR1cm4qL107XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgIH0pO1xyXG59XHJcbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVMb2dnZXIobG9nZ2VyKSB7XHJcbiAgICBpZiAobG9nZ2VyID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICByZXR1cm4gbmV3IENvbnNvbGVMb2dnZXIoTG9nTGV2ZWwuSW5mb3JtYXRpb24pO1xyXG4gICAgfVxyXG4gICAgaWYgKGxvZ2dlciA9PT0gbnVsbCkge1xyXG4gICAgICAgIHJldHVybiBOdWxsTG9nZ2VyLmluc3RhbmNlO1xyXG4gICAgfVxyXG4gICAgaWYgKGxvZ2dlci5sb2cpIHtcclxuICAgICAgICByZXR1cm4gbG9nZ2VyO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIG5ldyBDb25zb2xlTG9nZ2VyKGxvZ2dlcik7XHJcbn1cclxudmFyIFN1YmplY3QgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBTdWJqZWN0KGNhbmNlbENhbGxiYWNrKSB7XHJcbiAgICAgICAgdGhpcy5vYnNlcnZlcnMgPSBbXTtcclxuICAgICAgICB0aGlzLmNhbmNlbENhbGxiYWNrID0gY2FuY2VsQ2FsbGJhY2s7XHJcbiAgICB9XHJcbiAgICBTdWJqZWN0LnByb3RvdHlwZS5uZXh0ID0gZnVuY3Rpb24gKGl0ZW0pIHtcclxuICAgICAgICBmb3IgKHZhciBfaSA9IDAsIF9hID0gdGhpcy5vYnNlcnZlcnM7IF9pIDwgX2EubGVuZ3RoOyBfaSsrKSB7XHJcbiAgICAgICAgICAgIHZhciBvYnNlcnZlciA9IF9hW19pXTtcclxuICAgICAgICAgICAgb2JzZXJ2ZXIubmV4dChpdGVtKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgU3ViamVjdC5wcm90b3R5cGUuZXJyb3IgPSBmdW5jdGlvbiAoZXJyKSB7XHJcbiAgICAgICAgZm9yICh2YXIgX2kgPSAwLCBfYSA9IHRoaXMub2JzZXJ2ZXJzOyBfaSA8IF9hLmxlbmd0aDsgX2krKykge1xyXG4gICAgICAgICAgICB2YXIgb2JzZXJ2ZXIgPSBfYVtfaV07XHJcbiAgICAgICAgICAgIGlmIChvYnNlcnZlci5lcnJvcikge1xyXG4gICAgICAgICAgICAgICAgb2JzZXJ2ZXIuZXJyb3IoZXJyKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBTdWJqZWN0LnByb3RvdHlwZS5jb21wbGV0ZSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICBmb3IgKHZhciBfaSA9IDAsIF9hID0gdGhpcy5vYnNlcnZlcnM7IF9pIDwgX2EubGVuZ3RoOyBfaSsrKSB7XHJcbiAgICAgICAgICAgIHZhciBvYnNlcnZlciA9IF9hW19pXTtcclxuICAgICAgICAgICAgaWYgKG9ic2VydmVyLmNvbXBsZXRlKSB7XHJcbiAgICAgICAgICAgICAgICBvYnNlcnZlci5jb21wbGV0ZSgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIFN1YmplY3QucHJvdG90eXBlLnN1YnNjcmliZSA9IGZ1bmN0aW9uIChvYnNlcnZlcikge1xyXG4gICAgICAgIHRoaXMub2JzZXJ2ZXJzLnB1c2gob2JzZXJ2ZXIpO1xyXG4gICAgICAgIHJldHVybiBuZXcgU3ViamVjdFN1YnNjcmlwdGlvbih0aGlzLCBvYnNlcnZlcik7XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIFN1YmplY3Q7XHJcbn0oKSk7XHJcbmV4cG9ydCB7IFN1YmplY3QgfTtcclxudmFyIFN1YmplY3RTdWJzY3JpcHRpb24gPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBTdWJqZWN0U3Vic2NyaXB0aW9uKHN1YmplY3QsIG9ic2VydmVyKSB7XHJcbiAgICAgICAgdGhpcy5zdWJqZWN0ID0gc3ViamVjdDtcclxuICAgICAgICB0aGlzLm9ic2VydmVyID0gb2JzZXJ2ZXI7XHJcbiAgICB9XHJcbiAgICBTdWJqZWN0U3Vic2NyaXB0aW9uLnByb3RvdHlwZS5kaXNwb3NlID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciBpbmRleCA9IHRoaXMuc3ViamVjdC5vYnNlcnZlcnMuaW5kZXhPZih0aGlzLm9ic2VydmVyKTtcclxuICAgICAgICBpZiAoaW5kZXggPiAtMSkge1xyXG4gICAgICAgICAgICB0aGlzLnN1YmplY3Qub2JzZXJ2ZXJzLnNwbGljZShpbmRleCwgMSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh0aGlzLnN1YmplY3Qub2JzZXJ2ZXJzLmxlbmd0aCA9PT0gMCkge1xyXG4gICAgICAgICAgICB0aGlzLnN1YmplY3QuY2FuY2VsQ2FsbGJhY2soKS5jYXRjaChmdW5jdGlvbiAoXykgeyB9KTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIFN1YmplY3RTdWJzY3JpcHRpb247XHJcbn0oKSk7XHJcbmV4cG9ydCB7IFN1YmplY3RTdWJzY3JpcHRpb24gfTtcclxudmFyIENvbnNvbGVMb2dnZXIgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBDb25zb2xlTG9nZ2VyKG1pbmltdW1Mb2dMZXZlbCkge1xyXG4gICAgICAgIHRoaXMubWluaW11bUxvZ0xldmVsID0gbWluaW11bUxvZ0xldmVsO1xyXG4gICAgfVxyXG4gICAgQ29uc29sZUxvZ2dlci5wcm90b3R5cGUubG9nID0gZnVuY3Rpb24gKGxvZ0xldmVsLCBtZXNzYWdlKSB7XHJcbiAgICAgICAgaWYgKGxvZ0xldmVsID49IHRoaXMubWluaW11bUxvZ0xldmVsKSB7XHJcbiAgICAgICAgICAgIHN3aXRjaCAobG9nTGV2ZWwpIHtcclxuICAgICAgICAgICAgICAgIGNhc2UgTG9nTGV2ZWwuQ3JpdGljYWw6XHJcbiAgICAgICAgICAgICAgICBjYXNlIExvZ0xldmVsLkVycm9yOlxyXG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoTG9nTGV2ZWxbbG9nTGV2ZWxdICsgXCI6IFwiICsgbWVzc2FnZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlIExvZ0xldmVsLldhcm5pbmc6XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS53YXJuKExvZ0xldmVsW2xvZ0xldmVsXSArIFwiOiBcIiArIG1lc3NhZ2UpO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSBMb2dMZXZlbC5JbmZvcm1hdGlvbjpcclxuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmluZm8oTG9nTGV2ZWxbbG9nTGV2ZWxdICsgXCI6IFwiICsgbWVzc2FnZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgICAgICAgIC8vIGNvbnNvbGUuZGVidWcgb25seSBnb2VzIHRvIGF0dGFjaGVkIGRlYnVnZ2VycyBpbiBOb2RlLCBzbyB3ZSB1c2UgY29uc29sZS5sb2cgZm9yIFRyYWNlIGFuZCBEZWJ1Z1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKExvZ0xldmVsW2xvZ0xldmVsXSArIFwiOiBcIiArIG1lc3NhZ2UpO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIHJldHVybiBDb25zb2xlTG9nZ2VyO1xyXG59KCkpO1xyXG5leHBvcnQgeyBDb25zb2xlTG9nZ2VyIH07XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVV0aWxzLmpzLm1hcCIsIi8vIENvcHlyaWdodCAoYykgLk5FVCBGb3VuZGF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxyXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wLiBTZWUgTGljZW5zZS50eHQgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbi5cclxuLy8gVGhpcyB3aWxsIGJlIHRyZWF0ZWQgYXMgYSBiaXQgZmxhZyBpbiB0aGUgZnV0dXJlLCBzbyB3ZSBrZWVwIGl0IHVzaW5nIHBvd2VyLW9mLXR3byB2YWx1ZXMuXHJcbi8qKiBTcGVjaWZpZXMgYSBzcGVjaWZpYyBIVFRQIHRyYW5zcG9ydCB0eXBlLiAqL1xyXG5leHBvcnQgdmFyIEh0dHBUcmFuc3BvcnRUeXBlO1xyXG4oZnVuY3Rpb24gKEh0dHBUcmFuc3BvcnRUeXBlKSB7XHJcbiAgICAvKiogU3BlY2lmaWVzIG5vIHRyYW5zcG9ydCBwcmVmZXJlbmNlLiAqL1xyXG4gICAgSHR0cFRyYW5zcG9ydFR5cGVbSHR0cFRyYW5zcG9ydFR5cGVbXCJOb25lXCJdID0gMF0gPSBcIk5vbmVcIjtcclxuICAgIC8qKiBTcGVjaWZpZXMgdGhlIFdlYlNvY2tldHMgdHJhbnNwb3J0LiAqL1xyXG4gICAgSHR0cFRyYW5zcG9ydFR5cGVbSHR0cFRyYW5zcG9ydFR5cGVbXCJXZWJTb2NrZXRzXCJdID0gMV0gPSBcIldlYlNvY2tldHNcIjtcclxuICAgIC8qKiBTcGVjaWZpZXMgdGhlIFNlcnZlci1TZW50IEV2ZW50cyB0cmFuc3BvcnQuICovXHJcbiAgICBIdHRwVHJhbnNwb3J0VHlwZVtIdHRwVHJhbnNwb3J0VHlwZVtcIlNlcnZlclNlbnRFdmVudHNcIl0gPSAyXSA9IFwiU2VydmVyU2VudEV2ZW50c1wiO1xyXG4gICAgLyoqIFNwZWNpZmllcyB0aGUgTG9uZyBQb2xsaW5nIHRyYW5zcG9ydC4gKi9cclxuICAgIEh0dHBUcmFuc3BvcnRUeXBlW0h0dHBUcmFuc3BvcnRUeXBlW1wiTG9uZ1BvbGxpbmdcIl0gPSA0XSA9IFwiTG9uZ1BvbGxpbmdcIjtcclxufSkoSHR0cFRyYW5zcG9ydFR5cGUgfHwgKEh0dHBUcmFuc3BvcnRUeXBlID0ge30pKTtcclxuLyoqIFNwZWNpZmllcyB0aGUgdHJhbnNmZXIgZm9ybWF0IGZvciBhIGNvbm5lY3Rpb24uICovXHJcbmV4cG9ydCB2YXIgVHJhbnNmZXJGb3JtYXQ7XHJcbihmdW5jdGlvbiAoVHJhbnNmZXJGb3JtYXQpIHtcclxuICAgIC8qKiBTcGVjaWZpZXMgdGhhdCBvbmx5IHRleHQgZGF0YSB3aWxsIGJlIHRyYW5zbWl0dGVkIG92ZXIgdGhlIGNvbm5lY3Rpb24uICovXHJcbiAgICBUcmFuc2ZlckZvcm1hdFtUcmFuc2ZlckZvcm1hdFtcIlRleHRcIl0gPSAxXSA9IFwiVGV4dFwiO1xyXG4gICAgLyoqIFNwZWNpZmllcyB0aGF0IGJpbmFyeSBkYXRhIHdpbGwgYmUgdHJhbnNtaXR0ZWQgb3ZlciB0aGUgY29ubmVjdGlvbi4gKi9cclxuICAgIFRyYW5zZmVyRm9ybWF0W1RyYW5zZmVyRm9ybWF0W1wiQmluYXJ5XCJdID0gMl0gPSBcIkJpbmFyeVwiO1xyXG59KShUcmFuc2ZlckZvcm1hdCB8fCAoVHJhbnNmZXJGb3JtYXQgPSB7fSkpO1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1JVHJhbnNwb3J0LmpzLm1hcCIsIi8vIENvcHlyaWdodCAoYykgLk5FVCBGb3VuZGF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxyXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wLiBTZWUgTGljZW5zZS50eHQgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbi5cclxuaW1wb3J0ICogYXMgdHNsaWJfMSBmcm9tIFwidHNsaWJcIjtcclxuaW1wb3J0IHsgSGFuZHNoYWtlUHJvdG9jb2wgfSBmcm9tIFwiLi9IYW5kc2hha2VQcm90b2NvbFwiO1xyXG5pbXBvcnQgeyBNZXNzYWdlVHlwZSB9IGZyb20gXCIuL0lIdWJQcm90b2NvbFwiO1xyXG5pbXBvcnQgeyBMb2dMZXZlbCB9IGZyb20gXCIuL0lMb2dnZXJcIjtcclxuaW1wb3J0IHsgQXJnLCBTdWJqZWN0IH0gZnJvbSBcIi4vVXRpbHNcIjtcclxudmFyIERFRkFVTFRfVElNRU9VVF9JTl9NUyA9IDMwICogMTAwMDtcclxuLyoqIFJlcHJlc2VudHMgYSBjb25uZWN0aW9uIHRvIGEgU2lnbmFsUiBIdWIuICovXHJcbnZhciBIdWJDb25uZWN0aW9uID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gSHViQ29ubmVjdGlvbihjb25uZWN0aW9uLCBsb2dnZXIsIHByb3RvY29sKSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICBBcmcuaXNSZXF1aXJlZChjb25uZWN0aW9uLCBcImNvbm5lY3Rpb25cIik7XHJcbiAgICAgICAgQXJnLmlzUmVxdWlyZWQobG9nZ2VyLCBcImxvZ2dlclwiKTtcclxuICAgICAgICBBcmcuaXNSZXF1aXJlZChwcm90b2NvbCwgXCJwcm90b2NvbFwiKTtcclxuICAgICAgICB0aGlzLnNlcnZlclRpbWVvdXRJbk1pbGxpc2Vjb25kcyA9IERFRkFVTFRfVElNRU9VVF9JTl9NUztcclxuICAgICAgICB0aGlzLmxvZ2dlciA9IGxvZ2dlcjtcclxuICAgICAgICB0aGlzLnByb3RvY29sID0gcHJvdG9jb2w7XHJcbiAgICAgICAgdGhpcy5jb25uZWN0aW9uID0gY29ubmVjdGlvbjtcclxuICAgICAgICB0aGlzLmhhbmRzaGFrZVByb3RvY29sID0gbmV3IEhhbmRzaGFrZVByb3RvY29sKCk7XHJcbiAgICAgICAgdGhpcy5jb25uZWN0aW9uLm9ucmVjZWl2ZSA9IGZ1bmN0aW9uIChkYXRhKSB7IHJldHVybiBfdGhpcy5wcm9jZXNzSW5jb21pbmdEYXRhKGRhdGEpOyB9O1xyXG4gICAgICAgIHRoaXMuY29ubmVjdGlvbi5vbmNsb3NlID0gZnVuY3Rpb24gKGVycm9yKSB7IHJldHVybiBfdGhpcy5jb25uZWN0aW9uQ2xvc2VkKGVycm9yKTsgfTtcclxuICAgICAgICB0aGlzLmNhbGxiYWNrcyA9IHt9O1xyXG4gICAgICAgIHRoaXMubWV0aG9kcyA9IHt9O1xyXG4gICAgICAgIHRoaXMuY2xvc2VkQ2FsbGJhY2tzID0gW107XHJcbiAgICAgICAgdGhpcy5pZCA9IDA7XHJcbiAgICB9XHJcbiAgICAvKiogQGludGVybmFsICovXHJcbiAgICAvLyBVc2luZyBhIHB1YmxpYyBzdGF0aWMgZmFjdG9yeSBtZXRob2QgbWVhbnMgd2UgY2FuIGhhdmUgYSBwcml2YXRlIGNvbnN0cnVjdG9yIGFuZCBhbiBfaW50ZXJuYWxfXHJcbiAgICAvLyBjcmVhdGUgbWV0aG9kIHRoYXQgY2FuIGJlIHVzZWQgYnkgSHViQ29ubmVjdGlvbkJ1aWxkZXIuIEFuIFwiaW50ZXJuYWxcIiBjb25zdHJ1Y3RvciB3b3VsZCBqdXN0XHJcbiAgICAvLyBiZSBzdHJpcHBlZCBhd2F5IGFuZCB0aGUgJy5kLnRzJyBmaWxlIHdvdWxkIGhhdmUgbm8gY29uc3RydWN0b3IsIHdoaWNoIGlzIGludGVycHJldGVkIGFzIGFcclxuICAgIC8vIHB1YmxpYyBwYXJhbWV0ZXItbGVzcyBjb25zdHJ1Y3Rvci5cclxuICAgIEh1YkNvbm5lY3Rpb24uY3JlYXRlID0gZnVuY3Rpb24gKGNvbm5lY3Rpb24sIGxvZ2dlciwgcHJvdG9jb2wpIHtcclxuICAgICAgICByZXR1cm4gbmV3IEh1YkNvbm5lY3Rpb24oY29ubmVjdGlvbiwgbG9nZ2VyLCBwcm90b2NvbCk7XHJcbiAgICB9O1xyXG4gICAgLyoqIFN0YXJ0cyB0aGUgY29ubmVjdGlvbi5cclxuICAgICAqXHJcbiAgICAgKiBAcmV0dXJucyB7UHJvbWlzZTx2b2lkPn0gQSBQcm9taXNlIHRoYXQgcmVzb2x2ZXMgd2hlbiB0aGUgY29ubmVjdGlvbiBoYXMgYmVlbiBzdWNjZXNzZnVsbHkgZXN0YWJsaXNoZWQsIG9yIHJlamVjdHMgd2l0aCBhbiBlcnJvci5cclxuICAgICAqL1xyXG4gICAgSHViQ29ubmVjdGlvbi5wcm90b3R5cGUuc3RhcnQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRzbGliXzEuX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHZhciBoYW5kc2hha2VSZXF1ZXN0O1xyXG4gICAgICAgICAgICByZXR1cm4gdHNsaWJfMS5fX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2EpIHtcclxuICAgICAgICAgICAgICAgIHN3aXRjaCAoX2EubGFiZWwpIHtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDA6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGhhbmRzaGFrZVJlcXVlc3QgPSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcm90b2NvbDogdGhpcy5wcm90b2NvbC5uYW1lLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmVyc2lvbjogdGhpcy5wcm90b2NvbC52ZXJzaW9uLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmxvZ2dlci5sb2coTG9nTGV2ZWwuRGVidWcsIFwiU3RhcnRpbmcgSHViQ29ubmVjdGlvbi5cIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucmVjZWl2ZWRIYW5kc2hha2VSZXNwb25zZSA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQgLyp5aWVsZCovLCB0aGlzLmNvbm5lY3Rpb24uc3RhcnQodGhpcy5wcm90b2NvbC50cmFuc2ZlckZvcm1hdCldO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMTpcclxuICAgICAgICAgICAgICAgICAgICAgICAgX2Euc2VudCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmxvZ2dlci5sb2coTG9nTGV2ZWwuRGVidWcsIFwiU2VuZGluZyBoYW5kc2hha2UgcmVxdWVzdC5cIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCAvKnlpZWxkKi8sIHRoaXMuY29ubmVjdGlvbi5zZW5kKHRoaXMuaGFuZHNoYWtlUHJvdG9jb2wud3JpdGVIYW5kc2hha2VSZXF1ZXN0KGhhbmRzaGFrZVJlcXVlc3QpKV07XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAyOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBfYS5zZW50KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubG9nZ2VyLmxvZyhMb2dMZXZlbC5JbmZvcm1hdGlvbiwgXCJVc2luZyBIdWJQcm90b2NvbCAnXCIgKyB0aGlzLnByb3RvY29sLm5hbWUgKyBcIicuXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBkZWZlbnNpdmVseSBjbGVhbnVwIHRpbWVvdXQgaW4gY2FzZSB3ZSByZWNlaXZlIGEgbWVzc2FnZSBmcm9tIHRoZSBzZXJ2ZXIgYmVmb3JlIHdlIGZpbmlzaCBzdGFydFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmNsZWFudXBUaW1lb3V0KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY29uZmlndXJlVGltZW91dCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzIgLypyZXR1cm4qL107XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuICAgIC8qKiBTdG9wcyB0aGUgY29ubmVjdGlvbi5cclxuICAgICAqXHJcbiAgICAgKiBAcmV0dXJucyB7UHJvbWlzZTx2b2lkPn0gQSBQcm9taXNlIHRoYXQgcmVzb2x2ZXMgd2hlbiB0aGUgY29ubmVjdGlvbiBoYXMgYmVlbiBzdWNjZXNzZnVsbHkgdGVybWluYXRlZCwgb3IgcmVqZWN0cyB3aXRoIGFuIGVycm9yLlxyXG4gICAgICovXHJcbiAgICBIdWJDb25uZWN0aW9uLnByb3RvdHlwZS5zdG9wID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHRoaXMubG9nZ2VyLmxvZyhMb2dMZXZlbC5EZWJ1ZywgXCJTdG9wcGluZyBIdWJDb25uZWN0aW9uLlwiKTtcclxuICAgICAgICB0aGlzLmNsZWFudXBUaW1lb3V0KCk7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuY29ubmVjdGlvbi5zdG9wKCk7XHJcbiAgICB9O1xyXG4gICAgLyoqIEludm9rZXMgYSBzdHJlYW1pbmcgaHViIG1ldGhvZCBvbiB0aGUgc2VydmVyIHVzaW5nIHRoZSBzcGVjaWZpZWQgbmFtZSBhbmQgYXJndW1lbnRzLlxyXG4gICAgICpcclxuICAgICAqIEB0eXBlcGFyYW0gVCBUaGUgdHlwZSBvZiB0aGUgaXRlbXMgcmV0dXJuZWQgYnkgdGhlIHNlcnZlci5cclxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBtZXRob2ROYW1lIFRoZSBuYW1lIG9mIHRoZSBzZXJ2ZXIgbWV0aG9kIHRvIGludm9rZS5cclxuICAgICAqIEBwYXJhbSB7YW55W119IGFyZ3MgVGhlIGFyZ3VtZW50cyB1c2VkIHRvIGludm9rZSB0aGUgc2VydmVyIG1ldGhvZC5cclxuICAgICAqIEByZXR1cm5zIHtJU3RyZWFtUmVzdWx0PFQ+fSBBbiBvYmplY3QgdGhhdCB5aWVsZHMgcmVzdWx0cyBmcm9tIHRoZSBzZXJ2ZXIgYXMgdGhleSBhcmUgcmVjZWl2ZWQuXHJcbiAgICAgKi9cclxuICAgIEh1YkNvbm5lY3Rpb24ucHJvdG90eXBlLnN0cmVhbSA9IGZ1bmN0aW9uIChtZXRob2ROYW1lKSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICB2YXIgYXJncyA9IFtdO1xyXG4gICAgICAgIGZvciAodmFyIF9pID0gMTsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XHJcbiAgICAgICAgICAgIGFyZ3NbX2kgLSAxXSA9IGFyZ3VtZW50c1tfaV07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHZhciBpbnZvY2F0aW9uRGVzY3JpcHRvciA9IHRoaXMuY3JlYXRlU3RyZWFtSW52b2NhdGlvbihtZXRob2ROYW1lLCBhcmdzKTtcclxuICAgICAgICB2YXIgc3ViamVjdCA9IG5ldyBTdWJqZWN0KGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgdmFyIGNhbmNlbEludm9jYXRpb24gPSBfdGhpcy5jcmVhdGVDYW5jZWxJbnZvY2F0aW9uKGludm9jYXRpb25EZXNjcmlwdG9yLmludm9jYXRpb25JZCk7XHJcbiAgICAgICAgICAgIHZhciBjYW5jZWxNZXNzYWdlID0gX3RoaXMucHJvdG9jb2wud3JpdGVNZXNzYWdlKGNhbmNlbEludm9jYXRpb24pO1xyXG4gICAgICAgICAgICBkZWxldGUgX3RoaXMuY2FsbGJhY2tzW2ludm9jYXRpb25EZXNjcmlwdG9yLmludm9jYXRpb25JZF07XHJcbiAgICAgICAgICAgIHJldHVybiBfdGhpcy5jb25uZWN0aW9uLnNlbmQoY2FuY2VsTWVzc2FnZSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgdGhpcy5jYWxsYmFja3NbaW52b2NhdGlvbkRlc2NyaXB0b3IuaW52b2NhdGlvbklkXSA9IGZ1bmN0aW9uIChpbnZvY2F0aW9uRXZlbnQsIGVycm9yKSB7XHJcbiAgICAgICAgICAgIGlmIChlcnJvcikge1xyXG4gICAgICAgICAgICAgICAgc3ViamVjdC5lcnJvcihlcnJvcik7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKGludm9jYXRpb25FdmVudC50eXBlID09PSBNZXNzYWdlVHlwZS5Db21wbGV0aW9uKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoaW52b2NhdGlvbkV2ZW50LmVycm9yKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgc3ViamVjdC5lcnJvcihuZXcgRXJyb3IoaW52b2NhdGlvbkV2ZW50LmVycm9yKSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBzdWJqZWN0LmNvbXBsZXRlKCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBzdWJqZWN0Lm5leHQoKGludm9jYXRpb25FdmVudC5pdGVtKSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG4gICAgICAgIHZhciBtZXNzYWdlID0gdGhpcy5wcm90b2NvbC53cml0ZU1lc3NhZ2UoaW52b2NhdGlvbkRlc2NyaXB0b3IpO1xyXG4gICAgICAgIHRoaXMuY29ubmVjdGlvbi5zZW5kKG1lc3NhZ2UpXHJcbiAgICAgICAgICAgIC5jYXRjaChmdW5jdGlvbiAoZSkge1xyXG4gICAgICAgICAgICBzdWJqZWN0LmVycm9yKGUpO1xyXG4gICAgICAgICAgICBkZWxldGUgX3RoaXMuY2FsbGJhY2tzW2ludm9jYXRpb25EZXNjcmlwdG9yLmludm9jYXRpb25JZF07XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgcmV0dXJuIHN1YmplY3Q7XHJcbiAgICB9O1xyXG4gICAgLyoqIEludm9rZXMgYSBodWIgbWV0aG9kIG9uIHRoZSBzZXJ2ZXIgdXNpbmcgdGhlIHNwZWNpZmllZCBuYW1lIGFuZCBhcmd1bWVudHMuIERvZXMgbm90IHdhaXQgZm9yIGEgcmVzcG9uc2UgZnJvbSB0aGUgcmVjZWl2ZXIuXHJcbiAgICAgKlxyXG4gICAgICogVGhlIFByb21pc2UgcmV0dXJuZWQgYnkgdGhpcyBtZXRob2QgcmVzb2x2ZXMgd2hlbiB0aGUgY2xpZW50IGhhcyBzZW50IHRoZSBpbnZvY2F0aW9uIHRvIHRoZSBzZXJ2ZXIuIFRoZSBzZXJ2ZXIgbWF5IHN0aWxsXHJcbiAgICAgKiBiZSBwcm9jZXNzaW5nIHRoZSBpbnZvY2F0aW9uLlxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBtZXRob2ROYW1lIFRoZSBuYW1lIG9mIHRoZSBzZXJ2ZXIgbWV0aG9kIHRvIGludm9rZS5cclxuICAgICAqIEBwYXJhbSB7YW55W119IGFyZ3MgVGhlIGFyZ3VtZW50cyB1c2VkIHRvIGludm9rZSB0aGUgc2VydmVyIG1ldGhvZC5cclxuICAgICAqIEByZXR1cm5zIHtQcm9taXNlPHZvaWQ+fSBBIFByb21pc2UgdGhhdCByZXNvbHZlcyB3aGVuIHRoZSBpbnZvY2F0aW9uIGhhcyBiZWVuIHN1Y2Nlc3NmdWxseSBzZW50LCBvciByZWplY3RzIHdpdGggYW4gZXJyb3IuXHJcbiAgICAgKi9cclxuICAgIEh1YkNvbm5lY3Rpb24ucHJvdG90eXBlLnNlbmQgPSBmdW5jdGlvbiAobWV0aG9kTmFtZSkge1xyXG4gICAgICAgIHZhciBhcmdzID0gW107XHJcbiAgICAgICAgZm9yICh2YXIgX2kgPSAxOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcclxuICAgICAgICAgICAgYXJnc1tfaSAtIDFdID0gYXJndW1lbnRzW19pXTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdmFyIGludm9jYXRpb25EZXNjcmlwdG9yID0gdGhpcy5jcmVhdGVJbnZvY2F0aW9uKG1ldGhvZE5hbWUsIGFyZ3MsIHRydWUpO1xyXG4gICAgICAgIHZhciBtZXNzYWdlID0gdGhpcy5wcm90b2NvbC53cml0ZU1lc3NhZ2UoaW52b2NhdGlvbkRlc2NyaXB0b3IpO1xyXG4gICAgICAgIHJldHVybiB0aGlzLmNvbm5lY3Rpb24uc2VuZChtZXNzYWdlKTtcclxuICAgIH07XHJcbiAgICAvKiogSW52b2tlcyBhIGh1YiBtZXRob2Qgb24gdGhlIHNlcnZlciB1c2luZyB0aGUgc3BlY2lmaWVkIG5hbWUgYW5kIGFyZ3VtZW50cy5cclxuICAgICAqXHJcbiAgICAgKiBUaGUgUHJvbWlzZSByZXR1cm5lZCBieSB0aGlzIG1ldGhvZCByZXNvbHZlcyB3aGVuIHRoZSBzZXJ2ZXIgaW5kaWNhdGVzIGl0IGhhcyBmaW5pc2hlZCBpbnZva2luZyB0aGUgbWV0aG9kLiBXaGVuIHRoZSBwcm9taXNlXHJcbiAgICAgKiByZXNvbHZlcywgdGhlIHNlcnZlciBoYXMgZmluaXNoZWQgaW52b2tpbmcgdGhlIG1ldGhvZC4gSWYgdGhlIHNlcnZlciBtZXRob2QgcmV0dXJucyBhIHJlc3VsdCwgaXQgaXMgcHJvZHVjZWQgYXMgdGhlIHJlc3VsdCBvZlxyXG4gICAgICogcmVzb2x2aW5nIHRoZSBQcm9taXNlLlxyXG4gICAgICpcclxuICAgICAqIEB0eXBlcGFyYW0gVCBUaGUgZXhwZWN0ZWQgcmV0dXJuIHR5cGUuXHJcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gbWV0aG9kTmFtZSBUaGUgbmFtZSBvZiB0aGUgc2VydmVyIG1ldGhvZCB0byBpbnZva2UuXHJcbiAgICAgKiBAcGFyYW0ge2FueVtdfSBhcmdzIFRoZSBhcmd1bWVudHMgdXNlZCB0byBpbnZva2UgdGhlIHNlcnZlciBtZXRob2QuXHJcbiAgICAgKiBAcmV0dXJucyB7UHJvbWlzZTxUPn0gQSBQcm9taXNlIHRoYXQgcmVzb2x2ZXMgd2l0aCB0aGUgcmVzdWx0IG9mIHRoZSBzZXJ2ZXIgbWV0aG9kIChpZiBhbnkpLCBvciByZWplY3RzIHdpdGggYW4gZXJyb3IuXHJcbiAgICAgKi9cclxuICAgIEh1YkNvbm5lY3Rpb24ucHJvdG90eXBlLmludm9rZSA9IGZ1bmN0aW9uIChtZXRob2ROYW1lKSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICB2YXIgYXJncyA9IFtdO1xyXG4gICAgICAgIGZvciAodmFyIF9pID0gMTsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XHJcbiAgICAgICAgICAgIGFyZ3NbX2kgLSAxXSA9IGFyZ3VtZW50c1tfaV07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHZhciBpbnZvY2F0aW9uRGVzY3JpcHRvciA9IHRoaXMuY3JlYXRlSW52b2NhdGlvbihtZXRob2ROYW1lLCBhcmdzLCBmYWxzZSk7XHJcbiAgICAgICAgdmFyIHAgPSBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XHJcbiAgICAgICAgICAgIF90aGlzLmNhbGxiYWNrc1tpbnZvY2F0aW9uRGVzY3JpcHRvci5pbnZvY2F0aW9uSWRdID0gZnVuY3Rpb24gKGludm9jYXRpb25FdmVudCwgZXJyb3IpIHtcclxuICAgICAgICAgICAgICAgIGlmIChlcnJvcikge1xyXG4gICAgICAgICAgICAgICAgICAgIHJlamVjdChlcnJvcik7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKGludm9jYXRpb25FdmVudC50eXBlID09PSBNZXNzYWdlVHlwZS5Db21wbGV0aW9uKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGNvbXBsZXRpb25NZXNzYWdlID0gaW52b2NhdGlvbkV2ZW50O1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChjb21wbGV0aW9uTWVzc2FnZS5lcnJvcikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZWplY3QobmV3IEVycm9yKGNvbXBsZXRpb25NZXNzYWdlLmVycm9yKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlKGNvbXBsZXRpb25NZXNzYWdlLnJlc3VsdCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmVqZWN0KG5ldyBFcnJvcihcIlVuZXhwZWN0ZWQgbWVzc2FnZSB0eXBlOiBcIiArIGludm9jYXRpb25FdmVudC50eXBlKSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIHZhciBtZXNzYWdlID0gX3RoaXMucHJvdG9jb2wud3JpdGVNZXNzYWdlKGludm9jYXRpb25EZXNjcmlwdG9yKTtcclxuICAgICAgICAgICAgX3RoaXMuY29ubmVjdGlvbi5zZW5kKG1lc3NhZ2UpXHJcbiAgICAgICAgICAgICAgICAuY2F0Y2goZnVuY3Rpb24gKGUpIHtcclxuICAgICAgICAgICAgICAgIHJlamVjdChlKTtcclxuICAgICAgICAgICAgICAgIGRlbGV0ZSBfdGhpcy5jYWxsYmFja3NbaW52b2NhdGlvbkRlc2NyaXB0b3IuaW52b2NhdGlvbklkXTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgcmV0dXJuIHA7XHJcbiAgICB9O1xyXG4gICAgLyoqIFJlZ2lzdGVycyBhIGhhbmRsZXIgdGhhdCB3aWxsIGJlIGludm9rZWQgd2hlbiB0aGUgaHViIG1ldGhvZCB3aXRoIHRoZSBzcGVjaWZpZWQgbWV0aG9kIG5hbWUgaXMgaW52b2tlZC5cclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gbWV0aG9kTmFtZSBUaGUgbmFtZSBvZiB0aGUgaHViIG1ldGhvZCB0byBkZWZpbmUuXHJcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBuZXdNZXRob2QgVGhlIGhhbmRsZXIgdGhhdCB3aWxsIGJlIHJhaXNlZCB3aGVuIHRoZSBodWIgbWV0aG9kIGlzIGludm9rZWQuXHJcbiAgICAgKi9cclxuICAgIEh1YkNvbm5lY3Rpb24ucHJvdG90eXBlLm9uID0gZnVuY3Rpb24gKG1ldGhvZE5hbWUsIG5ld01ldGhvZCkge1xyXG4gICAgICAgIGlmICghbWV0aG9kTmFtZSB8fCAhbmV3TWV0aG9kKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgbWV0aG9kTmFtZSA9IG1ldGhvZE5hbWUudG9Mb3dlckNhc2UoKTtcclxuICAgICAgICBpZiAoIXRoaXMubWV0aG9kc1ttZXRob2ROYW1lXSkge1xyXG4gICAgICAgICAgICB0aGlzLm1ldGhvZHNbbWV0aG9kTmFtZV0gPSBbXTtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gUHJldmVudGluZyBhZGRpbmcgdGhlIHNhbWUgaGFuZGxlciBtdWx0aXBsZSB0aW1lcy5cclxuICAgICAgICBpZiAodGhpcy5tZXRob2RzW21ldGhvZE5hbWVdLmluZGV4T2YobmV3TWV0aG9kKSAhPT0gLTEpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLm1ldGhvZHNbbWV0aG9kTmFtZV0ucHVzaChuZXdNZXRob2QpO1xyXG4gICAgfTtcclxuICAgIEh1YkNvbm5lY3Rpb24ucHJvdG90eXBlLm9mZiA9IGZ1bmN0aW9uIChtZXRob2ROYW1lLCBtZXRob2QpIHtcclxuICAgICAgICBpZiAoIW1ldGhvZE5hbWUpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICBtZXRob2ROYW1lID0gbWV0aG9kTmFtZS50b0xvd2VyQ2FzZSgpO1xyXG4gICAgICAgIHZhciBoYW5kbGVycyA9IHRoaXMubWV0aG9kc1ttZXRob2ROYW1lXTtcclxuICAgICAgICBpZiAoIWhhbmRsZXJzKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKG1ldGhvZCkge1xyXG4gICAgICAgICAgICB2YXIgcmVtb3ZlSWR4ID0gaGFuZGxlcnMuaW5kZXhPZihtZXRob2QpO1xyXG4gICAgICAgICAgICBpZiAocmVtb3ZlSWR4ICE9PSAtMSkge1xyXG4gICAgICAgICAgICAgICAgaGFuZGxlcnMuc3BsaWNlKHJlbW92ZUlkeCwgMSk7XHJcbiAgICAgICAgICAgICAgICBpZiAoaGFuZGxlcnMubGVuZ3RoID09PSAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZGVsZXRlIHRoaXMubWV0aG9kc1ttZXRob2ROYW1lXTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgZGVsZXRlIHRoaXMubWV0aG9kc1ttZXRob2ROYW1lXTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgLyoqIFJlZ2lzdGVycyBhIGhhbmRsZXIgdGhhdCB3aWxsIGJlIGludm9rZWQgd2hlbiB0aGUgY29ubmVjdGlvbiBpcyBjbG9zZWQuXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGJhY2sgVGhlIGhhbmRsZXIgdGhhdCB3aWxsIGJlIGludm9rZWQgd2hlbiB0aGUgY29ubmVjdGlvbiBpcyBjbG9zZWQuIE9wdGlvbmFsbHkgcmVjZWl2ZXMgYSBzaW5nbGUgYXJndW1lbnQgY29udGFpbmluZyB0aGUgZXJyb3IgdGhhdCBjYXVzZWQgdGhlIGNvbm5lY3Rpb24gdG8gY2xvc2UgKGlmIGFueSkuXHJcbiAgICAgKi9cclxuICAgIEh1YkNvbm5lY3Rpb24ucHJvdG90eXBlLm9uY2xvc2UgPSBmdW5jdGlvbiAoY2FsbGJhY2spIHtcclxuICAgICAgICBpZiAoY2FsbGJhY2spIHtcclxuICAgICAgICAgICAgdGhpcy5jbG9zZWRDYWxsYmFja3MucHVzaChjYWxsYmFjayk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIEh1YkNvbm5lY3Rpb24ucHJvdG90eXBlLnByb2Nlc3NJbmNvbWluZ0RhdGEgPSBmdW5jdGlvbiAoZGF0YSkge1xyXG4gICAgICAgIHRoaXMuY2xlYW51cFRpbWVvdXQoKTtcclxuICAgICAgICBpZiAoIXRoaXMucmVjZWl2ZWRIYW5kc2hha2VSZXNwb25zZSkge1xyXG4gICAgICAgICAgICBkYXRhID0gdGhpcy5wcm9jZXNzSGFuZHNoYWtlUmVzcG9uc2UoZGF0YSk7XHJcbiAgICAgICAgICAgIHRoaXMucmVjZWl2ZWRIYW5kc2hha2VSZXNwb25zZSA9IHRydWU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIERhdGEgbWF5IGhhdmUgYWxsIGJlZW4gcmVhZCB3aGVuIHByb2Nlc3NpbmcgaGFuZHNoYWtlIHJlc3BvbnNlXHJcbiAgICAgICAgaWYgKGRhdGEpIHtcclxuICAgICAgICAgICAgLy8gUGFyc2UgdGhlIG1lc3NhZ2VzXHJcbiAgICAgICAgICAgIHZhciBtZXNzYWdlcyA9IHRoaXMucHJvdG9jb2wucGFyc2VNZXNzYWdlcyhkYXRhLCB0aGlzLmxvZ2dlcik7XHJcbiAgICAgICAgICAgIGZvciAodmFyIF9pID0gMCwgbWVzc2FnZXNfMSA9IG1lc3NhZ2VzOyBfaSA8IG1lc3NhZ2VzXzEubGVuZ3RoOyBfaSsrKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgbWVzc2FnZSA9IG1lc3NhZ2VzXzFbX2ldO1xyXG4gICAgICAgICAgICAgICAgc3dpdGNoIChtZXNzYWdlLnR5cGUpIHtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIE1lc3NhZ2VUeXBlLkludm9jYXRpb246XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuaW52b2tlQ2xpZW50TWV0aG9kKG1lc3NhZ2UpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIE1lc3NhZ2VUeXBlLlN0cmVhbUl0ZW06XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBNZXNzYWdlVHlwZS5Db21wbGV0aW9uOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgY2FsbGJhY2sgPSB0aGlzLmNhbGxiYWNrc1ttZXNzYWdlLmludm9jYXRpb25JZF07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjYWxsYmFjayAhPSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAobWVzc2FnZS50eXBlID09PSBNZXNzYWdlVHlwZS5Db21wbGV0aW9uKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVsZXRlIHRoaXMuY2FsbGJhY2tzW21lc3NhZ2UuaW52b2NhdGlvbklkXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrKG1lc3NhZ2UpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgTWVzc2FnZVR5cGUuUGluZzpcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gRG9uJ3QgY2FyZSBhYm91dCBwaW5nc1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIE1lc3NhZ2VUeXBlLkNsb3NlOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmxvZ2dlci5sb2coTG9nTGV2ZWwuSW5mb3JtYXRpb24sIFwiQ2xvc2UgbWVzc2FnZSByZWNlaXZlZCBmcm9tIHNlcnZlci5cIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY29ubmVjdGlvbi5zdG9wKG1lc3NhZ2UuZXJyb3IgPyBuZXcgRXJyb3IoXCJTZXJ2ZXIgcmV0dXJuZWQgYW4gZXJyb3Igb24gY2xvc2U6IFwiICsgbWVzc2FnZS5lcnJvcikgOiBudWxsKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5sb2dnZXIubG9nKExvZ0xldmVsLldhcm5pbmcsIFwiSW52YWxpZCBtZXNzYWdlIHR5cGU6IFwiICsgbWVzc2FnZS50eXBlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5jb25maWd1cmVUaW1lb3V0KCk7XHJcbiAgICB9O1xyXG4gICAgSHViQ29ubmVjdGlvbi5wcm90b3R5cGUucHJvY2Vzc0hhbmRzaGFrZVJlc3BvbnNlID0gZnVuY3Rpb24gKGRhdGEpIHtcclxuICAgICAgICB2YXIgcmVzcG9uc2VNZXNzYWdlO1xyXG4gICAgICAgIHZhciByZW1haW5pbmdEYXRhO1xyXG4gICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgIF9hID0gdGhpcy5oYW5kc2hha2VQcm90b2NvbC5wYXJzZUhhbmRzaGFrZVJlc3BvbnNlKGRhdGEpLCByZW1haW5pbmdEYXRhID0gX2FbMF0sIHJlc3BvbnNlTWVzc2FnZSA9IF9hWzFdO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjYXRjaCAoZSkge1xyXG4gICAgICAgICAgICB2YXIgbWVzc2FnZSA9IFwiRXJyb3IgcGFyc2luZyBoYW5kc2hha2UgcmVzcG9uc2U6IFwiICsgZTtcclxuICAgICAgICAgICAgdGhpcy5sb2dnZXIubG9nKExvZ0xldmVsLkVycm9yLCBtZXNzYWdlKTtcclxuICAgICAgICAgICAgdmFyIGVycm9yID0gbmV3IEVycm9yKG1lc3NhZ2UpO1xyXG4gICAgICAgICAgICB0aGlzLmNvbm5lY3Rpb24uc3RvcChlcnJvcik7XHJcbiAgICAgICAgICAgIHRocm93IGVycm9yO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAocmVzcG9uc2VNZXNzYWdlLmVycm9yKSB7XHJcbiAgICAgICAgICAgIHZhciBtZXNzYWdlID0gXCJTZXJ2ZXIgcmV0dXJuZWQgaGFuZHNoYWtlIGVycm9yOiBcIiArIHJlc3BvbnNlTWVzc2FnZS5lcnJvcjtcclxuICAgICAgICAgICAgdGhpcy5sb2dnZXIubG9nKExvZ0xldmVsLkVycm9yLCBtZXNzYWdlKTtcclxuICAgICAgICAgICAgdGhpcy5jb25uZWN0aW9uLnN0b3AobmV3IEVycm9yKG1lc3NhZ2UpKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMubG9nZ2VyLmxvZyhMb2dMZXZlbC5EZWJ1ZywgXCJTZXJ2ZXIgaGFuZHNoYWtlIGNvbXBsZXRlLlwiKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHJlbWFpbmluZ0RhdGE7XHJcbiAgICAgICAgdmFyIF9hO1xyXG4gICAgfTtcclxuICAgIEh1YkNvbm5lY3Rpb24ucHJvdG90eXBlLmNvbmZpZ3VyZVRpbWVvdXQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICBpZiAoIXRoaXMuY29ubmVjdGlvbi5mZWF0dXJlcyB8fCAhdGhpcy5jb25uZWN0aW9uLmZlYXR1cmVzLmluaGVyZW50S2VlcEFsaXZlKSB7XHJcbiAgICAgICAgICAgIC8vIFNldCB0aGUgdGltZW91dCB0aW1lclxyXG4gICAgICAgICAgICB0aGlzLnRpbWVvdXRIYW5kbGUgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHsgcmV0dXJuIF90aGlzLnNlcnZlclRpbWVvdXQoKTsgfSwgdGhpcy5zZXJ2ZXJUaW1lb3V0SW5NaWxsaXNlY29uZHMpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBIdWJDb25uZWN0aW9uLnByb3RvdHlwZS5zZXJ2ZXJUaW1lb3V0ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIC8vIFRoZSBzZXJ2ZXIgaGFzbid0IHRhbGtlZCB0byB1cyBpbiBhIHdoaWxlLiBJdCBkb2Vzbid0IGxpa2UgdXMgYW55bW9yZSAuLi4gOihcclxuICAgICAgICAvLyBUZXJtaW5hdGUgdGhlIGNvbm5lY3Rpb25cclxuICAgICAgICB0aGlzLmNvbm5lY3Rpb24uc3RvcChuZXcgRXJyb3IoXCJTZXJ2ZXIgdGltZW91dCBlbGFwc2VkIHdpdGhvdXQgcmVjZWl2aW5nIGEgbWVzc2FnZSBmcm9tIHRoZSBzZXJ2ZXIuXCIpKTtcclxuICAgIH07XHJcbiAgICBIdWJDb25uZWN0aW9uLnByb3RvdHlwZS5pbnZva2VDbGllbnRNZXRob2QgPSBmdW5jdGlvbiAoaW52b2NhdGlvbk1lc3NhZ2UpIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgIHZhciBtZXRob2RzID0gdGhpcy5tZXRob2RzW2ludm9jYXRpb25NZXNzYWdlLnRhcmdldC50b0xvd2VyQ2FzZSgpXTtcclxuICAgICAgICBpZiAobWV0aG9kcykge1xyXG4gICAgICAgICAgICBtZXRob2RzLmZvckVhY2goZnVuY3Rpb24gKG0pIHsgcmV0dXJuIG0uYXBwbHkoX3RoaXMsIGludm9jYXRpb25NZXNzYWdlLmFyZ3VtZW50cyk7IH0pO1xyXG4gICAgICAgICAgICBpZiAoaW52b2NhdGlvbk1lc3NhZ2UuaW52b2NhdGlvbklkKSB7XHJcbiAgICAgICAgICAgICAgICAvLyBUaGlzIGlzIG5vdCBzdXBwb3J0ZWQgaW4gdjEuIFNvIHdlIHJldHVybiBhbiBlcnJvciB0byBhdm9pZCBibG9ja2luZyB0aGUgc2VydmVyIHdhaXRpbmcgZm9yIHRoZSByZXNwb25zZS5cclxuICAgICAgICAgICAgICAgIHZhciBtZXNzYWdlID0gXCJTZXJ2ZXIgcmVxdWVzdGVkIGEgcmVzcG9uc2UsIHdoaWNoIGlzIG5vdCBzdXBwb3J0ZWQgaW4gdGhpcyB2ZXJzaW9uIG9mIHRoZSBjbGllbnQuXCI7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmxvZ2dlci5sb2coTG9nTGV2ZWwuRXJyb3IsIG1lc3NhZ2UpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5jb25uZWN0aW9uLnN0b3AobmV3IEVycm9yKG1lc3NhZ2UpKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy5sb2dnZXIubG9nKExvZ0xldmVsLldhcm5pbmcsIFwiTm8gY2xpZW50IG1ldGhvZCB3aXRoIHRoZSBuYW1lICdcIiArIGludm9jYXRpb25NZXNzYWdlLnRhcmdldCArIFwiJyBmb3VuZC5cIik7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIEh1YkNvbm5lY3Rpb24ucHJvdG90eXBlLmNvbm5lY3Rpb25DbG9zZWQgPSBmdW5jdGlvbiAoZXJyb3IpIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgIHZhciBjYWxsYmFja3MgPSB0aGlzLmNhbGxiYWNrcztcclxuICAgICAgICB0aGlzLmNhbGxiYWNrcyA9IHt9O1xyXG4gICAgICAgIE9iamVjdC5rZXlzKGNhbGxiYWNrcylcclxuICAgICAgICAgICAgLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xyXG4gICAgICAgICAgICB2YXIgY2FsbGJhY2sgPSBjYWxsYmFja3Nba2V5XTtcclxuICAgICAgICAgICAgY2FsbGJhY2sodW5kZWZpbmVkLCBlcnJvciA/IGVycm9yIDogbmV3IEVycm9yKFwiSW52b2NhdGlvbiBjYW5jZWxlZCBkdWUgdG8gY29ubmVjdGlvbiBiZWluZyBjbG9zZWQuXCIpKTtcclxuICAgICAgICB9KTtcclxuICAgICAgICB0aGlzLmNsZWFudXBUaW1lb3V0KCk7XHJcbiAgICAgICAgdGhpcy5jbG9zZWRDYWxsYmFja3MuZm9yRWFjaChmdW5jdGlvbiAoYykgeyByZXR1cm4gYy5hcHBseShfdGhpcywgW2Vycm9yXSk7IH0pO1xyXG4gICAgfTtcclxuICAgIEh1YkNvbm5lY3Rpb24ucHJvdG90eXBlLmNsZWFudXBUaW1lb3V0ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIGlmICh0aGlzLnRpbWVvdXRIYW5kbGUpIHtcclxuICAgICAgICAgICAgY2xlYXJUaW1lb3V0KHRoaXMudGltZW91dEhhbmRsZSk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIEh1YkNvbm5lY3Rpb24ucHJvdG90eXBlLmNyZWF0ZUludm9jYXRpb24gPSBmdW5jdGlvbiAobWV0aG9kTmFtZSwgYXJncywgbm9uYmxvY2tpbmcpIHtcclxuICAgICAgICBpZiAobm9uYmxvY2tpbmcpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgICAgIGFyZ3VtZW50czogYXJncyxcclxuICAgICAgICAgICAgICAgIHRhcmdldDogbWV0aG9kTmFtZSxcclxuICAgICAgICAgICAgICAgIHR5cGU6IE1lc3NhZ2VUeXBlLkludm9jYXRpb24sXHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICB2YXIgaWQgPSB0aGlzLmlkO1xyXG4gICAgICAgICAgICB0aGlzLmlkKys7XHJcbiAgICAgICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgICAgICBhcmd1bWVudHM6IGFyZ3MsXHJcbiAgICAgICAgICAgICAgICBpbnZvY2F0aW9uSWQ6IGlkLnRvU3RyaW5nKCksXHJcbiAgICAgICAgICAgICAgICB0YXJnZXQ6IG1ldGhvZE5hbWUsXHJcbiAgICAgICAgICAgICAgICB0eXBlOiBNZXNzYWdlVHlwZS5JbnZvY2F0aW9uLFxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBIdWJDb25uZWN0aW9uLnByb3RvdHlwZS5jcmVhdGVTdHJlYW1JbnZvY2F0aW9uID0gZnVuY3Rpb24gKG1ldGhvZE5hbWUsIGFyZ3MpIHtcclxuICAgICAgICB2YXIgaWQgPSB0aGlzLmlkO1xyXG4gICAgICAgIHRoaXMuaWQrKztcclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICBhcmd1bWVudHM6IGFyZ3MsXHJcbiAgICAgICAgICAgIGludm9jYXRpb25JZDogaWQudG9TdHJpbmcoKSxcclxuICAgICAgICAgICAgdGFyZ2V0OiBtZXRob2ROYW1lLFxyXG4gICAgICAgICAgICB0eXBlOiBNZXNzYWdlVHlwZS5TdHJlYW1JbnZvY2F0aW9uLFxyXG4gICAgICAgIH07XHJcbiAgICB9O1xyXG4gICAgSHViQ29ubmVjdGlvbi5wcm90b3R5cGUuY3JlYXRlQ2FuY2VsSW52b2NhdGlvbiA9IGZ1bmN0aW9uIChpZCkge1xyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIGludm9jYXRpb25JZDogaWQsXHJcbiAgICAgICAgICAgIHR5cGU6IE1lc3NhZ2VUeXBlLkNhbmNlbEludm9jYXRpb24sXHJcbiAgICAgICAgfTtcclxuICAgIH07XHJcbiAgICByZXR1cm4gSHViQ29ubmVjdGlvbjtcclxufSgpKTtcclxuZXhwb3J0IHsgSHViQ29ubmVjdGlvbiB9O1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1IdWJDb25uZWN0aW9uLmpzLm1hcCIsIi8vIENvcHlyaWdodCAoYykgLk5FVCBGb3VuZGF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxyXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wLiBTZWUgTGljZW5zZS50eHQgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbi5cclxuLy8gUm91Z2ggcG9seWZpbGwgb2YgaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL0Fib3J0Q29udHJvbGxlclxyXG4vLyBXZSBkb24ndCBhY3R1YWxseSBldmVyIHVzZSB0aGUgQVBJIGJlaW5nIHBvbHlmaWxsZWQsIHdlIGFsd2F5cyB1c2UgdGhlIHBvbHlmaWxsIGJlY2F1c2VcclxuLy8gaXQncyBhIHZlcnkgbmV3IEFQSSByaWdodCBub3cuXHJcbi8vIE5vdCBleHBvcnRlZCBmcm9tIGluZGV4LlxyXG52YXIgQWJvcnRDb250cm9sbGVyID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gQWJvcnRDb250cm9sbGVyKCkge1xyXG4gICAgICAgIHRoaXMuaXNBYm9ydGVkID0gZmFsc2U7XHJcbiAgICB9XHJcbiAgICBBYm9ydENvbnRyb2xsZXIucHJvdG90eXBlLmFib3J0ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIGlmICghdGhpcy5pc0Fib3J0ZWQpIHtcclxuICAgICAgICAgICAgdGhpcy5pc0Fib3J0ZWQgPSB0cnVlO1xyXG4gICAgICAgICAgICBpZiAodGhpcy5vbmFib3J0KSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLm9uYWJvcnQoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoQWJvcnRDb250cm9sbGVyLnByb3RvdHlwZSwgXCJzaWduYWxcIiwge1xyXG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcztcclxuICAgICAgICB9LFxyXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXHJcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXHJcbiAgICB9KTtcclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShBYm9ydENvbnRyb2xsZXIucHJvdG90eXBlLCBcImFib3J0ZWRcIiwge1xyXG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5pc0Fib3J0ZWQ7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxyXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxyXG4gICAgfSk7XHJcbiAgICByZXR1cm4gQWJvcnRDb250cm9sbGVyO1xyXG59KCkpO1xyXG5leHBvcnQgeyBBYm9ydENvbnRyb2xsZXIgfTtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9QWJvcnRDb250cm9sbGVyLmpzLm1hcCIsIi8vIENvcHlyaWdodCAoYykgLk5FVCBGb3VuZGF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxyXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wLiBTZWUgTGljZW5zZS50eHQgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbi5cclxuaW1wb3J0ICogYXMgdHNsaWJfMSBmcm9tIFwidHNsaWJcIjtcclxuaW1wb3J0IHsgQWJvcnRDb250cm9sbGVyIH0gZnJvbSBcIi4vQWJvcnRDb250cm9sbGVyXCI7XHJcbmltcG9ydCB7IEh0dHBFcnJvciwgVGltZW91dEVycm9yIH0gZnJvbSBcIi4vRXJyb3JzXCI7XHJcbmltcG9ydCB7IExvZ0xldmVsIH0gZnJvbSBcIi4vSUxvZ2dlclwiO1xyXG5pbXBvcnQgeyBUcmFuc2ZlckZvcm1hdCB9IGZyb20gXCIuL0lUcmFuc3BvcnRcIjtcclxuaW1wb3J0IHsgQXJnLCBnZXREYXRhRGV0YWlsLCBzZW5kTWVzc2FnZSB9IGZyb20gXCIuL1V0aWxzXCI7XHJcbnZhciBTSFVURE9XTl9USU1FT1VUID0gNSAqIDEwMDA7XHJcbi8vIE5vdCBleHBvcnRlZCBmcm9tICdpbmRleCcsIHRoaXMgdHlwZSBpcyBpbnRlcm5hbC5cclxudmFyIExvbmdQb2xsaW5nVHJhbnNwb3J0ID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gTG9uZ1BvbGxpbmdUcmFuc3BvcnQoaHR0cENsaWVudCwgYWNjZXNzVG9rZW5GYWN0b3J5LCBsb2dnZXIsIGxvZ01lc3NhZ2VDb250ZW50LCBzaHV0ZG93blRpbWVvdXQpIHtcclxuICAgICAgICB0aGlzLmh0dHBDbGllbnQgPSBodHRwQ2xpZW50O1xyXG4gICAgICAgIHRoaXMuYWNjZXNzVG9rZW5GYWN0b3J5ID0gYWNjZXNzVG9rZW5GYWN0b3J5IHx8IChmdW5jdGlvbiAoKSB7IHJldHVybiBudWxsOyB9KTtcclxuICAgICAgICB0aGlzLmxvZ2dlciA9IGxvZ2dlcjtcclxuICAgICAgICB0aGlzLnBvbGxBYm9ydCA9IG5ldyBBYm9ydENvbnRyb2xsZXIoKTtcclxuICAgICAgICB0aGlzLmxvZ01lc3NhZ2VDb250ZW50ID0gbG9nTWVzc2FnZUNvbnRlbnQ7XHJcbiAgICAgICAgdGhpcy5zaHV0ZG93blRpbWVvdXQgPSBzaHV0ZG93blRpbWVvdXQgfHwgU0hVVERPV05fVElNRU9VVDtcclxuICAgIH1cclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShMb25nUG9sbGluZ1RyYW5zcG9ydC5wcm90b3R5cGUsIFwicG9sbEFib3J0ZWRcIiwge1xyXG4gICAgICAgIC8vIFRoaXMgaXMgYW4gaW50ZXJuYWwgdHlwZSwgbm90IGV4cG9ydGVkIGZyb20gJ2luZGV4JyBzbyB0aGlzIGlzIHJlYWxseSBqdXN0IGludGVybmFsLlxyXG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5wb2xsQWJvcnQuYWJvcnRlZDtcclxuICAgICAgICB9LFxyXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXHJcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXHJcbiAgICB9KTtcclxuICAgIExvbmdQb2xsaW5nVHJhbnNwb3J0LnByb3RvdHlwZS5jb25uZWN0ID0gZnVuY3Rpb24gKHVybCwgdHJhbnNmZXJGb3JtYXQpIHtcclxuICAgICAgICByZXR1cm4gdHNsaWJfMS5fX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgdmFyIHBvbGxPcHRpb25zLCB0b2tlbiwgY2xvc2VFcnJvciwgcG9sbFVybCwgcmVzcG9uc2U7XHJcbiAgICAgICAgICAgIHJldHVybiB0c2xpYl8xLl9fZ2VuZXJhdG9yKHRoaXMsIGZ1bmN0aW9uIChfYSkge1xyXG4gICAgICAgICAgICAgICAgc3dpdGNoIChfYS5sYWJlbCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMDpcclxuICAgICAgICAgICAgICAgICAgICAgICAgQXJnLmlzUmVxdWlyZWQodXJsLCBcInVybFwiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgQXJnLmlzUmVxdWlyZWQodHJhbnNmZXJGb3JtYXQsIFwidHJhbnNmZXJGb3JtYXRcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIEFyZy5pc0luKHRyYW5zZmVyRm9ybWF0LCBUcmFuc2ZlckZvcm1hdCwgXCJ0cmFuc2ZlckZvcm1hdFwiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy51cmwgPSB1cmw7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubG9nZ2VyLmxvZyhMb2dMZXZlbC5UcmFjZSwgXCIoTG9uZ1BvbGxpbmcgdHJhbnNwb3J0KSBDb25uZWN0aW5nXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodHJhbnNmZXJGb3JtYXQgPT09IFRyYW5zZmVyRm9ybWF0LkJpbmFyeSAmJiAodHlwZW9mIG5ldyBYTUxIdHRwUmVxdWVzdCgpLnJlc3BvbnNlVHlwZSAhPT0gXCJzdHJpbmdcIikpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFRoaXMgd2lsbCB3b3JrIGlmIHdlIGZpeDogaHR0cHM6Ly9naXRodWIuY29tL2FzcG5ldC9TaWduYWxSL2lzc3Vlcy83NDJcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkJpbmFyeSBwcm90b2NvbHMgb3ZlciBYbWxIdHRwUmVxdWVzdCBub3QgaW1wbGVtZW50aW5nIGFkdmFuY2VkIGZlYXR1cmVzIGFyZSBub3Qgc3VwcG9ydGVkLlwiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBwb2xsT3B0aW9ucyA9IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFib3J0U2lnbmFsOiB0aGlzLnBvbGxBYm9ydC5zaWduYWwsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBoZWFkZXJzOiB7fSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRpbWVvdXQ6IDkwMDAwLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodHJhbnNmZXJGb3JtYXQgPT09IFRyYW5zZmVyRm9ybWF0LkJpbmFyeSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcG9sbE9wdGlvbnMucmVzcG9uc2VUeXBlID0gXCJhcnJheWJ1ZmZlclwiO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCAvKnlpZWxkKi8sIHRoaXMuYWNjZXNzVG9rZW5GYWN0b3J5KCldO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMTpcclxuICAgICAgICAgICAgICAgICAgICAgICAgdG9rZW4gPSBfYS5zZW50KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMudXBkYXRlSGVhZGVyVG9rZW4ocG9sbE9wdGlvbnMsIHRva2VuKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcG9sbFVybCA9IHVybCArIFwiJl89XCIgKyBEYXRlLm5vdygpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmxvZ2dlci5sb2coTG9nTGV2ZWwuVHJhY2UsIFwiKExvbmdQb2xsaW5nIHRyYW5zcG9ydCkgcG9sbGluZzogXCIgKyBwb2xsVXJsKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFs0IC8qeWllbGQqLywgdGhpcy5odHRwQ2xpZW50LmdldChwb2xsVXJsLCBwb2xsT3B0aW9ucyldO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMjpcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVzcG9uc2UgPSBfYS5zZW50KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyZXNwb25zZS5zdGF0dXNDb2RlICE9PSAyMDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubG9nZ2VyLmxvZyhMb2dMZXZlbC5FcnJvciwgXCIoTG9uZ1BvbGxpbmcgdHJhbnNwb3J0KSBVbmV4cGVjdGVkIHJlc3BvbnNlIGNvZGU6IFwiICsgcmVzcG9uc2Uuc3RhdHVzQ29kZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBNYXJrIHJ1bm5pbmcgYXMgZmFsc2Ugc28gdGhhdCB0aGUgcG9sbCBpbW1lZGlhdGVseSBlbmRzIGFuZCBydW5zIHRoZSBjbG9zZSBsb2dpY1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xvc2VFcnJvciA9IG5ldyBIdHRwRXJyb3IocmVzcG9uc2Uuc3RhdHVzVGV4dCwgcmVzcG9uc2Uuc3RhdHVzQ29kZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnJ1bm5pbmcgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucnVubmluZyA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5wb2xsKHRoaXMudXJsLCBwb2xsT3B0aW9ucywgY2xvc2VFcnJvcik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbMiAvKnJldHVybiovLCBQcm9taXNlLnJlc29sdmUoKV07XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuICAgIExvbmdQb2xsaW5nVHJhbnNwb3J0LnByb3RvdHlwZS51cGRhdGVIZWFkZXJUb2tlbiA9IGZ1bmN0aW9uIChyZXF1ZXN0LCB0b2tlbikge1xyXG4gICAgICAgIGlmICh0b2tlbikge1xyXG4gICAgICAgICAgICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6bm8tc3RyaW5nLWxpdGVyYWxcclxuICAgICAgICAgICAgcmVxdWVzdC5oZWFkZXJzW1wiQXV0aG9yaXphdGlvblwiXSA9IFwiQmVhcmVyIFwiICsgdG9rZW47XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOm5vLXN0cmluZy1saXRlcmFsXHJcbiAgICAgICAgaWYgKHJlcXVlc3QuaGVhZGVyc1tcIkF1dGhvcml6YXRpb25cIl0pIHtcclxuICAgICAgICAgICAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOm5vLXN0cmluZy1saXRlcmFsXHJcbiAgICAgICAgICAgIGRlbGV0ZSByZXF1ZXN0LmhlYWRlcnNbXCJBdXRob3JpemF0aW9uXCJdO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBMb25nUG9sbGluZ1RyYW5zcG9ydC5wcm90b3R5cGUucG9sbCA9IGZ1bmN0aW9uICh1cmwsIHBvbGxPcHRpb25zLCBjbG9zZUVycm9yKSB7XHJcbiAgICAgICAgcmV0dXJuIHRzbGliXzEuX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHZhciB0b2tlbiwgcG9sbFVybCwgcmVzcG9uc2UsIGVfMTtcclxuICAgICAgICAgICAgcmV0dXJuIHRzbGliXzEuX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9hKSB7XHJcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKF9hLmxhYmVsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAwOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBfYS50cnlzLnB1c2goWzAsICwgOCwgOV0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBfYS5sYWJlbCA9IDE7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAxOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXRoaXMucnVubmluZykgcmV0dXJuIFszIC8qYnJlYWsqLywgN107XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCAvKnlpZWxkKi8sIHRoaXMuYWNjZXNzVG9rZW5GYWN0b3J5KCldO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMjpcclxuICAgICAgICAgICAgICAgICAgICAgICAgdG9rZW4gPSBfYS5zZW50KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMudXBkYXRlSGVhZGVyVG9rZW4ocG9sbE9wdGlvbnMsIHRva2VuKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgX2EubGFiZWwgPSAzO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMzpcclxuICAgICAgICAgICAgICAgICAgICAgICAgX2EudHJ5cy5wdXNoKFszLCA1LCAsIDZdKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcG9sbFVybCA9IHVybCArIFwiJl89XCIgKyBEYXRlLm5vdygpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmxvZ2dlci5sb2coTG9nTGV2ZWwuVHJhY2UsIFwiKExvbmdQb2xsaW5nIHRyYW5zcG9ydCkgcG9sbGluZzogXCIgKyBwb2xsVXJsKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFs0IC8qeWllbGQqLywgdGhpcy5odHRwQ2xpZW50LmdldChwb2xsVXJsLCBwb2xsT3B0aW9ucyldO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgNDpcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVzcG9uc2UgPSBfYS5zZW50KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyZXNwb25zZS5zdGF0dXNDb2RlID09PSAyMDQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubG9nZ2VyLmxvZyhMb2dMZXZlbC5JbmZvcm1hdGlvbiwgXCIoTG9uZ1BvbGxpbmcgdHJhbnNwb3J0KSBQb2xsIHRlcm1pbmF0ZWQgYnkgc2VydmVyXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5ydW5uaW5nID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAocmVzcG9uc2Uuc3RhdHVzQ29kZSAhPT0gMjAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmxvZ2dlci5sb2coTG9nTGV2ZWwuRXJyb3IsIFwiKExvbmdQb2xsaW5nIHRyYW5zcG9ydCkgVW5leHBlY3RlZCByZXNwb25zZSBjb2RlOiBcIiArIHJlc3BvbnNlLnN0YXR1c0NvZGUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gVW5leHBlY3RlZCBzdGF0dXMgY29kZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xvc2VFcnJvciA9IG5ldyBIdHRwRXJyb3IocmVzcG9uc2Uuc3RhdHVzVGV4dCwgcmVzcG9uc2Uuc3RhdHVzQ29kZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnJ1bm5pbmcgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFByb2Nlc3MgdGhlIHJlc3BvbnNlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocmVzcG9uc2UuY29udGVudCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubG9nZ2VyLmxvZyhMb2dMZXZlbC5UcmFjZSwgXCIoTG9uZ1BvbGxpbmcgdHJhbnNwb3J0KSBkYXRhIHJlY2VpdmVkLiBcIiArIGdldERhdGFEZXRhaWwocmVzcG9uc2UuY29udGVudCwgdGhpcy5sb2dNZXNzYWdlQ29udGVudCkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLm9ucmVjZWl2ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm9ucmVjZWl2ZShyZXNwb25zZS5jb250ZW50KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBUaGlzIGlzIGFub3RoZXIgd2F5IHRpbWVvdXQgbWFuaWZlc3QuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5sb2dnZXIubG9nKExvZ0xldmVsLlRyYWNlLCBcIihMb25nUG9sbGluZyB0cmFuc3BvcnQpIFBvbGwgdGltZWQgb3V0LCByZWlzc3VpbmcuXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbMyAvKmJyZWFrKi8sIDZdO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgNTpcclxuICAgICAgICAgICAgICAgICAgICAgICAgZV8xID0gX2Euc2VudCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXRoaXMucnVubmluZykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gTG9nIGJ1dCBkaXNyZWdhcmQgZXJyb3JzIHRoYXQgb2NjdXIgYWZ0ZXIgd2Ugd2VyZSBzdG9wcGVkIGJ5IERFTEVURVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5sb2dnZXIubG9nKExvZ0xldmVsLlRyYWNlLCBcIihMb25nUG9sbGluZyB0cmFuc3BvcnQpIFBvbGwgZXJyb3JlZCBhZnRlciBzaHV0ZG93bjogXCIgKyBlXzEubWVzc2FnZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZV8xIGluc3RhbmNlb2YgVGltZW91dEVycm9yKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gSWdub3JlIHRpbWVvdXRzIGFuZCByZWlzc3VlIHRoZSBwb2xsLlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubG9nZ2VyLmxvZyhMb2dMZXZlbC5UcmFjZSwgXCIoTG9uZ1BvbGxpbmcgdHJhbnNwb3J0KSBQb2xsIHRpbWVkIG91dCwgcmVpc3N1aW5nLlwiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIENsb3NlIHRoZSBjb25uZWN0aW9uIHdpdGggdGhlIGVycm9yIGFzIHRoZSByZXN1bHQuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xvc2VFcnJvciA9IGVfMTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnJ1bm5pbmcgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzMgLypicmVhayovLCA2XTtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDY6IHJldHVybiBbMyAvKmJyZWFrKi8sIDFdO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgNzogcmV0dXJuIFszIC8qYnJlYWsqLywgOV07XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA4OlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBJbmRpY2F0ZSB0aGF0IHdlJ3ZlIHN0b3BwZWQgc28gdGhlIHNodXRkb3duIHRpbWVyIGRvZXNuJ3QgZ2V0IHJlZ2lzdGVyZWQuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc3RvcHBlZCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIENsZWFuIHVwIHRoZSBzaHV0ZG93biB0aW1lciBpZiBpdCB3YXMgcmVnaXN0ZXJlZFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5zaHV0ZG93blRpbWVyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGVhclRpbWVvdXQodGhpcy5zaHV0ZG93blRpbWVyKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBGaXJlIG91ciBvbmNsb3NlZCBldmVudFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5vbmNsb3NlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmxvZ2dlci5sb2coTG9nTGV2ZWwuVHJhY2UsIFwiKExvbmdQb2xsaW5nIHRyYW5zcG9ydCkgRmlyaW5nIG9uY2xvc2UgZXZlbnQuIEVycm9yOiBcIiArIChjbG9zZUVycm9yIHx8IFwiPHVuZGVmaW5lZD5cIikpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5vbmNsb3NlKGNsb3NlRXJyb3IpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubG9nZ2VyLmxvZyhMb2dMZXZlbC5UcmFjZSwgXCIoTG9uZ1BvbGxpbmcgdHJhbnNwb3J0KSBUcmFuc3BvcnQgZmluaXNoZWQuXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzcgLyplbmRmaW5hbGx5Ki9dO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgOTogcmV0dXJuIFsyIC8qcmV0dXJuKi9dO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9KTtcclxuICAgIH07XHJcbiAgICBMb25nUG9sbGluZ1RyYW5zcG9ydC5wcm90b3R5cGUuc2VuZCA9IGZ1bmN0aW9uIChkYXRhKSB7XHJcbiAgICAgICAgcmV0dXJuIHRzbGliXzEuX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0c2xpYl8xLl9fZ2VuZXJhdG9yKHRoaXMsIGZ1bmN0aW9uIChfYSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKCF0aGlzLnJ1bm5pbmcpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzIgLypyZXR1cm4qLywgUHJvbWlzZS5yZWplY3QobmV3IEVycm9yKFwiQ2Fubm90IHNlbmQgdW50aWwgdGhlIHRyYW5zcG9ydCBpcyBjb25uZWN0ZWRcIikpXTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHJldHVybiBbMiAvKnJldHVybiovLCBzZW5kTWVzc2FnZSh0aGlzLmxvZ2dlciwgXCJMb25nUG9sbGluZ1wiLCB0aGlzLmh0dHBDbGllbnQsIHRoaXMudXJsLCB0aGlzLmFjY2Vzc1Rva2VuRmFjdG9yeSwgZGF0YSwgdGhpcy5sb2dNZXNzYWdlQ29udGVudCldO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9KTtcclxuICAgIH07XHJcbiAgICBMb25nUG9sbGluZ1RyYW5zcG9ydC5wcm90b3R5cGUuc3RvcCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICByZXR1cm4gdHNsaWJfMS5fX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICAgICAgdmFyIGRlbGV0ZU9wdGlvbnMsIHRva2VuLCByZXNwb25zZTtcclxuICAgICAgICAgICAgcmV0dXJuIHRzbGliXzEuX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9hKSB7XHJcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKF9hLmxhYmVsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAwOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBfYS50cnlzLnB1c2goWzAsICwgMywgNF0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnJ1bm5pbmcgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5sb2dnZXIubG9nKExvZ0xldmVsLlRyYWNlLCBcIihMb25nUG9sbGluZyB0cmFuc3BvcnQpIHNlbmRpbmcgREVMRVRFIHJlcXVlc3QgdG8gXCIgKyB0aGlzLnVybCArIFwiLlwiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZGVsZXRlT3B0aW9ucyA9IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhlYWRlcnM6IHt9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQgLyp5aWVsZCovLCB0aGlzLmFjY2Vzc1Rva2VuRmFjdG9yeSgpXTtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDE6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRva2VuID0gX2Euc2VudCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnVwZGF0ZUhlYWRlclRva2VuKGRlbGV0ZU9wdGlvbnMsIHRva2VuKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFs0IC8qeWllbGQqLywgdGhpcy5odHRwQ2xpZW50LmRlbGV0ZSh0aGlzLnVybCwgZGVsZXRlT3B0aW9ucyldO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMjpcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVzcG9uc2UgPSBfYS5zZW50KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubG9nZ2VyLmxvZyhMb2dMZXZlbC5UcmFjZSwgXCIoTG9uZ1BvbGxpbmcgdHJhbnNwb3J0KSBERUxFVEUgcmVxdWVzdCBhY2NlcHRlZC5cIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbMyAvKmJyZWFrKi8sIDRdO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMzpcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gQWJvcnQgdGhlIHBvbGwgYWZ0ZXIgdGhlIHNodXRkb3duIHRpbWVvdXQgaWYgdGhlIHNlcnZlciBkb2Vzbid0IHN0b3AgdGhlIHBvbGwuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghdGhpcy5zdG9wcGVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnNodXRkb3duVGltZXIgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdGhpcy5sb2dnZXIubG9nKExvZ0xldmVsLldhcm5pbmcsIFwiKExvbmdQb2xsaW5nIHRyYW5zcG9ydCkgc2VydmVyIGRpZCBub3QgdGVybWluYXRlIGFmdGVyIERFTEVURSByZXF1ZXN0LCBjYW5jZWxpbmcgcG9sbC5cIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gQWJvcnQgYW55IG91dHN0YW5kaW5nIHBvbGxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdGhpcy5wb2xsQWJvcnQuYWJvcnQoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sIHRoaXMuc2h1dGRvd25UaW1lb3V0KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzcgLyplbmRmaW5hbGx5Ki9dO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgNDogcmV0dXJuIFsyIC8qcmV0dXJuKi9dO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9KTtcclxuICAgIH07XHJcbiAgICByZXR1cm4gTG9uZ1BvbGxpbmdUcmFuc3BvcnQ7XHJcbn0oKSk7XHJcbmV4cG9ydCB7IExvbmdQb2xsaW5nVHJhbnNwb3J0IH07XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUxvbmdQb2xsaW5nVHJhbnNwb3J0LmpzLm1hcCIsIi8vIENvcHlyaWdodCAoYykgLk5FVCBGb3VuZGF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxyXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wLiBTZWUgTGljZW5zZS50eHQgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbi5cclxuaW1wb3J0ICogYXMgdHNsaWJfMSBmcm9tIFwidHNsaWJcIjtcclxuaW1wb3J0IHsgTG9nTGV2ZWwgfSBmcm9tIFwiLi9JTG9nZ2VyXCI7XHJcbmltcG9ydCB7IFRyYW5zZmVyRm9ybWF0IH0gZnJvbSBcIi4vSVRyYW5zcG9ydFwiO1xyXG5pbXBvcnQgeyBBcmcsIGdldERhdGFEZXRhaWwsIHNlbmRNZXNzYWdlIH0gZnJvbSBcIi4vVXRpbHNcIjtcclxudmFyIFNlcnZlclNlbnRFdmVudHNUcmFuc3BvcnQgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBTZXJ2ZXJTZW50RXZlbnRzVHJhbnNwb3J0KGh0dHBDbGllbnQsIGFjY2Vzc1Rva2VuRmFjdG9yeSwgbG9nZ2VyLCBsb2dNZXNzYWdlQ29udGVudCkge1xyXG4gICAgICAgIHRoaXMuaHR0cENsaWVudCA9IGh0dHBDbGllbnQ7XHJcbiAgICAgICAgdGhpcy5hY2Nlc3NUb2tlbkZhY3RvcnkgPSBhY2Nlc3NUb2tlbkZhY3RvcnkgfHwgKGZ1bmN0aW9uICgpIHsgcmV0dXJuIG51bGw7IH0pO1xyXG4gICAgICAgIHRoaXMubG9nZ2VyID0gbG9nZ2VyO1xyXG4gICAgICAgIHRoaXMubG9nTWVzc2FnZUNvbnRlbnQgPSBsb2dNZXNzYWdlQ29udGVudDtcclxuICAgIH1cclxuICAgIFNlcnZlclNlbnRFdmVudHNUcmFuc3BvcnQucHJvdG90eXBlLmNvbm5lY3QgPSBmdW5jdGlvbiAodXJsLCB0cmFuc2ZlckZvcm1hdCkge1xyXG4gICAgICAgIHJldHVybiB0c2xpYl8xLl9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgICAgICB2YXIgdG9rZW47XHJcbiAgICAgICAgICAgIHJldHVybiB0c2xpYl8xLl9fZ2VuZXJhdG9yKHRoaXMsIGZ1bmN0aW9uIChfYSkge1xyXG4gICAgICAgICAgICAgICAgc3dpdGNoIChfYS5sYWJlbCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMDpcclxuICAgICAgICAgICAgICAgICAgICAgICAgQXJnLmlzUmVxdWlyZWQodXJsLCBcInVybFwiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgQXJnLmlzUmVxdWlyZWQodHJhbnNmZXJGb3JtYXQsIFwidHJhbnNmZXJGb3JtYXRcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIEFyZy5pc0luKHRyYW5zZmVyRm9ybWF0LCBUcmFuc2ZlckZvcm1hdCwgXCJ0cmFuc2ZlckZvcm1hdFwiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiAoRXZlbnRTb3VyY2UpID09PSBcInVuZGVmaW5lZFwiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCInRXZlbnRTb3VyY2UnIGlzIG5vdCBzdXBwb3J0ZWQgaW4geW91ciBlbnZpcm9ubWVudC5cIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5sb2dnZXIubG9nKExvZ0xldmVsLlRyYWNlLCBcIihTU0UgdHJhbnNwb3J0KSBDb25uZWN0aW5nXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQgLyp5aWVsZCovLCB0aGlzLmFjY2Vzc1Rva2VuRmFjdG9yeSgpXTtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDE6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRva2VuID0gX2Euc2VudCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodG9rZW4pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVybCArPSAodXJsLmluZGV4T2YoXCI/XCIpIDwgMCA/IFwiP1wiIDogXCImXCIpICsgKFwiYWNjZXNzX3Rva2VuPVwiICsgZW5jb2RlVVJJQ29tcG9uZW50KHRva2VuKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy51cmwgPSB1cmw7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbMiAvKnJldHVybiovLCBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG9wZW5lZCA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0cmFuc2ZlckZvcm1hdCAhPT0gVHJhbnNmZXJGb3JtYXQuVGV4dCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWplY3QobmV3IEVycm9yKFwiVGhlIFNlcnZlci1TZW50IEV2ZW50cyB0cmFuc3BvcnQgb25seSBzdXBwb3J0cyB0aGUgJ1RleHQnIHRyYW5zZmVyIGZvcm1hdFwiKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBldmVudFNvdXJjZSA9IG5ldyBFdmVudFNvdXJjZSh1cmwsIHsgd2l0aENyZWRlbnRpYWxzOiB0cnVlIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV2ZW50U291cmNlLm9ubWVzc2FnZSA9IGZ1bmN0aW9uIChlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoX3RoaXMub25yZWNlaXZlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMubG9nZ2VyLmxvZyhMb2dMZXZlbC5UcmFjZSwgXCIoU1NFIHRyYW5zcG9ydCkgZGF0YSByZWNlaXZlZC4gXCIgKyBnZXREYXRhRGV0YWlsKGUuZGF0YSwgX3RoaXMubG9nTWVzc2FnZUNvbnRlbnQpICsgXCIuXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdGhpcy5vbnJlY2VpdmUoZS5kYXRhKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChfdGhpcy5vbmNsb3NlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdGhpcy5vbmNsb3NlKGVycm9yKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBldmVudFNvdXJjZS5vbmVycm9yID0gZnVuY3Rpb24gKGUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBlcnJvciA9IG5ldyBFcnJvcihlLm1lc3NhZ2UgfHwgXCJFcnJvciBvY2N1cnJlZFwiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChvcGVuZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdGhpcy5jbG9zZShlcnJvcik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWplY3QoZXJyb3IpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBldmVudFNvdXJjZS5vbm9wZW4gPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdGhpcy5sb2dnZXIubG9nKExvZ0xldmVsLkluZm9ybWF0aW9uLCBcIlNTRSBjb25uZWN0ZWQgdG8gXCIgKyBfdGhpcy51cmwpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMuZXZlbnRTb3VyY2UgPSBldmVudFNvdXJjZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9wZW5lZCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhdGNoIChlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KV07XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuICAgIFNlcnZlclNlbnRFdmVudHNUcmFuc3BvcnQucHJvdG90eXBlLnNlbmQgPSBmdW5jdGlvbiAoZGF0YSkge1xyXG4gICAgICAgIHJldHVybiB0c2xpYl8xLl9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gdHNsaWJfMS5fX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2EpIHtcclxuICAgICAgICAgICAgICAgIGlmICghdGhpcy5ldmVudFNvdXJjZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbMiAvKnJldHVybiovLCBQcm9taXNlLnJlamVjdChuZXcgRXJyb3IoXCJDYW5ub3Qgc2VuZCB1bnRpbCB0aGUgdHJhbnNwb3J0IGlzIGNvbm5lY3RlZFwiKSldO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi8sIHNlbmRNZXNzYWdlKHRoaXMubG9nZ2VyLCBcIlNTRVwiLCB0aGlzLmh0dHBDbGllbnQsIHRoaXMudXJsLCB0aGlzLmFjY2Vzc1Rva2VuRmFjdG9yeSwgZGF0YSwgdGhpcy5sb2dNZXNzYWdlQ29udGVudCldO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9KTtcclxuICAgIH07XHJcbiAgICBTZXJ2ZXJTZW50RXZlbnRzVHJhbnNwb3J0LnByb3RvdHlwZS5zdG9wID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHRoaXMuY2xvc2UoKTtcclxuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCk7XHJcbiAgICB9O1xyXG4gICAgU2VydmVyU2VudEV2ZW50c1RyYW5zcG9ydC5wcm90b3R5cGUuY2xvc2UgPSBmdW5jdGlvbiAoZSkge1xyXG4gICAgICAgIGlmICh0aGlzLmV2ZW50U291cmNlKSB7XHJcbiAgICAgICAgICAgIHRoaXMuZXZlbnRTb3VyY2UuY2xvc2UoKTtcclxuICAgICAgICAgICAgdGhpcy5ldmVudFNvdXJjZSA9IG51bGw7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLm9uY2xvc2UpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMub25jbG9zZShlKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICByZXR1cm4gU2VydmVyU2VudEV2ZW50c1RyYW5zcG9ydDtcclxufSgpKTtcclxuZXhwb3J0IHsgU2VydmVyU2VudEV2ZW50c1RyYW5zcG9ydCB9O1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1TZXJ2ZXJTZW50RXZlbnRzVHJhbnNwb3J0LmpzLm1hcCIsIi8vIENvcHlyaWdodCAoYykgLk5FVCBGb3VuZGF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxyXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wLiBTZWUgTGljZW5zZS50eHQgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbi5cclxuaW1wb3J0ICogYXMgdHNsaWJfMSBmcm9tIFwidHNsaWJcIjtcclxuaW1wb3J0IHsgTG9nTGV2ZWwgfSBmcm9tIFwiLi9JTG9nZ2VyXCI7XHJcbmltcG9ydCB7IFRyYW5zZmVyRm9ybWF0IH0gZnJvbSBcIi4vSVRyYW5zcG9ydFwiO1xyXG5pbXBvcnQgeyBBcmcsIGdldERhdGFEZXRhaWwgfSBmcm9tIFwiLi9VdGlsc1wiO1xyXG52YXIgV2ViU29ja2V0VHJhbnNwb3J0ID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gV2ViU29ja2V0VHJhbnNwb3J0KGFjY2Vzc1Rva2VuRmFjdG9yeSwgbG9nZ2VyLCBsb2dNZXNzYWdlQ29udGVudCkge1xyXG4gICAgICAgIHRoaXMubG9nZ2VyID0gbG9nZ2VyO1xyXG4gICAgICAgIHRoaXMuYWNjZXNzVG9rZW5GYWN0b3J5ID0gYWNjZXNzVG9rZW5GYWN0b3J5IHx8IChmdW5jdGlvbiAoKSB7IHJldHVybiBudWxsOyB9KTtcclxuICAgICAgICB0aGlzLmxvZ01lc3NhZ2VDb250ZW50ID0gbG9nTWVzc2FnZUNvbnRlbnQ7XHJcbiAgICB9XHJcbiAgICBXZWJTb2NrZXRUcmFuc3BvcnQucHJvdG90eXBlLmNvbm5lY3QgPSBmdW5jdGlvbiAodXJsLCB0cmFuc2ZlckZvcm1hdCkge1xyXG4gICAgICAgIHJldHVybiB0c2xpYl8xLl9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgICAgICB2YXIgdG9rZW47XHJcbiAgICAgICAgICAgIHJldHVybiB0c2xpYl8xLl9fZ2VuZXJhdG9yKHRoaXMsIGZ1bmN0aW9uIChfYSkge1xyXG4gICAgICAgICAgICAgICAgc3dpdGNoIChfYS5sYWJlbCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMDpcclxuICAgICAgICAgICAgICAgICAgICAgICAgQXJnLmlzUmVxdWlyZWQodXJsLCBcInVybFwiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgQXJnLmlzUmVxdWlyZWQodHJhbnNmZXJGb3JtYXQsIFwidHJhbnNmZXJGb3JtYXRcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIEFyZy5pc0luKHRyYW5zZmVyRm9ybWF0LCBUcmFuc2ZlckZvcm1hdCwgXCJ0cmFuc2ZlckZvcm1hdFwiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiAoV2ViU29ja2V0KSA9PT0gXCJ1bmRlZmluZWRcIikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiJ1dlYlNvY2tldCcgaXMgbm90IHN1cHBvcnRlZCBpbiB5b3VyIGVudmlyb25tZW50LlwiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmxvZ2dlci5sb2coTG9nTGV2ZWwuVHJhY2UsIFwiKFdlYlNvY2tldHMgdHJhbnNwb3J0KSBDb25uZWN0aW5nXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQgLyp5aWVsZCovLCB0aGlzLmFjY2Vzc1Rva2VuRmFjdG9yeSgpXTtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDE6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRva2VuID0gX2Euc2VudCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodG9rZW4pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVybCArPSAodXJsLmluZGV4T2YoXCI/XCIpIDwgMCA/IFwiP1wiIDogXCImXCIpICsgKFwiYWNjZXNzX3Rva2VuPVwiICsgZW5jb2RlVVJJQ29tcG9uZW50KHRva2VuKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi8sIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1cmwgPSB1cmwucmVwbGFjZSgvXmh0dHAvLCBcIndzXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciB3ZWJTb2NrZXQgPSBuZXcgV2ViU29ja2V0KHVybCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRyYW5zZmVyRm9ybWF0ID09PSBUcmFuc2ZlckZvcm1hdC5CaW5hcnkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd2ViU29ja2V0LmJpbmFyeVR5cGUgPSBcImFycmF5YnVmZmVyXCI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdlYlNvY2tldC5vbm9wZW4gPSBmdW5jdGlvbiAoZXZlbnQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMubG9nZ2VyLmxvZyhMb2dMZXZlbC5JbmZvcm1hdGlvbiwgXCJXZWJTb2NrZXQgY29ubmVjdGVkIHRvIFwiICsgdXJsKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMud2ViU29ja2V0ID0gd2ViU29ja2V0O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3ZWJTb2NrZXQub25lcnJvciA9IGZ1bmN0aW9uIChldmVudCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWplY3QoZXZlbnQuZXJyb3IpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd2ViU29ja2V0Lm9ubWVzc2FnZSA9IGZ1bmN0aW9uIChtZXNzYWdlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLmxvZ2dlci5sb2coTG9nTGV2ZWwuVHJhY2UsIFwiKFdlYlNvY2tldHMgdHJhbnNwb3J0KSBkYXRhIHJlY2VpdmVkLiBcIiArIGdldERhdGFEZXRhaWwobWVzc2FnZS5kYXRhLCBfdGhpcy5sb2dNZXNzYWdlQ29udGVudCkgKyBcIi5cIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChfdGhpcy5vbnJlY2VpdmUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLm9ucmVjZWl2ZShtZXNzYWdlLmRhdGEpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3ZWJTb2NrZXQub25jbG9zZSA9IGZ1bmN0aW9uIChldmVudCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyB3ZWJTb2NrZXQgd2lsbCBiZSBudWxsIGlmIHRoZSB0cmFuc3BvcnQgZGlkIG5vdCBzdGFydCBzdWNjZXNzZnVsbHlcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMubG9nZ2VyLmxvZyhMb2dMZXZlbC5UcmFjZSwgXCIoV2ViU29ja2V0cyB0cmFuc3BvcnQpIHNvY2tldCBjbG9zZWQuXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoX3RoaXMub25jbG9zZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGV2ZW50Lndhc0NsZWFuID09PSBmYWxzZSB8fCBldmVudC5jb2RlICE9PSAxMDAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMub25jbG9zZShuZXcgRXJyb3IoXCJXZWJzb2NrZXQgY2xvc2VkIHdpdGggc3RhdHVzIGNvZGU6IFwiICsgZXZlbnQuY29kZSArIFwiIChcIiArIGV2ZW50LnJlYXNvbiArIFwiKVwiKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdGhpcy5vbmNsb3NlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSldO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9KTtcclxuICAgIH07XHJcbiAgICBXZWJTb2NrZXRUcmFuc3BvcnQucHJvdG90eXBlLnNlbmQgPSBmdW5jdGlvbiAoZGF0YSkge1xyXG4gICAgICAgIGlmICh0aGlzLndlYlNvY2tldCAmJiB0aGlzLndlYlNvY2tldC5yZWFkeVN0YXRlID09PSBXZWJTb2NrZXQuT1BFTikge1xyXG4gICAgICAgICAgICB0aGlzLmxvZ2dlci5sb2coTG9nTGV2ZWwuVHJhY2UsIFwiKFdlYlNvY2tldHMgdHJhbnNwb3J0KSBzZW5kaW5nIGRhdGEuIFwiICsgZ2V0RGF0YURldGFpbChkYXRhLCB0aGlzLmxvZ01lc3NhZ2VDb250ZW50KSArIFwiLlwiKTtcclxuICAgICAgICAgICAgdGhpcy53ZWJTb2NrZXQuc2VuZChkYXRhKTtcclxuICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QoXCJXZWJTb2NrZXQgaXMgbm90IGluIHRoZSBPUEVOIHN0YXRlXCIpO1xyXG4gICAgfTtcclxuICAgIFdlYlNvY2tldFRyYW5zcG9ydC5wcm90b3R5cGUuc3RvcCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICBpZiAodGhpcy53ZWJTb2NrZXQpIHtcclxuICAgICAgICAgICAgdGhpcy53ZWJTb2NrZXQuY2xvc2UoKTtcclxuICAgICAgICAgICAgdGhpcy53ZWJTb2NrZXQgPSBudWxsO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCk7XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIFdlYlNvY2tldFRyYW5zcG9ydDtcclxufSgpKTtcclxuZXhwb3J0IHsgV2ViU29ja2V0VHJhbnNwb3J0IH07XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVdlYlNvY2tldFRyYW5zcG9ydC5qcy5tYXAiLCIvLyBDb3B5cmlnaHQgKGMpIC5ORVQgRm91bmRhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cclxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMC4gU2VlIExpY2Vuc2UudHh0IGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIGxpY2Vuc2UgaW5mb3JtYXRpb24uXHJcbmltcG9ydCAqIGFzIHRzbGliXzEgZnJvbSBcInRzbGliXCI7XHJcbmltcG9ydCB7IERlZmF1bHRIdHRwQ2xpZW50IH0gZnJvbSBcIi4vSHR0cENsaWVudFwiO1xyXG5pbXBvcnQgeyBMb2dMZXZlbCB9IGZyb20gXCIuL0lMb2dnZXJcIjtcclxuaW1wb3J0IHsgSHR0cFRyYW5zcG9ydFR5cGUsIFRyYW5zZmVyRm9ybWF0IH0gZnJvbSBcIi4vSVRyYW5zcG9ydFwiO1xyXG5pbXBvcnQgeyBMb25nUG9sbGluZ1RyYW5zcG9ydCB9IGZyb20gXCIuL0xvbmdQb2xsaW5nVHJhbnNwb3J0XCI7XHJcbmltcG9ydCB7IFNlcnZlclNlbnRFdmVudHNUcmFuc3BvcnQgfSBmcm9tIFwiLi9TZXJ2ZXJTZW50RXZlbnRzVHJhbnNwb3J0XCI7XHJcbmltcG9ydCB7IEFyZywgY3JlYXRlTG9nZ2VyIH0gZnJvbSBcIi4vVXRpbHNcIjtcclxuaW1wb3J0IHsgV2ViU29ja2V0VHJhbnNwb3J0IH0gZnJvbSBcIi4vV2ViU29ja2V0VHJhbnNwb3J0XCI7XHJcbnZhciBNQVhfUkVESVJFQ1RTID0gMTAwO1xyXG52YXIgSHR0cENvbm5lY3Rpb24gPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBIdHRwQ29ubmVjdGlvbih1cmwsIG9wdGlvbnMpIHtcclxuICAgICAgICBpZiAob3B0aW9ucyA9PT0gdm9pZCAwKSB7IG9wdGlvbnMgPSB7fTsgfVxyXG4gICAgICAgIHRoaXMuZmVhdHVyZXMgPSB7fTtcclxuICAgICAgICBBcmcuaXNSZXF1aXJlZCh1cmwsIFwidXJsXCIpO1xyXG4gICAgICAgIHRoaXMubG9nZ2VyID0gY3JlYXRlTG9nZ2VyKG9wdGlvbnMubG9nZ2VyKTtcclxuICAgICAgICB0aGlzLmJhc2VVcmwgPSB0aGlzLnJlc29sdmVVcmwodXJsKTtcclxuICAgICAgICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcclxuICAgICAgICBvcHRpb25zLmFjY2Vzc1Rva2VuRmFjdG9yeSA9IG9wdGlvbnMuYWNjZXNzVG9rZW5GYWN0b3J5IHx8IChmdW5jdGlvbiAoKSB7IHJldHVybiBudWxsOyB9KTtcclxuICAgICAgICBvcHRpb25zLmxvZ01lc3NhZ2VDb250ZW50ID0gb3B0aW9ucy5sb2dNZXNzYWdlQ29udGVudCB8fCBmYWxzZTtcclxuICAgICAgICB0aGlzLmh0dHBDbGllbnQgPSBvcHRpb25zLmh0dHBDbGllbnQgfHwgbmV3IERlZmF1bHRIdHRwQ2xpZW50KHRoaXMubG9nZ2VyKTtcclxuICAgICAgICB0aGlzLmNvbm5lY3Rpb25TdGF0ZSA9IDIgLyogRGlzY29ubmVjdGVkICovO1xyXG4gICAgICAgIHRoaXMub3B0aW9ucyA9IG9wdGlvbnM7XHJcbiAgICB9XHJcbiAgICBIdHRwQ29ubmVjdGlvbi5wcm90b3R5cGUuc3RhcnQgPSBmdW5jdGlvbiAodHJhbnNmZXJGb3JtYXQpIHtcclxuICAgICAgICB0cmFuc2ZlckZvcm1hdCA9IHRyYW5zZmVyRm9ybWF0IHx8IFRyYW5zZmVyRm9ybWF0LkJpbmFyeTtcclxuICAgICAgICBBcmcuaXNJbih0cmFuc2ZlckZvcm1hdCwgVHJhbnNmZXJGb3JtYXQsIFwidHJhbnNmZXJGb3JtYXRcIik7XHJcbiAgICAgICAgdGhpcy5sb2dnZXIubG9nKExvZ0xldmVsLkRlYnVnLCBcIlN0YXJ0aW5nIGNvbm5lY3Rpb24gd2l0aCB0cmFuc2ZlciBmb3JtYXQgJ1wiICsgVHJhbnNmZXJGb3JtYXRbdHJhbnNmZXJGb3JtYXRdICsgXCInLlwiKTtcclxuICAgICAgICBpZiAodGhpcy5jb25uZWN0aW9uU3RhdGUgIT09IDIgLyogRGlzY29ubmVjdGVkICovKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChuZXcgRXJyb3IoXCJDYW5ub3Qgc3RhcnQgYSBjb25uZWN0aW9uIHRoYXQgaXMgbm90IGluIHRoZSAnRGlzY29ubmVjdGVkJyBzdGF0ZS5cIikpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLmNvbm5lY3Rpb25TdGF0ZSA9IDAgLyogQ29ubmVjdGluZyAqLztcclxuICAgICAgICB0aGlzLnN0YXJ0UHJvbWlzZSA9IHRoaXMuc3RhcnRJbnRlcm5hbCh0cmFuc2ZlckZvcm1hdCk7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuc3RhcnRQcm9taXNlO1xyXG4gICAgfTtcclxuICAgIEh0dHBDb25uZWN0aW9uLnByb3RvdHlwZS5zZW5kID0gZnVuY3Rpb24gKGRhdGEpIHtcclxuICAgICAgICBpZiAodGhpcy5jb25uZWN0aW9uU3RhdGUgIT09IDEgLyogQ29ubmVjdGVkICovKSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkNhbm5vdCBzZW5kIGRhdGEgaWYgdGhlIGNvbm5lY3Rpb24gaXMgbm90IGluIHRoZSAnQ29ubmVjdGVkJyBTdGF0ZS5cIik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB0aGlzLnRyYW5zcG9ydC5zZW5kKGRhdGEpO1xyXG4gICAgfTtcclxuICAgIEh0dHBDb25uZWN0aW9uLnByb3RvdHlwZS5zdG9wID0gZnVuY3Rpb24gKGVycm9yKSB7XHJcbiAgICAgICAgcmV0dXJuIHRzbGliXzEuX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHZhciBlXzE7XHJcbiAgICAgICAgICAgIHJldHVybiB0c2xpYl8xLl9fZ2VuZXJhdG9yKHRoaXMsIGZ1bmN0aW9uIChfYSkge1xyXG4gICAgICAgICAgICAgICAgc3dpdGNoIChfYS5sYWJlbCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMDpcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jb25uZWN0aW9uU3RhdGUgPSAyIC8qIERpc2Nvbm5lY3RlZCAqLztcclxuICAgICAgICAgICAgICAgICAgICAgICAgX2EubGFiZWwgPSAxO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMTpcclxuICAgICAgICAgICAgICAgICAgICAgICAgX2EudHJ5cy5wdXNoKFsxLCAzLCAsIDRdKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFs0IC8qeWllbGQqLywgdGhpcy5zdGFydFByb21pc2VdO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMjpcclxuICAgICAgICAgICAgICAgICAgICAgICAgX2Euc2VudCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzMgLypicmVhayovLCA0XTtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDM6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGVfMSA9IF9hLnNlbnQoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFszIC8qYnJlYWsqLywgNF07XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA0OlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXRoaXMudHJhbnNwb3J0KSByZXR1cm4gWzMgLypicmVhayovLCA2XTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zdG9wRXJyb3IgPSBlcnJvcjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFs0IC8qeWllbGQqLywgdGhpcy50cmFuc3BvcnQuc3RvcCgpXTtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDU6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9hLnNlbnQoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy50cmFuc3BvcnQgPSBudWxsO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBfYS5sYWJlbCA9IDY7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA2OiByZXR1cm4gWzIgLypyZXR1cm4qL107XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuICAgIEh0dHBDb25uZWN0aW9uLnByb3RvdHlwZS5zdGFydEludGVybmFsID0gZnVuY3Rpb24gKHRyYW5zZmVyRm9ybWF0KSB7XHJcbiAgICAgICAgcmV0dXJuIHRzbGliXzEuX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgICAgIHZhciB1cmwsIG5lZ290aWF0ZVJlc3BvbnNlLCByZWRpcmVjdHMsIF9sb29wXzEsIHRoaXNfMSwgc3RhdGVfMSwgZV8yO1xyXG4gICAgICAgICAgICByZXR1cm4gdHNsaWJfMS5fX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2EpIHtcclxuICAgICAgICAgICAgICAgIHN3aXRjaCAoX2EubGFiZWwpIHtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDA6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHVybCA9IHRoaXMuYmFzZVVybDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5hY2Nlc3NUb2tlbkZhY3RvcnkgPSB0aGlzLm9wdGlvbnMuYWNjZXNzVG9rZW5GYWN0b3J5O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBfYS5sYWJlbCA9IDE7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAxOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBfYS50cnlzLnB1c2goWzEsIDEyLCAsIDEzXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghdGhpcy5vcHRpb25zLnNraXBOZWdvdGlhdGlvbikgcmV0dXJuIFszIC8qYnJlYWsqLywgNV07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghKHRoaXMub3B0aW9ucy50cmFuc3BvcnQgPT09IEh0dHBUcmFuc3BvcnRUeXBlLldlYlNvY2tldHMpKSByZXR1cm4gWzMgLypicmVhayovLCAzXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gTm8gbmVlZCB0byBhZGQgYSBjb25uZWN0aW9uIElEIGluIHRoaXMgY2FzZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnRyYW5zcG9ydCA9IHRoaXMuY29uc3RydWN0VHJhbnNwb3J0KEh0dHBUcmFuc3BvcnRUeXBlLldlYlNvY2tldHMpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBXZSBzaG91bGQganVzdCBjYWxsIGNvbm5lY3QgZGlyZWN0bHkgaW4gdGhpcyBjYXNlLlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBObyBmYWxsYmFjayBvciBuZWdvdGlhdGUgaW4gdGhpcyBjYXNlLlxyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQgLyp5aWVsZCovLCB0aGlzLnRyYW5zcG9ydC5jb25uZWN0KHVybCwgdHJhbnNmZXJGb3JtYXQpXTtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDI6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFdlIHNob3VsZCBqdXN0IGNhbGwgY29ubmVjdCBkaXJlY3RseSBpbiB0aGlzIGNhc2UuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIE5vIGZhbGxiYWNrIG9yIG5lZ290aWF0ZSBpbiB0aGlzIGNhc2UuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9hLnNlbnQoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFszIC8qYnJlYWsqLywgNF07XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAzOiB0aHJvdyBFcnJvcihcIk5lZ290aWF0aW9uIGNhbiBvbmx5IGJlIHNraXBwZWQgd2hlbiB1c2luZyB0aGUgV2ViU29ja2V0IHRyYW5zcG9ydCBkaXJlY3RseS5cIik7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA0OiByZXR1cm4gWzMgLypicmVhayovLCAxMV07XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA1OlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBuZWdvdGlhdGVSZXNwb25zZSA9IG51bGw7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlZGlyZWN0cyA9IDA7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9sb29wXzEgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgYWNjZXNzVG9rZW5fMTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0c2xpYl8xLl9fZ2VuZXJhdG9yKHRoaXMsIGZ1bmN0aW9uIChfYSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN3aXRjaCAoX2EubGFiZWwpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAwOiByZXR1cm4gWzQgLyp5aWVsZCovLCB0aGlzXzEuZ2V0TmVnb3RpYXRpb25SZXNwb25zZSh1cmwpXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAxOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmVnb3RpYXRlUmVzcG9uc2UgPSBfYS5zZW50KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyB0aGUgdXNlciB0cmllcyB0byBzdG9wIHRoZSBjb25uZWN0aW9uIHdoZW4gaXQgaXMgYmVpbmcgc3RhcnRlZFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXNfMS5jb25uZWN0aW9uU3RhdGUgPT09IDIgLyogRGlzY29ubmVjdGVkICovKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi8sIHsgdmFsdWU6IHZvaWQgMCB9XTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChuZWdvdGlhdGVSZXNwb25zZS51cmwpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1cmwgPSBuZWdvdGlhdGVSZXNwb25zZS51cmw7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAobmVnb3RpYXRlUmVzcG9uc2UuYWNjZXNzVG9rZW4pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhY2Nlc3NUb2tlbl8xID0gbmVnb3RpYXRlUmVzcG9uc2UuYWNjZXNzVG9rZW47XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpc18xLmFjY2Vzc1Rva2VuRmFjdG9yeSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGFjY2Vzc1Rva2VuXzE7IH07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWRpcmVjdHMrKztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbMiAvKnJldHVybiovXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpc18xID0gdGhpcztcclxuICAgICAgICAgICAgICAgICAgICAgICAgX2EubGFiZWwgPSA2O1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgNjogcmV0dXJuIFs1IC8qeWllbGQqKi8sIF9sb29wXzEoKV07XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA3OlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBzdGF0ZV8xID0gX2Euc2VudCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHN0YXRlXzEgPT09IFwib2JqZWN0XCIpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzIgLypyZXR1cm4qLywgc3RhdGVfMS52YWx1ZV07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9hLmxhYmVsID0gODtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDg6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChuZWdvdGlhdGVSZXNwb25zZS51cmwgJiYgcmVkaXJlY3RzIDwgTUFYX1JFRElSRUNUUykgcmV0dXJuIFszIC8qYnJlYWsqLywgNl07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9hLmxhYmVsID0gOTtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDk6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyZWRpcmVjdHMgPT09IE1BWF9SRURJUkVDVFMgJiYgbmVnb3RpYXRlUmVzcG9uc2UudXJsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBFcnJvcihcIk5lZ290aWF0ZSByZWRpcmVjdGlvbiBsaW1pdCBleGNlZWRlZC5cIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFs0IC8qeWllbGQqLywgdGhpcy5jcmVhdGVUcmFuc3BvcnQodXJsLCB0aGlzLm9wdGlvbnMudHJhbnNwb3J0LCBuZWdvdGlhdGVSZXNwb25zZSwgdHJhbnNmZXJGb3JtYXQpXTtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDEwOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBfYS5zZW50KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9hLmxhYmVsID0gMTE7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAxMTpcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMudHJhbnNwb3J0IGluc3RhbmNlb2YgTG9uZ1BvbGxpbmdUcmFuc3BvcnQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZmVhdHVyZXMuaW5oZXJlbnRLZWVwQWxpdmUgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMudHJhbnNwb3J0Lm9ucmVjZWl2ZSA9IHRoaXMub25yZWNlaXZlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnRyYW5zcG9ydC5vbmNsb3NlID0gZnVuY3Rpb24gKGUpIHsgcmV0dXJuIF90aGlzLnN0b3BDb25uZWN0aW9uKGUpOyB9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBvbmx5IGNoYW5nZSB0aGUgc3RhdGUgaWYgd2Ugd2VyZSBjb25uZWN0aW5nIHRvIG5vdCBvdmVyd3JpdGVcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gdGhlIHN0YXRlIGlmIHRoZSBjb25uZWN0aW9uIGlzIGFscmVhZHkgbWFya2VkIGFzIERpc2Nvbm5lY3RlZFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmNoYW5nZVN0YXRlKDAgLyogQ29ubmVjdGluZyAqLywgMSAvKiBDb25uZWN0ZWQgKi8pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzMgLypicmVhayovLCAxM107XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAxMjpcclxuICAgICAgICAgICAgICAgICAgICAgICAgZV8yID0gX2Euc2VudCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmxvZ2dlci5sb2coTG9nTGV2ZWwuRXJyb3IsIFwiRmFpbGVkIHRvIHN0YXJ0IHRoZSBjb25uZWN0aW9uOiBcIiArIGVfMik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY29ubmVjdGlvblN0YXRlID0gMiAvKiBEaXNjb25uZWN0ZWQgKi87XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMudHJhbnNwb3J0ID0gbnVsbDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgZV8yO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMTM6IHJldHVybiBbMiAvKnJldHVybiovXTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG4gICAgSHR0cENvbm5lY3Rpb24ucHJvdG90eXBlLmdldE5lZ290aWF0aW9uUmVzcG9uc2UgPSBmdW5jdGlvbiAodXJsKSB7XHJcbiAgICAgICAgcmV0dXJuIHRzbGliXzEuX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHZhciB0b2tlbiwgaGVhZGVycywgbmVnb3RpYXRlVXJsLCByZXNwb25zZSwgZV8zLCBfYTtcclxuICAgICAgICAgICAgcmV0dXJuIHRzbGliXzEuX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9iKSB7XHJcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKF9iLmxhYmVsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAwOiByZXR1cm4gWzQgLyp5aWVsZCovLCB0aGlzLmFjY2Vzc1Rva2VuRmFjdG9yeSgpXTtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDE6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRva2VuID0gX2Iuc2VudCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodG9rZW4pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhlYWRlcnMgPSAoX2EgPSB7fSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfYVtcIkF1dGhvcml6YXRpb25cIl0gPSBcIkJlYXJlciBcIiArIHRva2VuLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9hKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBuZWdvdGlhdGVVcmwgPSB0aGlzLnJlc29sdmVOZWdvdGlhdGVVcmwodXJsKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5sb2dnZXIubG9nKExvZ0xldmVsLkRlYnVnLCBcIlNlbmRpbmcgbmVnb3RpYXRpb24gcmVxdWVzdDogXCIgKyBuZWdvdGlhdGVVcmwpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBfYi5sYWJlbCA9IDI7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAyOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBfYi50cnlzLnB1c2goWzIsIDQsICwgNV0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQgLyp5aWVsZCovLCB0aGlzLmh0dHBDbGllbnQucG9zdChuZWdvdGlhdGVVcmwsIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250ZW50OiBcIlwiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhlYWRlcnM6IGhlYWRlcnMsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KV07XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAzOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXNwb25zZSA9IF9iLnNlbnQoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHJlc3BvbnNlLnN0YXR1c0NvZGUgIT09IDIwMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgRXJyb3IoXCJVbmV4cGVjdGVkIHN0YXR1cyBjb2RlIHJldHVybmVkIGZyb20gbmVnb3RpYXRlIFwiICsgcmVzcG9uc2Uuc3RhdHVzQ29kZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi8sIEpTT04ucGFyc2UocmVzcG9uc2UuY29udGVudCldO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgNDpcclxuICAgICAgICAgICAgICAgICAgICAgICAgZV8zID0gX2Iuc2VudCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmxvZ2dlci5sb2coTG9nTGV2ZWwuRXJyb3IsIFwiRmFpbGVkIHRvIGNvbXBsZXRlIG5lZ290aWF0aW9uIHdpdGggdGhlIHNlcnZlcjogXCIgKyBlXzMpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBlXzM7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA1OiByZXR1cm4gWzIgLypyZXR1cm4qL107XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuICAgIEh0dHBDb25uZWN0aW9uLnByb3RvdHlwZS5jcmVhdGVDb25uZWN0VXJsID0gZnVuY3Rpb24gKHVybCwgY29ubmVjdGlvbklkKSB7XHJcbiAgICAgICAgcmV0dXJuIHVybCArICh1cmwuaW5kZXhPZihcIj9cIikgPT09IC0xID8gXCI/XCIgOiBcIiZcIikgKyAoXCJpZD1cIiArIGNvbm5lY3Rpb25JZCk7XHJcbiAgICB9O1xyXG4gICAgSHR0cENvbm5lY3Rpb24ucHJvdG90eXBlLmNyZWF0ZVRyYW5zcG9ydCA9IGZ1bmN0aW9uICh1cmwsIHJlcXVlc3RlZFRyYW5zcG9ydCwgbmVnb3RpYXRlUmVzcG9uc2UsIHJlcXVlc3RlZFRyYW5zZmVyRm9ybWF0KSB7XHJcbiAgICAgICAgcmV0dXJuIHRzbGliXzEuX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHZhciBjb25uZWN0VXJsLCB0cmFuc3BvcnRzLCBfaSwgdHJhbnNwb3J0c18xLCBlbmRwb2ludCwgdHJhbnNwb3J0LCBleF8xO1xyXG4gICAgICAgICAgICByZXR1cm4gdHNsaWJfMS5fX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2EpIHtcclxuICAgICAgICAgICAgICAgIHN3aXRjaCAoX2EubGFiZWwpIHtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDA6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbm5lY3RVcmwgPSB0aGlzLmNyZWF0ZUNvbm5lY3RVcmwodXJsLCBuZWdvdGlhdGVSZXNwb25zZS5jb25uZWN0aW9uSWQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXRoaXMuaXNJVHJhbnNwb3J0KHJlcXVlc3RlZFRyYW5zcG9ydCkpIHJldHVybiBbMyAvKmJyZWFrKi8sIDJdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmxvZ2dlci5sb2coTG9nTGV2ZWwuRGVidWcsIFwiQ29ubmVjdGlvbiB3YXMgcHJvdmlkZWQgYW4gaW5zdGFuY2Ugb2YgSVRyYW5zcG9ydCwgdXNpbmcgdGhhdCBkaXJlY3RseS5cIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMudHJhbnNwb3J0ID0gcmVxdWVzdGVkVHJhbnNwb3J0O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQgLyp5aWVsZCovLCB0aGlzLnRyYW5zcG9ydC5jb25uZWN0KGNvbm5lY3RVcmwsIHJlcXVlc3RlZFRyYW5zZmVyRm9ybWF0KV07XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAxOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBfYS5zZW50KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIG9ubHkgY2hhbmdlIHRoZSBzdGF0ZSBpZiB3ZSB3ZXJlIGNvbm5lY3RpbmcgdG8gbm90IG92ZXJ3cml0ZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyB0aGUgc3RhdGUgaWYgdGhlIGNvbm5lY3Rpb24gaXMgYWxyZWFkeSBtYXJrZWQgYXMgRGlzY29ubmVjdGVkXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY2hhbmdlU3RhdGUoMCAvKiBDb25uZWN0aW5nICovLCAxIC8qIENvbm5lY3RlZCAqLyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbMiAvKnJldHVybiovXTtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDI6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRyYW5zcG9ydHMgPSBuZWdvdGlhdGVSZXNwb25zZS5hdmFpbGFibGVUcmFuc3BvcnRzO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBfaSA9IDAsIHRyYW5zcG9ydHNfMSA9IHRyYW5zcG9ydHM7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9hLmxhYmVsID0gMztcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDM6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghKF9pIDwgdHJhbnNwb3J0c18xLmxlbmd0aCkpIHJldHVybiBbMyAvKmJyZWFrKi8sIDldO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBlbmRwb2ludCA9IHRyYW5zcG9ydHNfMVtfaV07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY29ubmVjdGlvblN0YXRlID0gMCAvKiBDb25uZWN0aW5nICovO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0cmFuc3BvcnQgPSB0aGlzLnJlc29sdmVUcmFuc3BvcnQoZW5kcG9pbnQsIHJlcXVlc3RlZFRyYW5zcG9ydCwgcmVxdWVzdGVkVHJhbnNmZXJGb3JtYXQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoISh0eXBlb2YgdHJhbnNwb3J0ID09PSBcIm51bWJlclwiKSkgcmV0dXJuIFszIC8qYnJlYWsqLywgOF07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMudHJhbnNwb3J0ID0gdGhpcy5jb25zdHJ1Y3RUcmFuc3BvcnQodHJhbnNwb3J0KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCEobmVnb3RpYXRlUmVzcG9uc2UuY29ubmVjdGlvbklkID09PSBudWxsKSkgcmV0dXJuIFszIC8qYnJlYWsqLywgNV07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCAvKnlpZWxkKi8sIHRoaXMuZ2V0TmVnb3RpYXRpb25SZXNwb25zZSh1cmwpXTtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDQ6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG5lZ290aWF0ZVJlc3BvbnNlID0gX2Euc2VudCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25uZWN0VXJsID0gdGhpcy5jcmVhdGVDb25uZWN0VXJsKHVybCwgbmVnb3RpYXRlUmVzcG9uc2UuY29ubmVjdGlvbklkKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgX2EubGFiZWwgPSA1O1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgNTpcclxuICAgICAgICAgICAgICAgICAgICAgICAgX2EudHJ5cy5wdXNoKFs1LCA3LCAsIDhdKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFs0IC8qeWllbGQqLywgdGhpcy50cmFuc3BvcnQuY29ubmVjdChjb25uZWN0VXJsLCByZXF1ZXN0ZWRUcmFuc2ZlckZvcm1hdCldO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgNjpcclxuICAgICAgICAgICAgICAgICAgICAgICAgX2Euc2VudCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmNoYW5nZVN0YXRlKDAgLyogQ29ubmVjdGluZyAqLywgMSAvKiBDb25uZWN0ZWQgKi8pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzIgLypyZXR1cm4qL107XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA3OlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBleF8xID0gX2Euc2VudCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmxvZ2dlci5sb2coTG9nTGV2ZWwuRXJyb3IsIFwiRmFpbGVkIHRvIHN0YXJ0IHRoZSB0cmFuc3BvcnQgJ1wiICsgSHR0cFRyYW5zcG9ydFR5cGVbdHJhbnNwb3J0XSArIFwiJzogXCIgKyBleF8xKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jb25uZWN0aW9uU3RhdGUgPSAyIC8qIERpc2Nvbm5lY3RlZCAqLztcclxuICAgICAgICAgICAgICAgICAgICAgICAgbmVnb3RpYXRlUmVzcG9uc2UuY29ubmVjdGlvbklkID0gbnVsbDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFszIC8qYnJlYWsqLywgOF07XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA4OlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBfaSsrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzMgLypicmVhayovLCAzXTtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDk6IHRocm93IG5ldyBFcnJvcihcIlVuYWJsZSB0byBpbml0aWFsaXplIGFueSBvZiB0aGUgYXZhaWxhYmxlIHRyYW5zcG9ydHMuXCIpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9KTtcclxuICAgIH07XHJcbiAgICBIdHRwQ29ubmVjdGlvbi5wcm90b3R5cGUuY29uc3RydWN0VHJhbnNwb3J0ID0gZnVuY3Rpb24gKHRyYW5zcG9ydCkge1xyXG4gICAgICAgIHN3aXRjaCAodHJhbnNwb3J0KSB7XHJcbiAgICAgICAgICAgIGNhc2UgSHR0cFRyYW5zcG9ydFR5cGUuV2ViU29ja2V0czpcclxuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgV2ViU29ja2V0VHJhbnNwb3J0KHRoaXMuYWNjZXNzVG9rZW5GYWN0b3J5LCB0aGlzLmxvZ2dlciwgdGhpcy5vcHRpb25zLmxvZ01lc3NhZ2VDb250ZW50KTtcclxuICAgICAgICAgICAgY2FzZSBIdHRwVHJhbnNwb3J0VHlwZS5TZXJ2ZXJTZW50RXZlbnRzOlxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBTZXJ2ZXJTZW50RXZlbnRzVHJhbnNwb3J0KHRoaXMuaHR0cENsaWVudCwgdGhpcy5hY2Nlc3NUb2tlbkZhY3RvcnksIHRoaXMubG9nZ2VyLCB0aGlzLm9wdGlvbnMubG9nTWVzc2FnZUNvbnRlbnQpO1xyXG4gICAgICAgICAgICBjYXNlIEh0dHBUcmFuc3BvcnRUeXBlLkxvbmdQb2xsaW5nOlxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBMb25nUG9sbGluZ1RyYW5zcG9ydCh0aGlzLmh0dHBDbGllbnQsIHRoaXMuYWNjZXNzVG9rZW5GYWN0b3J5LCB0aGlzLmxvZ2dlciwgdGhpcy5vcHRpb25zLmxvZ01lc3NhZ2VDb250ZW50KTtcclxuICAgICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIlVua25vd24gdHJhbnNwb3J0OiBcIiArIHRyYW5zcG9ydCArIFwiLlwiKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgSHR0cENvbm5lY3Rpb24ucHJvdG90eXBlLnJlc29sdmVUcmFuc3BvcnQgPSBmdW5jdGlvbiAoZW5kcG9pbnQsIHJlcXVlc3RlZFRyYW5zcG9ydCwgcmVxdWVzdGVkVHJhbnNmZXJGb3JtYXQpIHtcclxuICAgICAgICB2YXIgdHJhbnNwb3J0ID0gSHR0cFRyYW5zcG9ydFR5cGVbZW5kcG9pbnQudHJhbnNwb3J0XTtcclxuICAgICAgICBpZiAodHJhbnNwb3J0ID09PSBudWxsIHx8IHRyYW5zcG9ydCA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIHRoaXMubG9nZ2VyLmxvZyhMb2dMZXZlbC5EZWJ1ZywgXCJTa2lwcGluZyB0cmFuc3BvcnQgJ1wiICsgZW5kcG9pbnQudHJhbnNwb3J0ICsgXCInIGJlY2F1c2UgaXQgaXMgbm90IHN1cHBvcnRlZCBieSB0aGlzIGNsaWVudC5cIik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICB2YXIgdHJhbnNmZXJGb3JtYXRzID0gZW5kcG9pbnQudHJhbnNmZXJGb3JtYXRzLm1hcChmdW5jdGlvbiAocykgeyByZXR1cm4gVHJhbnNmZXJGb3JtYXRbc107IH0pO1xyXG4gICAgICAgICAgICBpZiAodHJhbnNwb3J0TWF0Y2hlcyhyZXF1ZXN0ZWRUcmFuc3BvcnQsIHRyYW5zcG9ydCkpIHtcclxuICAgICAgICAgICAgICAgIGlmICh0cmFuc2ZlckZvcm1hdHMuaW5kZXhPZihyZXF1ZXN0ZWRUcmFuc2ZlckZvcm1hdCkgPj0gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICgodHJhbnNwb3J0ID09PSBIdHRwVHJhbnNwb3J0VHlwZS5XZWJTb2NrZXRzICYmIHR5cGVvZiBXZWJTb2NrZXQgPT09IFwidW5kZWZpbmVkXCIpIHx8XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICh0cmFuc3BvcnQgPT09IEh0dHBUcmFuc3BvcnRUeXBlLlNlcnZlclNlbnRFdmVudHMgJiYgdHlwZW9mIEV2ZW50U291cmNlID09PSBcInVuZGVmaW5lZFwiKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmxvZ2dlci5sb2coTG9nTGV2ZWwuRGVidWcsIFwiU2tpcHBpbmcgdHJhbnNwb3J0ICdcIiArIEh0dHBUcmFuc3BvcnRUeXBlW3RyYW5zcG9ydF0gKyBcIicgYmVjYXVzZSBpdCBpcyBub3Qgc3VwcG9ydGVkIGluIHlvdXIgZW52aXJvbm1lbnQuJ1wiKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubG9nZ2VyLmxvZyhMb2dMZXZlbC5EZWJ1ZywgXCJTZWxlY3RpbmcgdHJhbnNwb3J0ICdcIiArIEh0dHBUcmFuc3BvcnRUeXBlW3RyYW5zcG9ydF0gKyBcIidcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0cmFuc3BvcnQ7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5sb2dnZXIubG9nKExvZ0xldmVsLkRlYnVnLCBcIlNraXBwaW5nIHRyYW5zcG9ydCAnXCIgKyBIdHRwVHJhbnNwb3J0VHlwZVt0cmFuc3BvcnRdICsgXCInIGJlY2F1c2UgaXQgZG9lcyBub3Qgc3VwcG9ydCB0aGUgcmVxdWVzdGVkIHRyYW5zZmVyIGZvcm1hdCAnXCIgKyBUcmFuc2ZlckZvcm1hdFtyZXF1ZXN0ZWRUcmFuc2ZlckZvcm1hdF0gKyBcIicuXCIpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5sb2dnZXIubG9nKExvZ0xldmVsLkRlYnVnLCBcIlNraXBwaW5nIHRyYW5zcG9ydCAnXCIgKyBIdHRwVHJhbnNwb3J0VHlwZVt0cmFuc3BvcnRdICsgXCInIGJlY2F1c2UgaXQgd2FzIGRpc2FibGVkIGJ5IHRoZSBjbGllbnQuXCIpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgfTtcclxuICAgIEh0dHBDb25uZWN0aW9uLnByb3RvdHlwZS5pc0lUcmFuc3BvcnQgPSBmdW5jdGlvbiAodHJhbnNwb3J0KSB7XHJcbiAgICAgICAgcmV0dXJuIHRyYW5zcG9ydCAmJiB0eXBlb2YgKHRyYW5zcG9ydCkgPT09IFwib2JqZWN0XCIgJiYgXCJjb25uZWN0XCIgaW4gdHJhbnNwb3J0O1xyXG4gICAgfTtcclxuICAgIEh0dHBDb25uZWN0aW9uLnByb3RvdHlwZS5jaGFuZ2VTdGF0ZSA9IGZ1bmN0aW9uIChmcm9tLCB0bykge1xyXG4gICAgICAgIGlmICh0aGlzLmNvbm5lY3Rpb25TdGF0ZSA9PT0gZnJvbSkge1xyXG4gICAgICAgICAgICB0aGlzLmNvbm5lY3Rpb25TdGF0ZSA9IHRvO1xyXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfTtcclxuICAgIEh0dHBDb25uZWN0aW9uLnByb3RvdHlwZS5zdG9wQ29ubmVjdGlvbiA9IGZ1bmN0aW9uIChlcnJvcikge1xyXG4gICAgICAgIHJldHVybiB0c2xpYl8xLl9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gdHNsaWJfMS5fX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2EpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMudHJhbnNwb3J0ID0gbnVsbDtcclxuICAgICAgICAgICAgICAgIC8vIElmIHdlIGhhdmUgYSBzdG9wRXJyb3IsIGl0IHRha2VzIHByZWNlZGVuY2Ugb3ZlciB0aGUgZXJyb3IgZnJvbSB0aGUgdHJhbnNwb3J0XHJcbiAgICAgICAgICAgICAgICBlcnJvciA9IHRoaXMuc3RvcEVycm9yIHx8IGVycm9yO1xyXG4gICAgICAgICAgICAgICAgaWYgKGVycm9yKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5sb2dnZXIubG9nKExvZ0xldmVsLkVycm9yLCBcIkNvbm5lY3Rpb24gZGlzY29ubmVjdGVkIHdpdGggZXJyb3IgJ1wiICsgZXJyb3IgKyBcIicuXCIpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5sb2dnZXIubG9nKExvZ0xldmVsLkluZm9ybWF0aW9uLCBcIkNvbm5lY3Rpb24gZGlzY29ubmVjdGVkLlwiKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHRoaXMuY29ubmVjdGlvblN0YXRlID0gMiAvKiBEaXNjb25uZWN0ZWQgKi87XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5vbmNsb3NlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5vbmNsb3NlKGVycm9yKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHJldHVybiBbMiAvKnJldHVybiovXTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG4gICAgSHR0cENvbm5lY3Rpb24ucHJvdG90eXBlLnJlc29sdmVVcmwgPSBmdW5jdGlvbiAodXJsKSB7XHJcbiAgICAgICAgLy8gc3RhcnRzV2l0aCBpcyBub3Qgc3VwcG9ydGVkIGluIElFXHJcbiAgICAgICAgaWYgKHVybC5sYXN0SW5kZXhPZihcImh0dHBzOi8vXCIsIDApID09PSAwIHx8IHVybC5sYXN0SW5kZXhPZihcImh0dHA6Ly9cIiwgMCkgPT09IDApIHtcclxuICAgICAgICAgICAgcmV0dXJuIHVybDtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHR5cGVvZiB3aW5kb3cgPT09IFwidW5kZWZpbmVkXCIgfHwgIXdpbmRvdyB8fCAhd2luZG93LmRvY3VtZW50KSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkNhbm5vdCByZXNvbHZlICdcIiArIHVybCArIFwiJy5cIik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIFNldHRpbmcgdGhlIHVybCB0byB0aGUgaHJlZiBwcm9wZXJ5IG9mIGFuIGFuY2hvciB0YWcgaGFuZGxlcyBub3JtYWxpemF0aW9uXHJcbiAgICAgICAgLy8gZm9yIHVzLiBUaGVyZSBhcmUgMyBtYWluIGNhc2VzLlxyXG4gICAgICAgIC8vIDEuIFJlbGF0aXZlICBwYXRoIG5vcm1hbGl6YXRpb24gZS5nIFwiYlwiIC0+IFwiaHR0cDovL2xvY2FsaG9zdDo1MDAwL2EvYlwiXHJcbiAgICAgICAgLy8gMi4gQWJzb2x1dGUgcGF0aCBub3JtYWxpemF0aW9uIGUuZyBcIi9hL2JcIiAtPiBcImh0dHA6Ly9sb2NhbGhvc3Q6NTAwMC9hL2JcIlxyXG4gICAgICAgIC8vIDMuIE5ldHdvcmtwYXRoIHJlZmVyZW5jZSBub3JtYWxpemF0aW9uIGUuZyBcIi8vbG9jYWxob3N0OjUwMDAvYS9iXCIgLT4gXCJodHRwOi8vbG9jYWxob3N0OjUwMDAvYS9iXCJcclxuICAgICAgICB2YXIgYVRhZyA9IHdpbmRvdy5kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiYVwiKTtcclxuICAgICAgICBhVGFnLmhyZWYgPSB1cmw7XHJcbiAgICAgICAgdGhpcy5sb2dnZXIubG9nKExvZ0xldmVsLkluZm9ybWF0aW9uLCBcIk5vcm1hbGl6aW5nICdcIiArIHVybCArIFwiJyB0byAnXCIgKyBhVGFnLmhyZWYgKyBcIicuXCIpO1xyXG4gICAgICAgIHJldHVybiBhVGFnLmhyZWY7XHJcbiAgICB9O1xyXG4gICAgSHR0cENvbm5lY3Rpb24ucHJvdG90eXBlLnJlc29sdmVOZWdvdGlhdGVVcmwgPSBmdW5jdGlvbiAodXJsKSB7XHJcbiAgICAgICAgdmFyIGluZGV4ID0gdXJsLmluZGV4T2YoXCI/XCIpO1xyXG4gICAgICAgIHZhciBuZWdvdGlhdGVVcmwgPSB1cmwuc3Vic3RyaW5nKDAsIGluZGV4ID09PSAtMSA/IHVybC5sZW5ndGggOiBpbmRleCk7XHJcbiAgICAgICAgaWYgKG5lZ290aWF0ZVVybFtuZWdvdGlhdGVVcmwubGVuZ3RoIC0gMV0gIT09IFwiL1wiKSB7XHJcbiAgICAgICAgICAgIG5lZ290aWF0ZVVybCArPSBcIi9cIjtcclxuICAgICAgICB9XHJcbiAgICAgICAgbmVnb3RpYXRlVXJsICs9IFwibmVnb3RpYXRlXCI7XHJcbiAgICAgICAgbmVnb3RpYXRlVXJsICs9IGluZGV4ID09PSAtMSA/IFwiXCIgOiB1cmwuc3Vic3RyaW5nKGluZGV4KTtcclxuICAgICAgICByZXR1cm4gbmVnb3RpYXRlVXJsO1xyXG4gICAgfTtcclxuICAgIHJldHVybiBIdHRwQ29ubmVjdGlvbjtcclxufSgpKTtcclxuZXhwb3J0IHsgSHR0cENvbm5lY3Rpb24gfTtcclxuZnVuY3Rpb24gdHJhbnNwb3J0TWF0Y2hlcyhyZXF1ZXN0ZWRUcmFuc3BvcnQsIGFjdHVhbFRyYW5zcG9ydCkge1xyXG4gICAgcmV0dXJuICFyZXF1ZXN0ZWRUcmFuc3BvcnQgfHwgKChhY3R1YWxUcmFuc3BvcnQgJiByZXF1ZXN0ZWRUcmFuc3BvcnQpICE9PSAwKTtcclxufVxyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1IdHRwQ29ubmVjdGlvbi5qcy5tYXAiLCIvLyBDb3B5cmlnaHQgKGMpIC5ORVQgRm91bmRhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cclxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMC4gU2VlIExpY2Vuc2UudHh0IGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIGxpY2Vuc2UgaW5mb3JtYXRpb24uXHJcbmltcG9ydCB7IE1lc3NhZ2VUeXBlIH0gZnJvbSBcIi4vSUh1YlByb3RvY29sXCI7XHJcbmltcG9ydCB7IExvZ0xldmVsIH0gZnJvbSBcIi4vSUxvZ2dlclwiO1xyXG5pbXBvcnQgeyBUcmFuc2ZlckZvcm1hdCB9IGZyb20gXCIuL0lUcmFuc3BvcnRcIjtcclxuaW1wb3J0IHsgTnVsbExvZ2dlciB9IGZyb20gXCIuL0xvZ2dlcnNcIjtcclxuaW1wb3J0IHsgVGV4dE1lc3NhZ2VGb3JtYXQgfSBmcm9tIFwiLi9UZXh0TWVzc2FnZUZvcm1hdFwiO1xyXG52YXIgSlNPTl9IVUJfUFJPVE9DT0xfTkFNRSA9IFwianNvblwiO1xyXG4vKiogSW1wbGVtZW50cyB0aGUgSlNPTiBIdWIgUHJvdG9jb2wuICovXHJcbnZhciBKc29uSHViUHJvdG9jb2wgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBKc29uSHViUHJvdG9jb2woKSB7XHJcbiAgICAgICAgLyoqIEBpbmhlcml0RG9jICovXHJcbiAgICAgICAgdGhpcy5uYW1lID0gSlNPTl9IVUJfUFJPVE9DT0xfTkFNRTtcclxuICAgICAgICAvKiogQGluaGVyaXREb2MgKi9cclxuICAgICAgICB0aGlzLnZlcnNpb24gPSAxO1xyXG4gICAgICAgIC8qKiBAaW5oZXJpdERvYyAqL1xyXG4gICAgICAgIHRoaXMudHJhbnNmZXJGb3JtYXQgPSBUcmFuc2ZlckZvcm1hdC5UZXh0O1xyXG4gICAgfVxyXG4gICAgLyoqIENyZWF0ZXMgYW4gYXJyYXkgb2Yge0BsaW5rIEh1Yk1lc3NhZ2V9IG9iamVjdHMgZnJvbSB0aGUgc3BlY2lmaWVkIHNlcmlhbGl6ZWQgcmVwcmVzZW50YXRpb24uXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGlucHV0IEEgc3RyaW5nIGNvbnRhaW5pbmcgdGhlIHNlcmlhbGl6ZWQgcmVwcmVzZW50YXRpb24uXHJcbiAgICAgKiBAcGFyYW0ge0lMb2dnZXJ9IGxvZ2dlciBBIGxvZ2dlciB0aGF0IHdpbGwgYmUgdXNlZCB0byBsb2cgbWVzc2FnZXMgdGhhdCBvY2N1ciBkdXJpbmcgcGFyc2luZy5cclxuICAgICAqL1xyXG4gICAgSnNvbkh1YlByb3RvY29sLnByb3RvdHlwZS5wYXJzZU1lc3NhZ2VzID0gZnVuY3Rpb24gKGlucHV0LCBsb2dnZXIpIHtcclxuICAgICAgICAvLyBUaGUgaW50ZXJmYWNlIGRvZXMgYWxsb3cgXCJBcnJheUJ1ZmZlclwiIHRvIGJlIHBhc3NlZCBpbiwgYnV0IHRoaXMgaW1wbGVtZW50YXRpb24gZG9lcyBub3QuIFNvIGxldCdzIHRocm93IGEgdXNlZnVsIGVycm9yLlxyXG4gICAgICAgIGlmICh0eXBlb2YgaW5wdXQgIT09IFwic3RyaW5nXCIpIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiSW52YWxpZCBpbnB1dCBmb3IgSlNPTiBodWIgcHJvdG9jb2wuIEV4cGVjdGVkIGEgc3RyaW5nLlwiKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKCFpbnB1dCkge1xyXG4gICAgICAgICAgICByZXR1cm4gW107XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChsb2dnZXIgPT09IG51bGwpIHtcclxuICAgICAgICAgICAgbG9nZ2VyID0gTnVsbExvZ2dlci5pbnN0YW5jZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gUGFyc2UgdGhlIG1lc3NhZ2VzXHJcbiAgICAgICAgdmFyIG1lc3NhZ2VzID0gVGV4dE1lc3NhZ2VGb3JtYXQucGFyc2UoaW5wdXQpO1xyXG4gICAgICAgIHZhciBodWJNZXNzYWdlcyA9IFtdO1xyXG4gICAgICAgIGZvciAodmFyIF9pID0gMCwgbWVzc2FnZXNfMSA9IG1lc3NhZ2VzOyBfaSA8IG1lc3NhZ2VzXzEubGVuZ3RoOyBfaSsrKSB7XHJcbiAgICAgICAgICAgIHZhciBtZXNzYWdlID0gbWVzc2FnZXNfMVtfaV07XHJcbiAgICAgICAgICAgIHZhciBwYXJzZWRNZXNzYWdlID0gSlNPTi5wYXJzZShtZXNzYWdlKTtcclxuICAgICAgICAgICAgaWYgKHR5cGVvZiBwYXJzZWRNZXNzYWdlLnR5cGUgIT09IFwibnVtYmVyXCIpIHtcclxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkludmFsaWQgcGF5bG9hZC5cIik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgc3dpdGNoIChwYXJzZWRNZXNzYWdlLnR5cGUpIHtcclxuICAgICAgICAgICAgICAgIGNhc2UgTWVzc2FnZVR5cGUuSW52b2NhdGlvbjpcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmlzSW52b2NhdGlvbk1lc3NhZ2UocGFyc2VkTWVzc2FnZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlIE1lc3NhZ2VUeXBlLlN0cmVhbUl0ZW06XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5pc1N0cmVhbUl0ZW1NZXNzYWdlKHBhcnNlZE1lc3NhZ2UpO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSBNZXNzYWdlVHlwZS5Db21wbGV0aW9uOlxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuaXNDb21wbGV0aW9uTWVzc2FnZShwYXJzZWRNZXNzYWdlKTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgTWVzc2FnZVR5cGUuUGluZzpcclxuICAgICAgICAgICAgICAgICAgICAvLyBTaW5nbGUgdmFsdWUsIG5vIG5lZWQgdG8gdmFsaWRhdGVcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgTWVzc2FnZVR5cGUuQ2xvc2U6XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gQWxsIG9wdGlvbmFsIHZhbHVlcywgbm8gbmVlZCB0byB2YWxpZGF0ZVxyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgICAgICAgICAvLyBGdXR1cmUgcHJvdG9jb2wgY2hhbmdlcyBjYW4gYWRkIG1lc3NhZ2UgdHlwZXMsIG9sZCBjbGllbnRzIGNhbiBpZ25vcmUgdGhlbVxyXG4gICAgICAgICAgICAgICAgICAgIGxvZ2dlci5sb2coTG9nTGV2ZWwuSW5mb3JtYXRpb24sIFwiVW5rbm93biBtZXNzYWdlIHR5cGUgJ1wiICsgcGFyc2VkTWVzc2FnZS50eXBlICsgXCInIGlnbm9yZWQuXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGh1Yk1lc3NhZ2VzLnB1c2gocGFyc2VkTWVzc2FnZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBodWJNZXNzYWdlcztcclxuICAgIH07XHJcbiAgICAvKiogV3JpdGVzIHRoZSBzcGVjaWZpZWQge0BsaW5rIEh1Yk1lc3NhZ2V9IHRvIGEgc3RyaW5nIGFuZCByZXR1cm5zIGl0LlxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSB7SHViTWVzc2FnZX0gbWVzc2FnZSBUaGUgbWVzc2FnZSB0byB3cml0ZS5cclxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IEEgc3RyaW5nIGNvbnRhaW5pbmcgdGhlIHNlcmlhbGl6ZWQgcmVwcmVzZW50YXRpb24gb2YgdGhlIG1lc3NhZ2UuXHJcbiAgICAgKi9cclxuICAgIEpzb25IdWJQcm90b2NvbC5wcm90b3R5cGUud3JpdGVNZXNzYWdlID0gZnVuY3Rpb24gKG1lc3NhZ2UpIHtcclxuICAgICAgICByZXR1cm4gVGV4dE1lc3NhZ2VGb3JtYXQud3JpdGUoSlNPTi5zdHJpbmdpZnkobWVzc2FnZSkpO1xyXG4gICAgfTtcclxuICAgIEpzb25IdWJQcm90b2NvbC5wcm90b3R5cGUuaXNJbnZvY2F0aW9uTWVzc2FnZSA9IGZ1bmN0aW9uIChtZXNzYWdlKSB7XHJcbiAgICAgICAgdGhpcy5hc3NlcnROb3RFbXB0eVN0cmluZyhtZXNzYWdlLnRhcmdldCwgXCJJbnZhbGlkIHBheWxvYWQgZm9yIEludm9jYXRpb24gbWVzc2FnZS5cIik7XHJcbiAgICAgICAgaWYgKG1lc3NhZ2UuaW52b2NhdGlvbklkICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgdGhpcy5hc3NlcnROb3RFbXB0eVN0cmluZyhtZXNzYWdlLmludm9jYXRpb25JZCwgXCJJbnZhbGlkIHBheWxvYWQgZm9yIEludm9jYXRpb24gbWVzc2FnZS5cIik7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIEpzb25IdWJQcm90b2NvbC5wcm90b3R5cGUuaXNTdHJlYW1JdGVtTWVzc2FnZSA9IGZ1bmN0aW9uIChtZXNzYWdlKSB7XHJcbiAgICAgICAgdGhpcy5hc3NlcnROb3RFbXB0eVN0cmluZyhtZXNzYWdlLmludm9jYXRpb25JZCwgXCJJbnZhbGlkIHBheWxvYWQgZm9yIFN0cmVhbUl0ZW0gbWVzc2FnZS5cIik7XHJcbiAgICAgICAgaWYgKG1lc3NhZ2UuaXRlbSA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkludmFsaWQgcGF5bG9hZCBmb3IgU3RyZWFtSXRlbSBtZXNzYWdlLlwiKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgSnNvbkh1YlByb3RvY29sLnByb3RvdHlwZS5pc0NvbXBsZXRpb25NZXNzYWdlID0gZnVuY3Rpb24gKG1lc3NhZ2UpIHtcclxuICAgICAgICBpZiAobWVzc2FnZS5yZXN1bHQgJiYgbWVzc2FnZS5lcnJvcikge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJJbnZhbGlkIHBheWxvYWQgZm9yIENvbXBsZXRpb24gbWVzc2FnZS5cIik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICghbWVzc2FnZS5yZXN1bHQgJiYgbWVzc2FnZS5lcnJvcikge1xyXG4gICAgICAgICAgICB0aGlzLmFzc2VydE5vdEVtcHR5U3RyaW5nKG1lc3NhZ2UuZXJyb3IsIFwiSW52YWxpZCBwYXlsb2FkIGZvciBDb21wbGV0aW9uIG1lc3NhZ2UuXCIpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLmFzc2VydE5vdEVtcHR5U3RyaW5nKG1lc3NhZ2UuaW52b2NhdGlvbklkLCBcIkludmFsaWQgcGF5bG9hZCBmb3IgQ29tcGxldGlvbiBtZXNzYWdlLlwiKTtcclxuICAgIH07XHJcbiAgICBKc29uSHViUHJvdG9jb2wucHJvdG90eXBlLmFzc2VydE5vdEVtcHR5U3RyaW5nID0gZnVuY3Rpb24gKHZhbHVlLCBlcnJvck1lc3NhZ2UpIHtcclxuICAgICAgICBpZiAodHlwZW9mIHZhbHVlICE9PSBcInN0cmluZ1wiIHx8IHZhbHVlID09PSBcIlwiKSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihlcnJvck1lc3NhZ2UpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICByZXR1cm4gSnNvbkh1YlByb3RvY29sO1xyXG59KCkpO1xyXG5leHBvcnQgeyBKc29uSHViUHJvdG9jb2wgfTtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9SnNvbkh1YlByb3RvY29sLmpzLm1hcCIsIi8vIENvcHlyaWdodCAoYykgLk5FVCBGb3VuZGF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxyXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wLiBTZWUgTGljZW5zZS50eHQgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbi5cclxuaW1wb3J0IHsgSHR0cENvbm5lY3Rpb24gfSBmcm9tIFwiLi9IdHRwQ29ubmVjdGlvblwiO1xyXG5pbXBvcnQgeyBIdWJDb25uZWN0aW9uIH0gZnJvbSBcIi4vSHViQ29ubmVjdGlvblwiO1xyXG5pbXBvcnQgeyBKc29uSHViUHJvdG9jb2wgfSBmcm9tIFwiLi9Kc29uSHViUHJvdG9jb2xcIjtcclxuaW1wb3J0IHsgTnVsbExvZ2dlciB9IGZyb20gXCIuL0xvZ2dlcnNcIjtcclxuaW1wb3J0IHsgQXJnLCBDb25zb2xlTG9nZ2VyIH0gZnJvbSBcIi4vVXRpbHNcIjtcclxuLyoqIEEgYnVpbGRlciBmb3IgY29uZmlndXJpbmcge0BsaW5rIEh1YkNvbm5lY3Rpb259IGluc3RhbmNlcy4gKi9cclxudmFyIEh1YkNvbm5lY3Rpb25CdWlsZGVyID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gSHViQ29ubmVjdGlvbkJ1aWxkZXIoKSB7XHJcbiAgICB9XHJcbiAgICBIdWJDb25uZWN0aW9uQnVpbGRlci5wcm90b3R5cGUuY29uZmlndXJlTG9nZ2luZyA9IGZ1bmN0aW9uIChsb2dnaW5nKSB7XHJcbiAgICAgICAgQXJnLmlzUmVxdWlyZWQobG9nZ2luZywgXCJsb2dnaW5nXCIpO1xyXG4gICAgICAgIGlmIChpc0xvZ2dlcihsb2dnaW5nKSkge1xyXG4gICAgICAgICAgICB0aGlzLmxvZ2dlciA9IGxvZ2dpbmc7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLmxvZ2dlciA9IG5ldyBDb25zb2xlTG9nZ2VyKGxvZ2dpbmcpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH07XHJcbiAgICBIdWJDb25uZWN0aW9uQnVpbGRlci5wcm90b3R5cGUud2l0aFVybCA9IGZ1bmN0aW9uICh1cmwsIHRyYW5zcG9ydFR5cGVPck9wdGlvbnMpIHtcclxuICAgICAgICBBcmcuaXNSZXF1aXJlZCh1cmwsIFwidXJsXCIpO1xyXG4gICAgICAgIHRoaXMudXJsID0gdXJsO1xyXG4gICAgICAgIC8vIEZsb3ctdHlwaW5nIGtub3dzIHdoZXJlIGl0J3MgYXQuIFNpbmNlIEh0dHBUcmFuc3BvcnRUeXBlIGlzIGEgbnVtYmVyIGFuZCBJSHR0cENvbm5lY3Rpb25PcHRpb25zIGlzIGd1YXJhbnRlZWRcclxuICAgICAgICAvLyB0byBiZSBhbiBvYmplY3QsIHdlIGtub3cgKGFzIGRvZXMgVHlwZVNjcmlwdCkgdGhpcyBjb21wYXJpc29uIGlzIGFsbCB3ZSBuZWVkIHRvIGZpZ3VyZSBvdXQgd2hpY2ggb3ZlcmxvYWQgd2FzIGNhbGxlZC5cclxuICAgICAgICBpZiAodHlwZW9mIHRyYW5zcG9ydFR5cGVPck9wdGlvbnMgPT09IFwib2JqZWN0XCIpIHtcclxuICAgICAgICAgICAgdGhpcy5odHRwQ29ubmVjdGlvbk9wdGlvbnMgPSB0cmFuc3BvcnRUeXBlT3JPcHRpb25zO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy5odHRwQ29ubmVjdGlvbk9wdGlvbnMgPSB7XHJcbiAgICAgICAgICAgICAgICB0cmFuc3BvcnQ6IHRyYW5zcG9ydFR5cGVPck9wdGlvbnMsXHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfTtcclxuICAgIC8qKiBDb25maWd1cmVzIHRoZSB7QGxpbmsgSHViQ29ubmVjdGlvbn0gdG8gdXNlIHRoZSBzcGVjaWZpZWQgSHViIFByb3RvY29sLlxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSB7SUh1YlByb3RvY29sfSBwcm90b2NvbCBUaGUge0BsaW5rIElIdWJQcm90b2NvbH0gaW1wbGVtZW50YXRpb24gdG8gdXNlLlxyXG4gICAgICovXHJcbiAgICBIdWJDb25uZWN0aW9uQnVpbGRlci5wcm90b3R5cGUud2l0aEh1YlByb3RvY29sID0gZnVuY3Rpb24gKHByb3RvY29sKSB7XHJcbiAgICAgICAgQXJnLmlzUmVxdWlyZWQocHJvdG9jb2wsIFwicHJvdG9jb2xcIik7XHJcbiAgICAgICAgdGhpcy5wcm90b2NvbCA9IHByb3RvY29sO1xyXG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfTtcclxuICAgIC8qKiBDcmVhdGVzIGEge0BsaW5rIEh1YkNvbm5lY3Rpb259IGZyb20gdGhlIGNvbmZpZ3VyYXRpb24gb3B0aW9ucyBzcGVjaWZpZWQgaW4gdGhpcyBidWlsZGVyLlxyXG4gICAgICpcclxuICAgICAqIEByZXR1cm5zIHtIdWJDb25uZWN0aW9ufSBUaGUgY29uZmlndXJlZCB7QGxpbmsgSHViQ29ubmVjdGlvbn0uXHJcbiAgICAgKi9cclxuICAgIEh1YkNvbm5lY3Rpb25CdWlsZGVyLnByb3RvdHlwZS5idWlsZCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAvLyBJZiBodHRwQ29ubmVjdGlvbk9wdGlvbnMgaGFzIGEgbG9nZ2VyLCB1c2UgaXQuIE90aGVyd2lzZSwgb3ZlcnJpZGUgaXQgd2l0aCB0aGUgb25lXHJcbiAgICAgICAgLy8gcHJvdmlkZWQgdG8gY29uZmlndXJlTG9nZ2VyXHJcbiAgICAgICAgdmFyIGh0dHBDb25uZWN0aW9uT3B0aW9ucyA9IHRoaXMuaHR0cENvbm5lY3Rpb25PcHRpb25zIHx8IHt9O1xyXG4gICAgICAgIC8vIElmIGl0J3MgJ251bGwnLCB0aGUgdXNlciAqKmV4cGxpY2l0bHkqKiBhc2tlZCBmb3IgbnVsbCwgZG9uJ3QgbWVzcyB3aXRoIGl0LlxyXG4gICAgICAgIGlmIChodHRwQ29ubmVjdGlvbk9wdGlvbnMubG9nZ2VyID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgLy8gSWYgb3VyIGxvZ2dlciBpcyB1bmRlZmluZWQgb3IgbnVsbCwgdGhhdCdzIE9LLCB0aGUgSHR0cENvbm5lY3Rpb24gY29uc3RydWN0b3Igd2lsbCBoYW5kbGUgaXQuXHJcbiAgICAgICAgICAgIGh0dHBDb25uZWN0aW9uT3B0aW9ucy5sb2dnZXIgPSB0aGlzLmxvZ2dlcjtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gTm93IGNyZWF0ZSB0aGUgY29ubmVjdGlvblxyXG4gICAgICAgIGlmICghdGhpcy51cmwpIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiVGhlICdIdWJDb25uZWN0aW9uQnVpbGRlci53aXRoVXJsJyBtZXRob2QgbXVzdCBiZSBjYWxsZWQgYmVmb3JlIGJ1aWxkaW5nIHRoZSBjb25uZWN0aW9uLlwiKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdmFyIGNvbm5lY3Rpb24gPSBuZXcgSHR0cENvbm5lY3Rpb24odGhpcy51cmwsIGh0dHBDb25uZWN0aW9uT3B0aW9ucyk7XHJcbiAgICAgICAgcmV0dXJuIEh1YkNvbm5lY3Rpb24uY3JlYXRlKGNvbm5lY3Rpb24sIHRoaXMubG9nZ2VyIHx8IE51bGxMb2dnZXIuaW5zdGFuY2UsIHRoaXMucHJvdG9jb2wgfHwgbmV3IEpzb25IdWJQcm90b2NvbCgpKTtcclxuICAgIH07XHJcbiAgICByZXR1cm4gSHViQ29ubmVjdGlvbkJ1aWxkZXI7XHJcbn0oKSk7XHJcbmV4cG9ydCB7IEh1YkNvbm5lY3Rpb25CdWlsZGVyIH07XHJcbmZ1bmN0aW9uIGlzTG9nZ2VyKGxvZ2dlcikge1xyXG4gICAgcmV0dXJuIGxvZ2dlci5sb2cgIT09IHVuZGVmaW5lZDtcclxufVxyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1IdWJDb25uZWN0aW9uQnVpbGRlci5qcy5tYXAiLCIvLyBDb3B5cmlnaHQgKGMpIC5ORVQgRm91bmRhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cclxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMC4gU2VlIExpY2Vuc2UudHh0IGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIGxpY2Vuc2UgaW5mb3JtYXRpb24uXHJcbi8vIFZlcnNpb24gdG9rZW4gdGhhdCB3aWxsIGJlIHJlcGxhY2VkIGJ5IHRoZSBwcmVwYWNrIGNvbW1hbmRcclxuLyoqIFRoZSB2ZXJzaW9uIG9mIHRoZSBTaWduYWxSIGNsaWVudC4gKi9cclxuZXhwb3J0IHZhciBWRVJTSU9OID0gXCIxLjAuMFwiO1xyXG5leHBvcnQgeyBIdHRwRXJyb3IsIFRpbWVvdXRFcnJvciB9IGZyb20gXCIuL0Vycm9yc1wiO1xyXG5leHBvcnQgeyBEZWZhdWx0SHR0cENsaWVudCwgSHR0cENsaWVudCwgSHR0cFJlc3BvbnNlIH0gZnJvbSBcIi4vSHR0cENsaWVudFwiO1xyXG5leHBvcnQgeyBIdWJDb25uZWN0aW9uIH0gZnJvbSBcIi4vSHViQ29ubmVjdGlvblwiO1xyXG5leHBvcnQgeyBIdWJDb25uZWN0aW9uQnVpbGRlciB9IGZyb20gXCIuL0h1YkNvbm5lY3Rpb25CdWlsZGVyXCI7XHJcbmV4cG9ydCB7IE1lc3NhZ2VUeXBlIH0gZnJvbSBcIi4vSUh1YlByb3RvY29sXCI7XHJcbmV4cG9ydCB7IExvZ0xldmVsIH0gZnJvbSBcIi4vSUxvZ2dlclwiO1xyXG5leHBvcnQgeyBIdHRwVHJhbnNwb3J0VHlwZSwgVHJhbnNmZXJGb3JtYXQgfSBmcm9tIFwiLi9JVHJhbnNwb3J0XCI7XHJcbmV4cG9ydCB7IE51bGxMb2dnZXIgfSBmcm9tIFwiLi9Mb2dnZXJzXCI7XHJcbmV4cG9ydCB7IEpzb25IdWJQcm90b2NvbCB9IGZyb20gXCIuL0pzb25IdWJQcm90b2NvbFwiO1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXAiLCIvL2ltcG9ydCAqIGFzIHNpZ25hbFIgZnJvbSBcInNpZ25hbHIuanNcIjtcclxuLy9pbXBvcnQgc2lnbmFsUiA9IHJlcXVpcmUoXCIuL3NpZ25hbHIuanNcIik7XHJcblxyXG5pbXBvcnQgJy4uL2Nzcy9zdHlsZS5sZXNzJztcclxuaW1wb3J0IHsgSHViQ29ubmVjdGlvbkJ1aWxkZXIsIEh1YkNvbm5lY3Rpb24gfSBmcm9tIFwiQGFzcG5ldC9zaWduYWxyXCI7XHJcbmltcG9ydCB7IFJlcXVlc3RlciB9IGZyb20gXCIuL1JlcXVlc3RlclwiO1xyXG4vL2ltcG9ydCB7IG1vZHVsZSB9IGZyb20gXCIuLi8uLi93ZWJwYWNrLmNvbmZpZ1wiO1xyXG5cclxuLypmdW5jdGlvbiB0ZXN0UXVlcnkoKVxyXG57XHJcbiAgICB4aHIub3BlbignUE9TVCcsIFwiRnVuY3Rpb24vR2V0U3VtbW9uZXJJbmZvXCIsIHRydWUpO1xyXG4gICAgeGhyLm9ucmVhZHlzdGF0ZWNoYW5nZSA9IHByb2Nlc3NSZXF1ZXN0O1xyXG5cclxuICAgIGxldCBlbmRwb2ludCA9IFwiZXV3MVwiO1xyXG4gICAgbGV0IG5hbWUgPSBcImhlbW1vbGVnXCI7XHJcbiAgICBsZXQga2V5ID0gXCJSR0FQSS0xZDExOWEyOC0yYTcxLTRiNmMtYTAyNi0zNTYwNTU0MGY2ODRcIjtcclxuXHJcbiAgICB4aHIuc2V0UmVxdWVzdEhlYWRlcihcIkNvbnRlbnQtVHlwZVwiLCBcImFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD1VVEYtOFwiKTtcclxuICAgIHhoci5zZW5kKEpTT04uc3RyaW5naWZ5KHsgXCJlbmRwb2ludFwiOiBlbmRwb2ludCwgXCJuYW1lXCI6IG5hbWUsIFwia2V5XCI6IGtleX0pKTtcclxufSovXHJcblxyXG4vKmZ1bmN0aW9uIHByb2Nlc3NSZXF1ZXN0KGUgOkV2ZW50KVxyXG57XHJcbiAgICBzd2l0Y2goeGhyLnJlYWR5U3RhdGUpXHJcbiAgICB7XHJcbiAgICAgICAgY2FzZSAxOiBjb25zb2xlLmxvZyhcImNoYW5uZWxTZXJ2ZXJNc2cgb3BlbiwgcmVxdWVzdCBub3Qgc2VudFwiKTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIGNhc2UgMjogY29uc29sZS5sb2coXCJyZXF1ZXN0IHNlbnQsIHN0YXR1cyBpcyBcIiArIHhoci5zdGF0dXMgKyBcIiBcIiArIHhoci5zdGF0dXNUZXh0KTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIGNhc2UgMzogY29uc29sZS5sb2coXCJkb3dubG9hZGluZy4uLlwiKTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIGNhc2UgNDogdmFyIHJlc3BvbnNlID0gSlNPTi5wYXJzZSh4aHIucmVzcG9uc2VUZXh0KTtcclxuICAgICAgICAgICAgbGV0IHRlc3RNYXRjaGVzSW5mbyA9IHJlc3BvbnNlIGFzIERCTWF0Y2hbXTtcclxuICAgICAgICAgICAgY29uc29sZS5sb2cocmVzcG9uc2UpO1xyXG4gICAgICAgICAgICBjb25zb2xlLmxvZyh0ZXN0TWF0Y2hlc0luZm8ubGVuZ3RoKTtcclxuICAgICAgICAgICAgICAgIC8qbGV0IHRlc3RXaW5SYXRlID0gcmVzcG9uc2UgYXMgV2lucmF0ZUluZm87XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhyZXNwb25zZSk7XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyh0ZXN0V2luUmF0ZS5XaW5SYXRlKTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgfSAgICBcclxufSovXHJcblxyXG52YXIgYnRuVXBkYXRlREI6IEpRdWVyeTxIVE1MRWxlbWVudD47XHJcbnZhciBpbnB1dEFwaUtleTogSlF1ZXJ5PEhUTUxFbGVtZW50PjtcclxudmFyIGRkQ2hhbXBpb246IEpRdWVyeTxIVE1MRWxlbWVudD5cclxuXHJcbnZhciByZXF1ZXN0ZXJXaW5yYXRlOiBSZXF1ZXN0ZXI7XHJcbnZhciByZXF1ZXN0ZXJVcGRhdGVEQjogUmVxdWVzdGVyO1xyXG52YXIgcmVxdWVzdGVyQ2hhbXBpb25JY29uU3RyaW5nOiBSZXF1ZXN0ZXI7XHJcbnZhciBjaGFubmVsU2VydmVyTXNnOiBIdWJDb25uZWN0aW9uO1xyXG5cclxuaWYgKG1vZHVsZS5ob3QpXHJcbntcclxuICAgIG1vZHVsZS5ob3QuYWNjZXB0KCk7LypbXSxcclxuICAgICAgICBmdW5jdGlvbigpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBjb25zb2xlLmxvZygnQWNjZXB0aW5nIHRoZSB1cGRhdGVkIHByaW50TWUgbW9kdWxlIScpO1xyXG4gICAgICAgIH0pOyovXHJcbn1cclxuXHJcbndpbmRvdy5vbmxvYWQgPSBvbkxvYWQ7XHJcblxyXG5cclxuXHJcbmZ1bmN0aW9uIG9uTG9hZCgpXHJcbntcclxuICAgIGNoYW5uZWxTZXJ2ZXJNc2cgPSBuZXcgSHViQ29ubmVjdGlvbkJ1aWxkZXIoKVxyXG4gICAgICAgIC53aXRoVXJsKFwiL2NoYXRIdWJcIilcclxuICAgICAgICAuYnVpbGQoKTtcclxuXHJcbiAgICBidG5VcGRhdGVEQiA9ICQoXCIjYnRuVXBkYXRlREJcIik7XHJcbiAgICBpbnB1dEFwaUtleSA9ICQoXCIjaW5wdXRBcGlLZXlcIik7XHJcbiAgICBkZENoYW1waW9uID0gJChcIiNkZENoYW1waW9uXCIpO1xyXG5cclxuICAgIGJ0blVwZGF0ZURCLmNsaWNrKG9uQ2xpY2tCdG5VcGRhdGVEQilcclxuICAgICAgICAudG9nZ2xlQ2xhc3MoXCJBbmltVXBkYXRlREJcIilcclxuICAgICAgICAudGV4dChcImxvb2tpbmcgZm9yIG5ldyBnYW1lcy4uLlwiKVxyXG4gICAgICAgIC5wcm9wKFwiZGlzYWJsZWRcIiwgdHJ1ZSk7XHJcblxyXG4gICAgaW5wdXRBcGlLZXkub24oXCJ0cmFuc2l0aW9uZW5kXCIsZnVuY3Rpb24oKVxyXG4gICAge1xyXG4gICAgICAgIGlmICgkKFwiI3RvcENvbnRhaW5lclwiKS5oYXNDbGFzcyhcInRvcENvbnRhaW5lck9uTm9SaW90Q29ubmVjdGlvblwiKSlcclxuICAgICAgICAgICAgaW5wdXRBcGlLZXkuY3NzKFwiekluZGV4XCIsIDApO1xyXG4gICAgICAgIGVsc2VcclxuICAgICAgICAgICAgaW5wdXRBcGlLZXkuY3NzKFwiekluZGV4XCIsIC0xKTtcclxuICAgIH0pO1xyXG5cclxuICAgIGRkQ2hhbXBpb24ub24oXCJjaGFuZ2VcIiwgIG9uRGRDaGFtcGlvblNlbGVjdCk7XHJcblxyXG4gICAgcmVxdWVzdGVyV2lucmF0ZSA9IG5ldyBSZXF1ZXN0ZXIoXCJodHRwczovL2xvY2FsaG9zdDo1MDAxL01haW4vR2V0V2lucmF0ZUJ5Q2hhbXBJRC9cIik7XHJcbiAgICByZXF1ZXN0ZXJXaW5yYXRlLnJlcXVlc3Rlci5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBzZXRXaW5yYXRlSW5mbztcclxuXHJcbiAgICByZXF1ZXN0ZXJVcGRhdGVEQiA9IG5ldyBSZXF1ZXN0ZXIoXCJodHRwczovL2xvY2FsaG9zdDo1MDAxL01haW4vR2V0QWxsUGxheWVkQ2hhbXBpb25zXCIpO1xyXG4gICAgcmVxdWVzdGVyVXBkYXRlREIucmVxdWVzdGVyLm9ucmVhZHlzdGF0ZWNoYW5nZSA9IHNldEFsbFBsYXllZENoYW1waW9ucztcclxuICAgIHJlcXVlc3RlclVwZGF0ZURCLnNlbmQoKTtcclxuXHJcblxyXG4gICAgY2hhbm5lbFNlcnZlck1zZy5vbihcIlJlY2VpdmVNZXNzYWdlXCIsXHJcbiAgICAgICAgKHVzZXIsIG1lc3NhZ2UpID0+XHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBjb25zdCBtc2cgPSBtZXNzYWdlLnJlcGxhY2UoLyYvZywgXCImYW1wO1wiKS5yZXBsYWNlKC88L2csIFwiJmx0O1wiKS5yZXBsYWNlKC8+L2csIFwiJmd0O1wiKTtcclxuICAgICAgICAgICAgY29uc3QgZW5jb2RlZE1zZyA9IHVzZXIgKyBcIiBzYXlzIFwiICsgbXNnO1xyXG4gICAgICAgICAgICBjb25zdCBsaSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJsaVwiKTtcclxuICAgICAgICAgICAgbGkudGV4dENvbnRlbnQgPSBlbmNvZGVkTXNnO1xyXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhlbmNvZGVkTXNnKTtcclxuICAgICAgICB9XHJcbiAgICApO1xyXG5cclxuICAgIGNoYW5uZWxTZXJ2ZXJNc2cub24oXCJVcGRhdGVCdG5VcGRhdGVEQlRleHRcIixcclxuICAgICAgICAodXNlciwgbWVzc2FnZSkgPT5cclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGJ0blVwZGF0ZURCLnRleHQoXCJVcGRhdGUgREIgKFwiICsgbWVzc2FnZSArIFwiKVwiKVxyXG4gICAgICAgICAgICAgICAgLnByb3AoXCJkaXNhYmxlZFwiLCBmYWxzZSlcclxuICAgICAgICAgICAgICAgIC50b2dnbGVDbGFzcyhcIkFuaW1VcGRhdGVEQlwiKTtcclxuXHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKHVzZXIsIG1lc3NhZ2UpO1xyXG5cclxuICAgICAgICAgICAgaWYgKG1lc3NhZ2UgPT09IFwiTm8gbmV3IE1hdGNoZXNcIilcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgYnRuVXBkYXRlREIudGV4dChcIk5vIG5ldyBNYXRjaGVzXCIpO1xyXG4gICAgICAgICAgICAgICAgYnRuVXBkYXRlREIucHJvcChcImRpc2FibGVkXCIsIHRydWUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmIChtZXNzYWdlID09PSBcIk5vIGNvbm5lY3Rpb24gdG8gUmlvdCBTZXJ2ZXJzXCIpXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGJ0blVwZGF0ZURCLnRleHQobWVzc2FnZSk7XHJcbiAgICAgICAgICAgICAgICBidG5VcGRhdGVEQi5wcm9wKFwiZGlzYWJsZWRcIiwgdHJ1ZSk7XHJcbiAgICAgICAgICAgICAgICAkKFwiI3RvcENvbnRhaW5lclwiKS5hZGRDbGFzcyhcInRvcENvbnRhaW5lck9uTm9SaW90Q29ubmVjdGlvblwiKTtcclxuICAgICAgICAgICAgICAgIGlucHV0QXBpS2V5Lm9uKFwia2V5cHJlc3NcIiwgb25LZXlwcmVzc0lucHV0QXBpS2V5KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIGlmICgkKFwiI3RvcENvbnRhaW5lclwiKS5oYXNDbGFzcyhcInRvcENvbnRhaW5lck9uTm9SaW90Q29ubmVjdGlvblwiKSlcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgaW5wdXRBcGlLZXkuY3NzKFwiekluZGV4XCIsIC0xKTtcclxuICAgICAgICAgICAgICAgICQoXCIjdG9wQ29udGFpbmVyXCIpLnRvZ2dsZUNsYXNzKFwidG9wQ29udGFpbmVyT25Ob1Jpb3RDb25uZWN0aW9uXCIpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgKTtcclxuXHJcbiAgICBjaGFubmVsU2VydmVyTXNnLm9uKFwiQWRkTWVzc2FnZVRvQ29uc29sZVwiLFxyXG4gICAgICAgICh1c2VyLCBtZXNzYWdlKSA9PiB7XHJcbiAgICAgICAgICAgIGFkZE1lc3NhZ2VUb0NvbnNvbGUobWVzc2FnZSk7XHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKHVzZXIsIG1lc3NhZ2UpO1xyXG4gICAgICAgIH1cclxuICAgICk7XHJcblxyXG4gICAgY2hhbm5lbFNlcnZlck1zZy5zdGFydCgpLmNhdGNoKGVyciA9PiBjb25zb2xlLmVycm9yKGVyci50b1N0cmluZygpKSk7XHJcblxyXG4gICAgJChcIiNidG5UZXN0XCIpLmNsaWNrKGZ1bmN0aW9uKClcclxuICAgIHtcclxuICAgICAgICB2YXIgeCA9IG5ldyBSZXF1ZXN0ZXIoXCJodHRwczovL2xvY2FsaG9zdDo1MDAxL01haW4vTWFpbi9cIik7XHJcbiAgICAgICAgeC5zZW5kKCk7XHJcbiAgICB9KTtcclxuXHJcbiAgICB2YXIgcmVxdWVzdGVyTWFpbiA9IG5ldyBSZXF1ZXN0ZXIoXCJodHRwczovL2xvY2FsaG9zdDo1MDAxL01haW4vTWFpbi9cIik7XHJcbiAgICByZXF1ZXN0ZXJNYWluLnNlbmQoKTtcclxuXHJcbiAgICBpID0gMDtcclxuICAgICQoXCIjYnRuQWRkTWVzc2FnZVwiKS5jbGljayhvbkJ0bkFkZE1lc3NhZ2VDbGljayk7XHJcbiAgICAkKFwiI2J0blVwZGF0ZVN0YXRpY0NoYW1waW9uRGF0YVwiKS5jbGljayhvbkJ0blVwZGF0ZVN0YXRpY0NoYW1waW9uRGF0YUNsaWNrKTtcclxufVxyXG5cclxuZnVuY3Rpb24gb25LZXlwcmVzc0lucHV0QXBpS2V5KGUgOiBhbnkpXHJcbntcclxuICAgIHZhciBrZXkgPSBlLndoaWNoO1xyXG4gICAgaWYgKGtleSA9PSAxMylcclxuICAgIHtcclxuICAgICAgICB2YXIgcmVxdWVzdGVyID0gbmV3IFJlcXVlc3RlcihcImh0dHBzOi8vbG9jYWxob3N0OjUwMDEvTWFpbi9VcGRhdGVBcGlLZXkvXCIpO1xyXG4gICAgICAgIHJlcXVlc3Rlci5wYXJhbWV0ZXIgPSBpbnB1dEFwaUtleS52YWwoKS50b1N0cmluZygpO1xyXG4gICAgICAgIHJlcXVlc3Rlci5zZW5kKCk7XHJcbiAgICAgICAgYnRuVXBkYXRlREIudGV4dChcImxvb2tpbmcgZm9yIG5ldyBnYW1lcy4uLlwiKTtcclxuICAgICAgICBidG5VcGRhdGVEQi50b2dnbGVDbGFzcyhcIkFuaW1VcGRhdGVEQlwiKTtcclxuICAgICAgICBpbnB1dEFwaUtleS5vZmYoXCJrZXlwcmVzc1wiKTtcclxuICAgIH1cclxufVxyXG5cclxuZnVuY3Rpb24gYWRkTWVzc2FnZVRvQ29uc29sZShtZXNzYWdlOiBzdHJpbmcpXHJcbntcclxuICAgICQoXCIjdXBkYXRlc1wiKS5hcHBlbmQoJzxsYWJlbD4nICsgbWVzc2FnZSArICc8L2xhYmVsPjxici8+Jyk7XHJcbiAgICBcclxuICAgIHZhciBzY3JvbGxQb3MgPSAkKFwiI3VwZGF0ZXMgPiBsYWJlbDpsYXN0XCIpLmhlaWdodCgpICogJChcIiN1cGRhdGVzXCIpLmNoaWxkcmVuKCkubGVuZ3RoIC8gMjtcclxuICAgICQoXCIjdXBkYXRlc1wiKS5hbmltYXRlKHsgc2Nyb2xsVG9wOiBzY3JvbGxQb3MgfSwgMCwgXCJcIiwgKCkgPT4geyB9KTtcclxufVxyXG5cclxudmFyIGkgOiBudW1iZXI7XHJcbmZ1bmN0aW9uIG9uQnRuQWRkTWVzc2FnZUNsaWNrKClcclxue1xyXG4gICAgYWRkTWVzc2FnZVRvQ29uc29sZShcInRlc3QgXCIgKyBpKTtcclxuICAgIGkrKztcclxufVxyXG5cclxuZnVuY3Rpb24gb25EZENoYW1waW9uU2VsZWN0KGU6IEV2ZW50KVxyXG57XHJcbiAgICB2YXIgc2VsZWN0ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJkZENoYW1waW9uXCIpIGFzIEhUTUxTZWxlY3RFbGVtZW50O1xyXG4gICAgcmVxdWVzdGVyV2lucmF0ZS5wYXJhbWV0ZXIgPSBzZWxlY3Qub3B0aW9uc1tzZWxlY3Quc2VsZWN0ZWRJbmRleF0udmFsdWUudG9TdHJpbmcoKTtcclxuXHJcbiAgICByZXF1ZXN0ZXJDaGFtcGlvbkljb25TdHJpbmcgPSBuZXcgUmVxdWVzdGVyKFwiaHR0cHM6Ly9sb2NhbGhvc3Q6NTAwMS9NYWluL0dldENoYW1waW9uSWNvblN0cmluZ0J5SURBc3luYy9cIik7XHJcbiAgICByZXF1ZXN0ZXJDaGFtcGlvbkljb25TdHJpbmcucGFyYW1ldGVyID0gc2VsZWN0Lm9wdGlvbnNbc2VsZWN0LnNlbGVjdGVkSW5kZXhdLnZhbHVlLnRvU3RyaW5nKCk7XHJcbiAgICByZXF1ZXN0ZXJDaGFtcGlvbkljb25TdHJpbmcucmVxdWVzdGVyLm9ucmVhZHlzdGF0ZWNoYW5nZSA9IHNldEljb25TdHJpbmc7XHJcblxyXG4gICAgcmVxdWVzdGVyQ2hhbXBpb25JY29uU3RyaW5nLnNlbmQoKTtcclxuXHJcbiAgICByZXF1ZXN0ZXJXaW5yYXRlLnNlbmQoKTtcclxufVxyXG5cclxuZnVuY3Rpb24gc2V0V2lucmF0ZUluZm8oZTogRXZlbnQpXHJcbntcclxuICAgIGlmIChyZXF1ZXN0ZXJXaW5yYXRlLnJlcXVlc3Rlci5yZWFkeVN0YXRlID09PSA0KVxyXG4gICAge1xyXG4gICAgICAgIHZhciByZXNwb25zZSA9IEpTT04ucGFyc2UocmVxdWVzdGVyV2lucmF0ZS5yZXF1ZXN0ZXIucmVzcG9uc2VUZXh0KTtcclxuICAgICAgICBjb25zb2xlLmxvZyhyZXNwb25zZSk7XHJcblxyXG4gICAgICAgIC8vY2hlY2sgTmFOJ3NcclxuICAgICAgICBpZiAocmVzcG9uc2UuV2luUmF0ZTJXZWVrcy50b1N0cmluZygpID09PSBcIk5hTlwiKVxyXG4gICAgICAgICAgICByZXNwb25zZS5XaW5SYXRlMldlZWtzID0gXCItXCI7XHJcblxyXG4gICAgICAgIGlmIChyZXNwb25zZS5XaW5SYXRlM01vbnRocy50b1N0cmluZygpID09PSBcIk5hTlwiKVxyXG4gICAgICAgICAgICByZXNwb25zZS5XaW5SYXRlM01vbnRocyA9IFwiLVwiO1xyXG5cclxuICAgICAgICBpZiAocmVzcG9uc2UuV2luUmF0ZS50b1N0cmluZygpID09PSBcIk5hTlwiKVxyXG4gICAgICAgICAgICByZXNwb25zZS5XaW5SYXRlID0gXCItXCI7XHJcblxyXG4gICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwibGJsV2luUmF0ZTJXZWVrc1wiKS5pbm5lclRleHQgPSByZXNwb25zZS5XaW5SYXRlMldlZWtzLnRvU3RyaW5nKCkgKyBcIiVcIjtcclxuICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImxibEdhbWVzUGxheWVkMldlZWtzXCIpLmlubmVyVGV4dCA9IHJlc3BvbnNlLkdhbWVDb3VudDJXZWVrcy50b1N0cmluZygpO1xyXG4gICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwibGJsQXZnR2FtZVRpbWUyV2Vla3NcIikuaW5uZXJUZXh0ID0gY29udmVydFNlY29uZHNUb1RpbWUoIHJlc3BvbnNlLkF2Z0dhbWVUaW1lMldlZWtzICk7XHJcbiAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJsYmxXaW5SYXRlM01vbnRoc1wiKS5pbm5lclRleHQgPSByZXNwb25zZS5XaW5SYXRlM01vbnRocy50b1N0cmluZygpICsgXCIlXCI7XHJcbiAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJsYmxHYW1lc1BsYXllZDNNb250aHNcIikuaW5uZXJUZXh0ID0gcmVzcG9uc2UuR2FtZUNvdW50M01vbnRocy50b1N0cmluZygpO1xyXG4gICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwibGJsQXZnR2FtZVRpbWUzTW9udGhzXCIpLmlubmVyVGV4dCA9IGNvbnZlcnRTZWNvbmRzVG9UaW1lKCByZXNwb25zZS5BdmdHYW1lVGltZTNNb250aHMgKTtcclxuICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImxibFdpblJhdGVcIikuaW5uZXJUZXh0ID0gcmVzcG9uc2UuV2luUmF0ZS50b1N0cmluZygpICsgXCIlXCI7XHJcbiAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJsYmxHYW1lc1BsYXllZFwiKS5pbm5lclRleHQgPSByZXNwb25zZS5HYW1lQ291bnQudG9TdHJpbmcoKTtcclxuICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImxibEF2Z0dhbWVUaW1lXCIpLmlubmVyVGV4dCA9IGNvbnZlcnRTZWNvbmRzVG9UaW1lKCByZXNwb25zZS5BdmdHYW1lVGltZSApO1xyXG4gICAgfVxyXG59XHJcblxyXG5mdW5jdGlvbiBzZXRJY29uU3RyaW5nKClcclxue1xyXG4gICAgaWYgKHJlcXVlc3RlckNoYW1waW9uSWNvblN0cmluZy5yZXF1ZXN0ZXIucmVhZHlTdGF0ZSA9PT0gNClcclxuICAgIHtcclxuICAgICAgICB2YXIgcmVzcG9uc2UgPSByZXF1ZXN0ZXJDaGFtcGlvbkljb25TdHJpbmcucmVxdWVzdGVyLnJlc3BvbnNlVGV4dDtcclxuXHJcbiAgICAgICAgJChcIiNpY29uQ2hhbXBpb25cIikuYXR0cihcInNyY1wiLCBcImh0dHBzOi8vZGRyYWdvbi5sZWFndWVvZmxlZ2VuZHMuY29tL2Nkbi83LjEwLjEvaW1nL2NoYW1waW9uL1wiICsgcmVzcG9uc2UpO1xyXG4gICAgICAgICQoXCIjaWNvbkNoYW1waW9uXCIpLmFkZENsYXNzKFwiZ3JheVwiKTtcclxuICAgICAgICAkKFwiI2ljb25DaGFtcGlvblwiKS5vbihcImxvYWRcIiwgZnVuY3Rpb24oKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgJChcIiNpY29uQ2hhbXBpb25cIikucmVtb3ZlQ2xhc3MoXCJncmF5XCIpO1xyXG4gICAgICAgIH0pO1xyXG5cclxuXHJcbiAgICAgICAgY29uc29sZS5sb2coXCJpY29uIGFkZHJlc3M6IFwiICsgXCJodHRwczovL2RkcmFnb24ubGVhZ3Vlb2ZsZWdlbmRzLmNvbS9jZG4vNy4xMC4xL2ltZy9jaGFtcGlvbi9cIiArIHJlc3BvbnNlKTtcclxuICAgIH1cclxufVxyXG5cclxuZnVuY3Rpb24gc2V0QWxsUGxheWVkQ2hhbXBpb25zKGU6IEV2ZW50KVxyXG57XHJcbiAgICBpZiAocmVxdWVzdGVyVXBkYXRlREIucmVxdWVzdGVyLnJlYWR5U3RhdGUgPT09IDQpXHJcbiAgICB7XHJcbiAgICAgICAgY29uc3QgcmVzcG9uc2UgPSBKU09OLnBhcnNlKHJlcXVlc3RlclVwZGF0ZURCLnJlcXVlc3Rlci5yZXNwb25zZVRleHQpO1xyXG4gICAgICAgIGNvbnNvbGUubG9nKHJlc3BvbnNlKTtcclxuXHJcbiAgICAgICAgcmVzcG9uc2UuZm9yRWFjaCgoY2hhbXBpb246IGFueSkgPT5cclxuICAgICAgICB7XHJcbiAgICAgICAgICAgICQuZWFjaChyZXNwb25zZSwgZnVuY3Rpb24gKGksIGl0ZW0pXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGRkQ2hhbXBpb24uYXBwZW5kKCAkKCc8b3B0aW9uPicsIHsgdmFsdWU6IGl0ZW0uaWQsIHRleHQ6IGl0ZW0ubmFtZX0pICk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICBvbkRkQ2hhbXBpb25TZWxlY3QobmV3IEV2ZW50KG51bGwpKTtcclxuICAgIH1cclxufVxyXG5cclxuXHJcbmZ1bmN0aW9uIG9uQ2xpY2tCdG5VcGRhdGVEQigpXHJcbntcclxuICAgIC8vY2hhbm5lbFNlcnZlck1zZy5pbnZva2UoXCJTZW5kTWVzc2FnZVwiLCBcIm9uQ2xpY2tVcGRhdGVEQlwiLCBcIm9uQ2xpY2tVcGRhdGVEQk1zZ1wiKS5jYXRjaChlcnIgPT4gY29uc29sZS5lcnJvcihlcnIudG9TdHJpbmcoKSkpO1xyXG5cclxuICAgIHJlcXVlc3RlclVwZGF0ZURCID0gbmV3IFJlcXVlc3RlcihcImh0dHBzOi8vbG9jYWxob3N0OjUwMDEvTWFpbi9VcGRhdGVEQlwiKTtcclxuICAgIHJlcXVlc3RlclVwZGF0ZURCLnNlbmQoKTtcclxuXHJcbiAgICByZXF1ZXN0ZXJVcGRhdGVEQi5yZXF1ZXN0ZXIub25sb2FkID0gb25VcGRhdGVEQlN1Y2Nlc3M7XHJcblxyXG4gICAgYnRuVXBkYXRlREIudG9nZ2xlQ2xhc3MoXCJBbmltVXBkYXRlREJcIik7XHJcbiAgICAkKFwiI3ZlaWxcIikuY3NzKFwiZGlzcGxheVwiLCBcImJsb2NrXCIpO1xyXG4gICAgJChcIiNjb25zb2xlQ29udGFpbmVyXCIpLnRvZ2dsZUNsYXNzKFwic2NhbGUxXCIpO1xyXG59XHJcblxyXG5mdW5jdGlvbiBvblVwZGF0ZURCU3VjY2VzcygpXHJcbntcclxuICAgIGNvbnNvbGUubG9nKFwiVXBkYXRlREIgZG9uZVwiKTtcclxuICAgICQoXCIjdmVpbFwiKS5jc3MoXCJkaXNwbGF5XCIsIFwibm9uZVwiKTtcclxuICAgICQoXCIjY29uc29sZUNvbnRhaW5lclwiKS50b2dnbGVDbGFzcyhcInNjYWxlMVwiKTtcclxuICAgIGJ0blVwZGF0ZURCLnRleHQoXCJEQiBpcyB1cCB0byBkYXRlXCIpO1xyXG4gICAgYnRuVXBkYXRlREIucHJvcChcImRpc2FibGVkXCIsIHRydWUpO1xyXG4gICAgYnRuVXBkYXRlREIudG9nZ2xlQ2xhc3MoXCJBbmltVXBkYXRlREJcIik7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGNvbnZlcnRTZWNvbmRzVG9UaW1lKHNlY29uZHMgOiBudW1iZXIpXHJcbntcclxuICAgIGlmIChzZWNvbmRzID09PSAwKVxyXG4gICAgICAgIHJldHVybiBcIi0tOi0tXCI7XHJcblxyXG4gICAgbGV0IG1pbnV0ZXMgPSBNYXRoLmZsb29yKHNlY29uZHMgLyA2MCk7XHJcbiAgICB2YXIgc2VjcyA9IE1hdGguZmxvb3Ioc2Vjb25kcyAtIG1pbnV0ZXMgKiA2MCk7XHJcbiAgICBsZXQgc2Vjc1MgPSBzZWNzIDwgMTAgPyBgMCR7c2Vjc31gIDogc2VjcztcclxuICAgIHJldHVybiBtaW51dGVzICsgXCI6XCIgKyBzZWNzUztcclxufVxyXG5cclxuZnVuY3Rpb24gb25CdG5VcGRhdGVTdGF0aWNDaGFtcGlvbkRhdGFDbGljaygpXHJcbntcclxuICAgIHZhciByZXF1ZXN0ZXJVcGRhdGVTdGF0aWNDaGFtcGlvbkRhdGEgPSBuZXcgUmVxdWVzdGVyKFwiaHR0cHM6Ly9sb2NhbGhvc3Q6NTAwMS9NYWluL1VwZGF0ZVN0YXRpY0NoYW1waW9uRGF0YVwiKTtcclxuICAgIHJlcXVlc3RlclVwZGF0ZVN0YXRpY0NoYW1waW9uRGF0YS5zZW5kKCk7XHJcbiAgICByZXF1ZXN0ZXJVcGRhdGVTdGF0aWNDaGFtcGlvbkRhdGEucmVxdWVzdGVyLm9ubG9hZCA9IG9uVXBkYXRlU3RhdGljQ2hhbXBpb25EYXRhU3VjY2VzcztcclxuICAgIGJ0blVwZGF0ZURCLnRvZ2dsZUNsYXNzKFwiQW5pbVVwZGF0ZURCXCIpO1xyXG59XHJcblxyXG5mdW5jdGlvbiBvblVwZGF0ZVN0YXRpY0NoYW1waW9uRGF0YVN1Y2Nlc3MoKVxyXG57XHJcbiAgICAvL2NvbnNvbGUubG9nKFwiVXBkYXRlIHN0YXRpYyBjaGFtcGlvbiBkYXRhIGRvbmVcIik7XHJcbiAgICBidG5VcGRhdGVEQi50ZXh0KFwiVXBkYXRlZCBzdGF0aWMgY2hhbXBpb24gZGF0YVwiKTtcclxuICAgIGJ0blVwZGF0ZURCLnByb3AoXCJkaXNhYmxlZFwiLCB0cnVlKTtcclxuICAgIGJ0blVwZGF0ZURCLnRvZ2dsZUNsYXNzKFwiQW5pbVVwZGF0ZURCXCIpO1xyXG59IiwiZXhwb3J0IGNsYXNzIFJlcXVlc3RlclxyXG57XHJcbiAgICByZXF1ZXN0ZXI6IFhNTEh0dHBSZXF1ZXN0O1xyXG4gICAgYWRkcmVzczogc3RyaW5nO1xyXG4gICAgcGFyYW1ldGVyID0gXCJcIjtcclxuXHJcbiAgICBjb25zdHJ1Y3RvcihwdWJsaWMgYWRkcmVzc1BhcmFtOiBzdHJpbmcpXHJcbiAgICB7XHJcbiAgICAgICAgdGhpcy5yZXF1ZXN0ZXIgPSBuZXcgWE1MSHR0cFJlcXVlc3QoKTtcclxuICAgICAgICB0aGlzLmFkZHJlc3MgPSBhZGRyZXNzUGFyYW07XHJcbiAgICB9XHJcblxyXG4gICAgc2VuZCgpXHJcbiAgICB7XHJcbiAgICAgICAgdGhpcy5yZXF1ZXN0ZXIub3BlbignR0VUJywgdGhpcy5hZGRyZXNzLmNvbmNhdCh0aGlzLnBhcmFtZXRlcikpO1xyXG4gICAgICAgIHRoaXMucmVxdWVzdGVyLnNldFJlcXVlc3RIZWFkZXIoXCJDb250ZW50LVR5cGVcIiwgXCJhcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9VVRGLThcIik7XHJcbiAgICAgICAgdGhpcy5yZXF1ZXN0ZXIuc2VuZChudWxsKTtcclxuICAgIH1cclxuXHJcbiAgICBzZW5kUHV0KClcclxuICAgIHtcclxuICAgICAgICB0aGlzLnJlcXVlc3Rlci5vcGVuKCdQVVQnLCB0aGlzLmFkZHJlc3MuY29uY2F0KHRoaXMucGFyYW1ldGVyKSk7XHJcbiAgICAgICAgdGhpcy5yZXF1ZXN0ZXIuc2V0UmVxdWVzdEhlYWRlcihcIkNvbnRlbnQtVHlwZVwiLCBcImFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD1VVEYtOFwiKTtcclxuICAgICAgICB0aGlzLnJlcXVlc3Rlci5zZW5kKG51bGwpO1xyXG4gICAgfVxyXG59Il0sInNvdXJjZVJvb3QiOiIifQ==